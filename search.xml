<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>API调用(webhook/sdk)</title>
    <url>/2025/02/17/technology/API%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>　　主要是如何去用webhook或者sdk去进行相应API的访问，包括了使用python、Java sdk以及Python、Java webhook进行相应的访问。</p>
<p>　　基本上所有的API调用都可以分为使用SDK和Url两种，这边以飞书开发作为案例。</p>
<p>　　飞书应用开发，个人版是无法使用的。公司开发相应的程序又需要权限，可以自己建立一个公司账户，虽然不经过认证，但也能使用相应的开发。</p>
<p>　　飞书应用主要有四种，网页版应用、小程序、机器人、工作台组件，还可以对一些开发的内部网站使用飞书进行登录。</p>
<p>　　具体开发的方式详见<a class="link"   href="https://open.feishu.cn/document/home/index" >飞书开放平台开发文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，这里主要讲的是如何对webhook和飞书的sdk进行调用。</p>
<h1 id="飞书API的调用"><a href="#飞书API的调用" class="headerlink" title="飞书API的调用"></a>飞书API的调用</h1><p>　　在调用相应的API前，要在开发者后台中创建企业自建应用，然后再开发文档的右上角有<strong>API调试台</strong>，进入后有相关的例子，以及参数的配置，只不过没有调用WebHook的例子，我这边也加上了相应的例子。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250214141111174.png"
                      alt="image-20250214141111174"
                ></p>
<p>　　此机器人最终会发送消息，效果图如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250217143650848.png"
                      alt="image-20250217143650848"
                ></p>
<h2 id="一-Webhook"><a href="#一-Webhook" class="headerlink" title="一. Webhook"></a>一. Webhook</h2><p>　　也就是使用<code>url</code>发送数据包的方式去进行相应的访问，其中我们展示三种方式，分别是cmd中使用<code>curl</code>，Python、Java制作数据包。</p>
<p>　　现在以飞书机器人发送消息API的调用作为示例进行演示，注意此样例需要获取相应的token和user_id，此样例中的两个参数是无法实际使用的。</p>
<p>　　下面是三种访问的代码：</p>
<ol>
<li><h3 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a><strong>Curl</strong></h3><p>此方法需要提前安装好<code>curl</code>命令。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X POST <span class="string">&#x27;https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=user_id&#x27;</span> \</span><br><span class="line">-H <span class="string">&#x27;Authorization: Bearer t-g1042h8JMSNCGICKKETF&#x27;</span> \</span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">	&quot;content&quot;: &quot;&#123;\&quot;text\&quot;:\&quot;2-17\&quot;&#125;&quot;,</span></span><br><span class="line"><span class="string">	&quot;msg_type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">	&quot;receive_id&quot;: &quot;abcd1234&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="Python-Web"><a href="#Python-Web" class="headerlink" title="Python Web"></a><strong>Python</strong> Web</h3><p>此方法需要先安装requests包，这个包是可以发送Http请求的。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求的URL</span></span><br><span class="line">url = <span class="string">&#x27;https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=user_id&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer t-g1042h8JMSNCGICKKETF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: <span class="string">&quot;&#123;\&quot;text\&quot;:\&quot;2-17\&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;msg_type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">    <span class="string">&quot;receive_id&quot;</span>: <span class="string">&quot;abcd1234&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送POST请求</span></span><br><span class="line">response = requests.post(url, headers=headers, json=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印响应状态码和内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Status Code:&quot;</span>, response.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Response Content:&quot;</span>, response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


</li>
<li><h3 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a><strong>Java Web</strong></h3><p>此方法使用的是<code>java.net.HttpURLConnection</code>数据包</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeishuPostExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=user_id&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZATION</span> <span class="operator">=</span> <span class="string">&quot;Bearer t-g1042h8JMSNCGICKKETF&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONTENT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Create and configure the connection</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(URL);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Authorization&quot;</span>, AUTHORIZATION);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, CONTENT_TYPE);</span><br><span class="line">            connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Write the request body</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonBody</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\&quot;content\&quot;: \&quot;&#123;\\\&quot;text\\\&quot;:\\\&quot;2-17\\\&quot;&#125;\&quot;,&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\&quot;msg_type\&quot;: \&quot;text\&quot;,&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\&quot;receive_id\&quot;: \&quot;abcd1234\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> connection.getOutputStream()) &#123;</span><br><span class="line">                <span class="type">byte</span>[] input = jsonBody.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                os.write(input, <span class="number">0</span>, input.length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the response</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), <span class="string">&quot;UTF-8&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                String responseLine;</span><br><span class="line">                <span class="keyword">while</span> ((responseLine = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    response.append(responseLine.trim());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;Response: &quot;</span> + response.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Java11+中加入了新的特性，可以使用<code>HttpClient</code>进行访问，或者使用<code>OkHttp</code>库。如果要用Springboot中调用相关方法，要注意是否要注册为Bean，具体可参考博客：。</p>
</li>
</ol>
<h2 id="二-SDK"><a href="#二-SDK" class="headerlink" title="二. SDK"></a>二. SDK</h2><p>　　也就是使用飞书官方实现封装号的包进行访问分别使用，Python、Java SDK来给出样例</p>
<p>　　现在以飞书机器人发送消息API的调用作为示例进行演示，注意此样例需要获取相应的app_id、app_secret和user_id，此样例中的两个参数是无法实际使用的。</p>
<p>　　下面是三种访问的代码：</p>
<ol>
<li><h3 id="Python-SDK"><a href="#Python-SDK" class="headerlink" title="Python SDK"></a>Python SDK</h3><p>需要先导入Python的包，包括<code>lark_oapi</code>和</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lark_oapi <span class="keyword">as</span> lark</span><br><span class="line"><span class="keyword">from</span> lark_oapi.api.im.v1 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SDK 使用说明: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/server-side-sdk/python--sdk/preparations-before-development</span></span><br><span class="line"><span class="comment"># 以下示例代码默认根据文档示例值填充，如果存在代码问题，请在 API 调试台填上相关必要参数后再复制代码使用</span></span><br><span class="line"><span class="comment"># 复制该 Demo 后, 需要将 &quot;YOUR_APP_ID&quot;, &quot;YOUR_APP_SECRET&quot; 替换为自己应用的 APP_ID, APP_SECRET.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建client</span></span><br><span class="line">    client = lark.Client.builder() \</span><br><span class="line">        .app_id(<span class="string">&quot;YOUR_APP_ID&quot;</span>) \</span><br><span class="line">        .app_secret(<span class="string">&quot;YOUR_APP_SECRET&quot;</span>) \</span><br><span class="line">        .log_level(lark.LogLevel.DEBUG) \</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造请求对象</span></span><br><span class="line">    request: CreateMessageRequest = CreateMessageRequest.builder() \</span><br><span class="line">        .receive_id_type(<span class="string">&quot;user_id&quot;</span>) \</span><br><span class="line">        .request_body(CreateMessageRequestBody.builder()</span><br><span class="line">            .receive_id(<span class="string">&quot;789d7b34&quot;</span>)</span><br><span class="line">            .msg_type(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">            .content(<span class="string">&quot;&#123;\&quot;text\&quot;:\&quot;2-17\&quot;&#125;&quot;</span>)</span><br><span class="line">            .build()) \</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发起请求</span></span><br><span class="line">    response: CreateMessageResponse = client.im.v1.message.create(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理失败返回</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> response.success():</span><br><span class="line">        lark.logger.error(</span><br><span class="line">            <span class="string">f&quot;client.im.v1.message.create failed, code: <span class="subst">&#123;response.code&#125;</span>, msg: <span class="subst">&#123;response.msg&#125;</span>, log_id: <span class="subst">&#123;response.get_log_id()&#125;</span>, resp: \n<span class="subst">&#123;json.dumps(json.loads(response.raw.content), indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理业务结果</span></span><br><span class="line">    lark.logger.info(lark.JSON.marshal(response.data, indent=<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="Java-SDK"><a href="#Java-SDK" class="headerlink" title="Java SDK"></a>Java SDK</h3><p>此方法事先要<code>oapi-sdk</code>依赖：</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.larksuite.oapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oapi-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feishu&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>$&#123;feishu&#125;</code>要导入你需要的版本号，具体可以去<a class="link"   href="https://mvnrepository.com/artifact/com.larksuite.oapi/oapi-sdk" >maven的网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>看看。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.Client;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.core.utils.Jsons;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.service.im.v1.model.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.core.request.RequestOptions;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SDK 使用文档：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/server-side-sdk/java-sdk-guide/preparations</span></span><br><span class="line"><span class="comment">// 复制该 Demo 后, 需要将 &quot;YOUR_APP_ID&quot;, &quot;YOUR_APP_SECRET&quot; 替换为自己应用的 APP_ID, APP_SECRET.</span></span><br><span class="line"><span class="comment">// 以下示例代码默认根据文档示例值填充，如果存在代码问题，请在 API 调试台填上相关必要参数后再复制代码使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateMessageSample</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 构建client</span></span><br><span class="line">		<span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> Client.newBuilder(<span class="string">&quot;YOUR_APP_ID&quot;</span>, <span class="string">&quot;YOUR_APP_SECRET&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建请求对象</span></span><br><span class="line">		<span class="type">CreateMessageReq</span> <span class="variable">req</span> <span class="operator">=</span> CreateMessageReq.newBuilder()</span><br><span class="line">			.receiveIdType(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">			.createMessageReqBody(CreateMessageReqBody.newBuilder()</span><br><span class="line">				.receiveId(<span class="string">&quot;abcd1234&quot;</span>)</span><br><span class="line">				.msgType(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">				.content(<span class="string">&quot;&#123;\&quot;text\&quot;:\&quot;2-17\&quot;&#125;&quot;</span>)</span><br><span class="line">				.build())</span><br><span class="line">			.build();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 发起请求</span></span><br><span class="line">		<span class="type">CreateMessageResp</span> <span class="variable">resp</span> <span class="operator">=</span> client.im().v1().message().create(req);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 处理服务端错误</span></span><br><span class="line">		<span class="keyword">if</span>(!resp.success()) &#123;</span><br><span class="line">			System.out.println(String.format(<span class="string">&quot;code:%s,msg:%s,reqId:%s, resp:%s&quot;</span>,</span><br><span class="line">				resp.getCode(), resp.getMsg(), resp.getRequestId(), Jsons.createGSON(<span class="literal">true</span>, <span class="literal">false</span>).toJson(JsonParser.parseString(<span class="keyword">new</span> <span class="title class_">String</span>(resp.getRawResponse().getBody(), StandardCharsets.UTF_8)))));</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 业务数据处理</span></span><br><span class="line">		System.out.println(Jsons.DEFAULT.toJson(resp.getData()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="三-其它"><a href="#三-其它" class="headerlink" title="三. 其它"></a>三. 其它</h2><p>　　文档中还有很多接口的使用以及更多的案例，具体可以参考<a class="link"   href="https://open.feishu.cn/document/home/index" >飞书开放平台开发文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>SDK</tag>
        <tag>Webhook</tag>
        <tag>Python</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>利用脚本进行接口测试</title>
    <url>/2025/07/25/technology/%E5%B5%8C%E5%A5%97%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>当接口写完需要测试时，我们可以在接口文档或者用postman单独调用某个接口来进行测试。<br>但是，有的时候我们需要多次调用某个接口，或者嵌套调用多个接口。比如接口A调用后返回的一个数组，其中的值作为接口B的某个参数，并且多次调用。<br>这种时候单独调用一个接口就很难做到了，要利用脚本进行测试。这边，讲解两种嵌套调用接口的方式，一种是<strong>postman+javascript</strong>的方式，一种是<strong>python</strong>的方式。单独用javascript的方式可以通过第一种方式类推一下。</p>
<h2 id="问题：接口A返回内容，给接口B循环调用"><a href="#问题：接口A返回内容，给接口B循环调用" class="headerlink" title="问题：接口A返回内容，给接口B循环调用"></a>问题：接口A返回内容，给接口B循环调用</h2><p>我先来介绍一下手动执行的方法。</p>
<p>对于获取部门的接口A：<code>http://localhost:8095/unit</code>，需要请求头和请求体如下。</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求头</span></span><br><span class="line">Authorization<span class="punctuation">:</span>xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求体</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">702</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>然后获取的数据如下</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请求成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;AS-M&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;AD-H&quot;</span><span class="punctuation">,</span></span><br><span class="line">        ……</span><br><span class="line">           <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>对于上面获取的数据的data就是我接口B根据部门获取相应数据的其中一个参数<code>combatUnit</code>，而接口B每次只能接收一个，所以要多次调用：<code>http://localhost:8095/areaData</code>。该接口的请求头和请求体如下：</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求头</span></span><br><span class="line">Authorization<span class="punctuation">:</span>xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求体</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;attribute1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;businessTab&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;combatUnit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AS-M&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;region&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;subsidiary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>这时，B中的参数要一个个放入<code>combatUnit</code>中调用，返回结果如下。对于有些部门调用接口B的时候会出现其中的<code>list</code>为null的情况，我要找出这些部门。</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请求成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中东&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;point&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[54.458379258595116, 24.388822399734615]&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00B87A&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;centerPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[81.106187,6.629154]&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>如果一个个调用接口B，几百次调用对于手动来说不仅慢还易错，因此就需要使用脚本来测试。</p>
<h2 id="一-postman-javascript"><a href="#一-postman-javascript" class="headerlink" title="一.  postman+javascript"></a>一.  postman+javascript</h2><p>在postman配置一个接口中有一个Scripts，点进去后有个<code>Post-response</code>我们可以把内容写在这里。当我们对此接口send的时候，在这边的脚本就会执行。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250722161922979.png"
                      alt="image-20250722161922979"
                ></p>
<p>这个脚本中用的是javascripts脚本，在当前调用<code>pm.response</code>可以调取到当前接口的返回值。上面说了接口A返回的值形如</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请求成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;AS-M&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;AD-H&quot;</span><span class="punctuation">,</span></span><br><span class="line">        ……</span><br><span class="line">           <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>因此可以用<code>pm.response.json().data</code>获取整个数组，当然这个脚本得在接口A的<code>Scripts</code>中编写才能获得到数据。<br>准备好共用的请求头，然后请求体和请求的数据放入循环中，将data中的数据逐一放入并访问，然后判断B返回的<code>data.list</code>字段是否为空。完整js如下：</p>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 先拿到接口 A 的 data 数组</span></span><br><span class="line"><span class="keyword">const</span> aData = pm.<span class="property">response</span>.<span class="title function_">json</span>().<span class="property">data</span>;          <span class="comment">// 假设是 [&#123;combatUnit:&#x27;ES-C&#x27;, ...&#125;, ...]</span></span><br><span class="line">aData.<span class="title function_">push</span>(<span class="string">&quot;ccc-T&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 公共请求头（按需写）</span></span><br><span class="line"><span class="keyword">const</span> headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;authorization&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 轮询调接口 B</span></span><br><span class="line">aData.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cu = item;</span><br><span class="line">    <span class="keyword">if</span> (!cu) <span class="keyword">return</span>;    <span class="comment">// 空值跳过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> body = &#123;</span><br><span class="line">        <span class="attr">attribute1</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">businessTab</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">combatUnit</span>: cu,</span><br><span class="line">        <span class="attr">region</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">role</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">        <span class="attr">subsidiary</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    pm.<span class="title function_">sendRequest</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8095/areaData&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">header</span>: headers,</span><br><span class="line">        <span class="attr">body</span>: &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;raw&#x27;</span>,</span><br><span class="line">            <span class="attr">raw</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(body)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败&#x27;</span>, cu, err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> json = res.<span class="title function_">json</span>();</span><br><span class="line">        <span class="keyword">if</span> (!json.<span class="property">data</span> || !json.<span class="property">data</span>.<span class="property">list</span> || json.<span class="property">data</span>.<span class="property">list</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`⚠️  <span class="subst">$&#123;cu&#125;</span> 返回 list 为 null/空`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>然后因为上面全部测试都是有<code>list</code>的，所以我加了一个<code>aData.**push**(&quot;ccc-T&quot;)</code>，这个数据绝对是没有的，所以send这个接口以后，可以再左下角的Console中看到：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250723134955912.png"
                      alt="image-20250723134955912"
                ></p>
<h2 id="二-Python-单线程"><a href="#二-Python-单线程" class="headerlink" title="二. Python-单线程"></a>二. Python-单线程</h2><p>python作为一门编程语言，在写脚本上有其独特的优势，具体过程和<code>javascript</code>在postman中是一样的，但是区别在于接口A需要自己调用一下，区别也不大。</p>
<p>python中的网络编程可以使用<code>requests</code>包，没有的话可以<code>pip install requests</code>下载一下。具体代码如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 公共请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;xxx&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 模拟接口 A 返回的数据</span></span><br><span class="line">body_first = &#123;</span><br><span class="line">    <span class="string">&quot;area&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&quot;userId&quot;</span>: <span class="number">702</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url_first = <span class="string">&quot;http://localhost:8095/unit&quot;</span></span><br><span class="line"></span><br><span class="line">a_data = [<span class="string">&quot;nothing&quot;</span>]          <span class="comment"># 原始 data 数组</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    resp = requests.post(url_first, headers=headers, data=json.dumps(body_first), timeout=<span class="number">5</span>)</span><br><span class="line">    resp.raise_for_status()</span><br><span class="line">    a_data = resp.json()</span><br><span class="line">    <span class="keyword">if</span> a_data:</span><br><span class="line">        a_data = a_data.get(<span class="string">&quot;data&quot;</span>,&#123;&#125;)</span><br><span class="line"><span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请求失败&quot;</span>,  e)</span><br><span class="line">a_data.append(<span class="string">&quot;ccc-T&quot;</span>)                     <span class="comment"># 再塞一条</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 轮询调接口 B</span></span><br><span class="line">url = <span class="string">&quot;http://localhost:8095/areaData&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a_data:</span><br><span class="line">    <span class="comment"># 兼容 item 可能是 dict 或 str</span></span><br><span class="line">    cu = item.get(<span class="string">&quot;combatUnit&quot;</span>) <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">dict</span>) <span class="keyword">else</span> item</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cu:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">&quot;attribute1&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;businessTab&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;combatUnit&quot;</span>: cu,</span><br><span class="line">        <span class="string">&quot;region&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subsidiary&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp = requests.post(url, headers=headers, data=json.dumps(body), timeout=<span class="number">5</span>)</span><br><span class="line">        resp.raise_for_status()</span><br><span class="line">        data = resp.json()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data.get(<span class="string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="string">&quot;list&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;⚠️  <span class="subst">&#123;cu&#125;</span> 返回 list 为 null/空&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;cu&#125;</span> 查询成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请求失败&quot;</span>, cu, e)</span><br></pre></td></tr></table></figure></div>

<p>最终查询结果如下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250723140325946.png"
                      alt="image-20250723140325946"
                ></p>
<h2 id="三-Python-多线程"><a href="#三-Python-多线程" class="headerlink" title="三. Python-多线程"></a>三. Python-多线程</h2><p>上面python写完后我发现，这个访问实在是慢，postman只要6s，但这python要30s，这能忍？那不得搞个多线程访问一下？</p>
<p>首先先说明一下，我们可以用以下代码计算时间：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment"># ……其他代码</span></span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;耗时: <span class="subst">&#123;end - start:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>多线程所用的包<code>concurrent.futures</code>是原生python自带的，因此不需要pip。注意代码中的等待时间可以稍微设置长一点<code>timeout=15</code>，我之前5s，结果老有现成执行不完。</p>
<p>完整的多线程代码如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程数：可根据 CPU/IO 情况调整</span></span><br><span class="line">MAX_WORKERS = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;xxx&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_one</span>(<span class="params">combat_unit: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单个 combatUnit 的请求逻辑&quot;&quot;&quot;</span></span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">&quot;attribute1&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;businessTab&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;combatUnit&quot;</span>: combat_unit,</span><br><span class="line">        <span class="string">&quot;region&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subsidiary&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(</span><br><span class="line">            <span class="string">&quot;http://localhost:8095/areaData&quot;</span>,</span><br><span class="line">            headers=headers,</span><br><span class="line">            data=json.dumps(body),</span><br><span class="line">            timeout=<span class="number">15</span></span><br><span class="line">        )</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        data = r.json()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data.get(<span class="string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="string">&quot;list&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;⚠️  <span class="subst">&#123;combat_unit&#125;</span> 返回 list 为 null/空&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;combat_unit&#125;</span> 查询成功&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;请求失败 <span class="subst">&#123;combat_unit&#125;</span> <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 先拿到接口 A 的数据（同你原来的写法）</span></span><br><span class="line">body_first = &#123;<span class="string">&quot;area&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;userId&quot;</span>: <span class="number">702</span>&#125;</span><br><span class="line">resp = requests.post(</span><br><span class="line">    <span class="string">&quot;http://localhost:8095/unit&quot;</span>,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=json.dumps(body_first),</span><br><span class="line">    timeout=<span class="number">5</span></span><br><span class="line">)</span><br><span class="line">resp.raise_for_status()</span><br><span class="line">a_data = resp.json().get(<span class="string">&quot;data&quot;</span>, [])</span><br><span class="line">a_data.append(<span class="string">&quot;ccc-T&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 把 a_data 转成纯 combatUnit 字符串列表</span></span><br><span class="line">units = [</span><br><span class="line">    (item.get(<span class="string">&quot;combatUnit&quot;</span>) <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">dict</span>) <span class="keyword">else</span> item)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> a_data</span><br><span class="line">    <span class="keyword">if</span> item</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 多线程并发调用</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=MAX_WORKERS) <span class="keyword">as</span> pool:</span><br><span class="line">    futures = [pool.submit(query_one, u) <span class="keyword">for</span> u <span class="keyword">in</span> units <span class="keyword">if</span> u]</span><br><span class="line">    <span class="keyword">for</span> fut <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">        <span class="built_in">print</span>(fut.result())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;耗时: <span class="subst">&#123;end - start:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>最终结果如下：</p>
<div align="center">
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250723140514080.png"
                      alt="image-20250723140514080" 
                >
</div>

<p>这样子就能很快的运行了，如果把<code>MAX_WORKERS</code>调大，在我的计算机上可以到20为止，都是上涨的，可以在2.5s左右就运行完，具体得看电脑配置。</p>
<h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h2><p>Postman 的脚本之所以 6 s 左右就跑完，而 Python 却要 30 s，本质差异在于<strong>并发</strong>。</p>
<ol>
<li>Postman<br><code>pm.sendRequest()</code> 是 <strong>异步非阻塞</strong> 的：<br>· 循环里只是把请求“发出去”就立即继续下一轮，<br>· 所有请求几乎同时到达服务器，<br>· 因此耗时 ≈ 最慢的那一次 RTT（往返时延）≈ 6 s。</li>
<li>Python-单线程<br>我们用的是 <strong>串行阻塞</strong> 的 <code>requests.post(...)</code>：<br>· 一次请求发出去之后，脚本会<strong>阻塞</strong>在原地等服务器返回，<br>· 下一次请求要等上一次完全结束才开始，<br>· 假设一次 RTT 也是 6 s，10 条数据就是 10×6 s ≈ 60 s；<br>· 现在 30 s，说明可能只有 5 条数据，或者 RTT 在 3 s 左右。</li>
</ol>
<p>结论：<strong>Python 没有并发，请求依次排队，于是总耗时&#x3D;单条耗时×条数</strong>。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>分享：Dasha Taran</title>
    <url>/2025/01/02/personal/Dasha/</url>
    <content><![CDATA[<p>　　Dasha是我超喜欢的一个博主，初中时就看起了，分享一下她美照。</p>
<p>　　这张图是我最喜欢的一张。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/32.jpg"
                      style="zoom: 70%;" 
                >
</br>

<p>　　达莎·塔兰 （Dasha Taran），1999年10月12日出生于俄罗斯的沃罗涅日州，俄罗斯籍模特和美妆博主，拥有乌克兰与俄罗斯双重血统。日常分享有关化妆技巧、教程、日常生活和旅行的视频。</p>
<p>　　让她出名的照片是这张。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/21.jpg"
                      style="zoom: 70%;" 
                >
</br>

<p>　　但是我不是特别喜欢这个风格的。下面两张我也比较喜欢。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/29.jpg"
                      style="zoom: 70%;" 
                >
</br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/30.jpg"
                      style="zoom: 100%;" 
                >
</br>

<p>　　再分享一些美图，当然我也直接放在相册里了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/3.jpg"
                      style="zoom: 70%;" 
                >
</br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/4.jpg"
                      style="zoom: 70%;" 
                >
</br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/33.png"
                      style="zoom: 70%;" 
                >
</br>

<p>　　她还有很多其他风格的图片，大家可以自己去搜一下。</p>
<p>　　另外在附上她的一些社交媒体。</p>

  <div class="note p-4 mb-4 rounded-small markdown-body pink icon-padding">
    <i class="note-icon fa-solid fa-brands fa-bilibili"></i><p><strong>b站：<a class="link"   href="https://space.bilibili.com/1120258151?spm_id_from=333.337.0.0" >https://space.bilibili.com/1120258151?spm_id_from=333.337.0.0<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong></p>

  </div>


  <div class="note p-4 mb-4 rounded-small markdown-body blue icon-padding">
    <i class="note-icon fa-solid fa-brands fa-instagram"></i><p><strong>ins：@tarankaa</strong></p>

  </div>


  <div class="note p-4 mb-4 rounded-small markdown-body red icon-padding">
    <i class="note-icon fa-solid fa-brands fa-youtube"></i><p><strong>ins：<a class="link"   href="https://www.youtube.com/@DashaTaranbaby" >https://www.youtube.com/@DashaTaranbaby<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong></p>

  </div><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>Beauty</tag>
        <tag>Picture</tag>
      </tags>
  </entry>
  <entry>
    <title>飞书应用开发初解</title>
    <url>/2025/02/20/technology/%E9%A3%9E%E4%B9%A6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%88%9D%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　飞书是一款企业常用的协作管理平台，集通讯、文档、会议、审批等等一体化，由字节跳动于2017年开发完成。使用飞书产品的企业，都有他们自己的企业号。</p>
<p>　　而对于这些企业而言，飞书不仅仅提供了上述的功能，还能做二次开发，也就是说能够进一步增强飞书的功能，包括了通讯录、云文档、审批、机器人、小程序等等。同时也能够调用飞书相应的API，给公司做控制访问管理。具体引用文档上的一张图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/136008599535291e9ea5fe64b72b5766_yFkWHgUdcu.png"
                     
                ></p>
<p>　　现在我来根据<a class="link"   href="https://open.feishu.cn/document/home/index" >飞书开发文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>做一些简单介绍，链接也放在这里：<a class="link"   href="https://open.feishu.cn/document/home/index%E3%80%82" >https://open.feishu.cn/document/home/index。<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="开放平台介绍"><a href="#开放平台介绍" class="headerlink" title="开放平台介绍"></a>开放平台介绍</h2><p>　　该平台主要2种<strong>应用类型</strong>：企业自建应用、应用商店应用。前者是企业内部使用的，后者是所有飞书使用者都可以去使用的。这边飞书开发都是讲的前者，做企业内部的飞书开发。</p>
<p>　　这些应用中，主要有4种<strong>应用形态</strong>：小程序（不推荐）、网页、机器人、工作台小组件。</p>
<p>　　相应应用都是可以调用飞书的<strong>API</strong>的，使用示例可以在API调试台中看到，调用方式主要分为webhook和sdk。webhook就是用curl的方式去调用，除了命令行使用，还可以用各自语言中直接发送Http数据包的方式去调用。sdk的话是飞书自己开发的封装好的包，可以直接传入相关参数进行调用。两者的区别和调用方式可以参考<a class="link"   href="https://www.sabthever.cn/2025/02/17/technology/API%E8%B0%83%E7%94%A8/" >API调用(webhook&#x2F;sdk)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="应用鉴权"><a href="#应用鉴权" class="headerlink" title="应用鉴权"></a>应用鉴权</h2><ul>
<li><strong>访问凭证</strong>（access_token）：用于识别应用在访问飞书时使用的虚拟身份，代表应用从平台侧获取的授权。用于验证调用方身份、确保调用方具有执行操作所需要的权限。详情参考 <a class="link"   href="https://open.feishu.cn/document/ukTMukTMukTM/uMTNz4yM1MjLzUzM" >应用访问凭证<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
<li><strong>API 权限</strong>（Scope）：定义应用能够调用哪些飞书开放能力接口（OpenAPI）。API <strong>接口权限是以应用为维度授予的</strong>，每个应用的接口权限都是独立存在的，若多个应用需要调用同一个接口，那么每个应用都要添加对应的接口权限。详情参考 <a class="link"   href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN" >应用 API 权限<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
<li><strong>可用范围</strong>：定义哪些用户可以在飞书中看到和使用该应用，详情参考 <a class="link"   href="https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability" >应用可用范围<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/531a2230822e4871809e1b385c5f02c6~tplv-goo7wpa0wc-image.png"
                     
                ></p>
<h2 id="不同类型的用户ID"><a href="#不同类型的用户ID" class="headerlink" title="不同类型的用户ID"></a><a class="link"   href="https://open.feishu.cn/document/home/user-identity-introduction/introduction" >不同类型的用户ID<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><p>　　飞书中提供了5个不同的用户ID，开发者应该根据情况选用合适的ID。</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>定义</th>
<th>生成方式</th>
<th>注意事项</th>
</tr>
</thead>
<tbody><tr>
<td>lark_id</td>
<td>全局 ID，物理用户身份。刚完成注册的飞书用户属于个人身份，你可以在飞书 App 上看到<code>飞书个人版</code>的标识。</td>
<td>当一个用户用手机号在飞书注册登录之后，就会在飞书中生成一个全局 lark_id。</td>
<td>lark_id 对开发者或普通飞书用户来说不可见，开发者也无需关注。</td>
</tr>
<tr>
<td>user_id</td>
<td>用户在企业或组织内的身份。 同一个飞书用户在企业 A 和企业 B 内的 user_id 是不同的。<br />user_id 也称为 employee_id，这两个概念在大多数情况下完全对等（除飞书招聘业务）。</td>
<td>通过调用<a class="link"   href="https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create" >创建用户<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>接口在员工入职时直接指定其 user_id。也可以由企业管理员在添加用户时指定。<br />推荐企业使用邮箱前缀、工号或者手机号等有意义的字段作为员工的 user_id，这便于和企业既有的业务系统在用户身份上保持一致。<br />如果在调用创建用户接口时没有指定 user_id 字段，则系统会随机生成一个字符串作为该用户的 user_id。</td>
<td>一个飞书用户可以同时加入多个企业或组织，其在每个企业或组织内的身份是逻辑独立的，并且在数据层面相互隔离。<br/>用户存在“离职再入职”的场景，合理设计 user_id 的规则有利于维护账号体系。</td>
</tr>
<tr>
<td>open_id</td>
<td>用户在应用内的身份。 同一个 user_id 在不同应用中的 open_id 不同，其值统一以 ou_ 为前缀，如<code>ou_c99c5f35d542efc7ee492afe11af19ef</code>。</td>
<td>open_id 是用户在特定应用下才存在的身份标识，所以其生成是由用户在第一次启用该应用时由系统赋值生成的，对开发者来说这都是「只读」字段。</td>
<td><strong>不要在跨应用的数据通信过程中使用 open_id</strong>。一个常见的的错误用法是，用应用 A 的鉴权凭证获取到了用户 open_id 之后，在应用 B 中直接使用，这种情况会直接提示出现跨应用操作的错误信息。</td>
</tr>
<tr>
<td>union_id</td>
<td>用户在同一应用服务商提供的多个应用间的统一身份。  让应用开发商可以把同个用户(以 user_id 为标识）在多个应用中的身份关联起来。在需要跨应用做用户 ID 关联的场景中，开发者可以使用飞书开放平台提供的 union_id。union_id 以 on_ 为前缀，如 <code>on_cad4860e7af114fb4ff6c5d496d1dd76</code> 。</td>
<td>union_id 都是用户在特定应用下才存在的身份标识，所以其生成是由用户在第一次启用该应用时由系统赋值生成的，对开发者来说这都是「只读」字段。</td>
<td>应用开发商是组织概念，而非开发者维度的概念。</td>
</tr>
</tbody></table>
<h2 id="不同类型的token"><a href="#不同类型的token" class="headerlink" title="不同类型的token"></a><a class="link"   href="https://open.feishu.cn/document/server-docs/api-call-guide/calling-process/get-access-token" >不同类型的token<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><p>　　token是访问凭证，用于身份鉴权，在飞书中有三种token类型。</p>
<table>
<thead>
<tr>
<th>访问凭证类型</th>
<th>是否需要用户授权</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>tenant_access_token</td>
<td>否</td>
<td>以应用身份调用 API 时需要使用的凭证，可读写的数据范围由应用的<a class="link"   href="https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/configure-app-data-permissions" >数据权限范围<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>决定。该类凭证的值以<code>t-</code>为前缀，示例值：<code>t-24b5bf4e00b2af1234</code>。</td>
</tr>
<tr>
<td>user_access_token</td>
<td>是</td>
<td>以用户身份调用 API 时需要使用的凭证，可读写的数据范围由用户可读写的数据范围决定。该类凭证的值以<code>u-</code>为前缀，示例值：<code>u-Lr1RT7S8fS03mT1234</code>。</td>
</tr>
<tr>
<td>app_access_token</td>
<td>否</td>
<td>应用身份的短期令牌。开放平台根据 app_access_token 识别调用方的应用身份。该类凭证的值以<code>a-</code>或者<code>t-</code>为前缀，示例值：<code>a-24b5cef00b1234</code>。</td>
</tr>
</tbody></table>
<h2 id="登录身份验证"><a href="#登录身份验证" class="headerlink" title="登录身份验证"></a><a class="link"   href="https://open.feishu.cn/document/client-docs/build-login-free-system-" >登录身份验证<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><p>　　应用可通过开放平台身份验证能力获取用户身份，完成用户在应用中的登录流程。身份验证时，客户端内免登，浏览器上需要用户完成扫码登录或密码登录。当前，开放平台身份验证存在如下三种场景：</p>
<ul>
<li>小程序免登</li>
<li>浏览器内网页登录</li>
<li>客户端内网页免登</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　这里主要讲一下简单的飞书的从平台介绍到应用鉴权，再到用户 ID 与 token 类型以及登录身份验证等关键环节，具体的API可以参考<a class="link"   href="https://open.feishu.cn/api-explorer/cli_a7241cbd3813900e" >API调试台<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>飞书开发文档：<a class="link"   href="https://open.feishu.cn/document/home/index" >https://open.feishu.cn/document/home/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>二开</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2024/12/18/personal/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<h5 id="第一次搭博客的萌新，涩涩发抖"><a href="#第一次搭博客的萌新，涩涩发抖" class="headerlink" title="第一次搭博客的萌新，涩涩发抖"></a>第一次搭博客的萌新，涩涩发抖</h5></blockquote>
<!-- ![图片找不到了](https://inews.gtimg.com/om_bt/OpT81bdKWb3-3ARQOP-5BWVykiPP-9Eio3yBW26s_1q64AA/641 "/doge") -->

<p><img src="/images/641.jpg" alt="/doge 图片找不到了" title="/doge"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%A4%B4%E5%83%8F.jpg" alt="妞妞 图片找不到了" title="妞妞"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/2.jpg" alt="哭哭 图片找不到了" title="哭哭"></p>
<blockquote>
<h5 id="公式测试"><a href="#公式测试" class="headerlink" title="公式测试"></a>公式测试</h5></blockquote>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="25.832ex" height="5.018ex" role="img" focusable="false" viewBox="0 -1509.9 11417.6 2217.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mfrac" transform="translate(907,0)"><g data-mml-node="mi" transform="translate(400.5,676)"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><rect width="1127" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2274,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(3202.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4258.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5036.6,0)"><g data-mml-node="msup" transform="translate(384.2,676)"><g data-mml-node="mi"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mn" transform="translate(646.1,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(6854.6,0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mn" transform="translate(866,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(8124.1,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(8997.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9997.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(10766.6,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g></g></g></svg></mjx-container></p>
<blockquote>
<h6 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h6></blockquote>
<p><strong>本站所有内容完全免费！不得将本站内容用于商业或者非法用途。</strong></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>Picture</tag>
        <tag>Thought</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据学习笔记1-Hadoop</title>
    <url>/2025/01/11/technology/bigdata/Hadoop1/</url>
    <content><![CDATA[<h1 id="Hadoop1"><a href="#Hadoop1" class="headerlink" title="Hadoop1"></a>Hadoop1</h1><h2 id="一-前期"><a href="#一-前期" class="headerlink" title="一.前期"></a>一.前期</h2><ul>
<li><p>分布式系统架构，大小自己会扩展</p>
</li>
<li><p>发展及版本</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/2.png"
                     
                ></p>
<ul>
<li>Apache原始的，标准版，版本先进，免费，稳定性不足</li>
<li>我们这边用CDH，在原有Apache版本上封装了很多包，稳定性高于Apache版本，后来开始收费被Hortonworks收购。CDH老版本不收费。</li>
</ul>
</li>
<li><p>使用原因</p>
<ul>
<li><p>高扩展性</p>
<p>低成本服务器集群</p>
</li>
<li><p>高可靠性</p>
<p>默认三个副本</p>
</li>
<li><p>高容错性</p>
</li>
<li><p>低成本</p>
<p>针对海量数据</p>
</li>
<li><p>灵活，任意类型数据</p>
</li>
<li><p>开源</p>
</li>
</ul>
</li>
<li><p>和普通的对比</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/3.png"
                      style="zoom:80%;" 
                >
</li>
<li><p>Hadoop生态圈</p>
<ul>
<li><p>Hadoop核心</p>
<ul>
<li><p>HDFS、MapReduce、YARN</p>
<p>yarn调度服务 hdfs存储服务 mapreduce主要是分布式的计算</p>
</li>
</ul>
</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/4.png"
                      style="zoom: 50%;" 
                >

<p>Hive、Zookeeper、数据迁移、spark</p>
<p>Sqoop：数据库取</p>
<p>Flume：半&#x2F;非结构化数据结构取</p>
<p>python中类似于springboot的架构：Django Flask FastAPI</p>
</li>
<li><p>Hadoop对内多线程，对外单线程</p>
</li>
<li><p>端口</p>
<p>8088 任务查看监控运行</p>
<p>50070 hdfs查看</p>
<p>9000 hdfs服务端口</p>
</li>
<li><p>存储的数据</p>
<ul>
<li>结构化数据： 格式化数据 表</li>
<li>半结构化数据：日志 文件</li>
<li>非结构化数据：图片 图</li>
</ul>
</li>
</ul>
<h2 id="二-Hadoop架构"><a href="#二-Hadoop架构" class="headerlink" title="二.Hadoop架构"></a>二.Hadoop架构</h2><ul>
<li><p>HDFS（Hadoop Distributed File System)</p>
<p>分布式文件系统，解决分布式存储</p>
</li>
<li><p>MapReduce</p>
<p>分布式计算框架</p>
</li>
<li><p>YARN</p>
<ul>
<li>分布式资源管理系统</li>
<li>在Hadoop 2.x中引入</li>
</ul>
</li>
</ul>
<h3 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="(一)环境搭建"></a>(一)<a class="link"   href="https://github.com/Sabthever/Pictures1/blob/main/Download_Resources/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E8%A3%85hadoop+zookeeper+hbase(%E5%8D%B7%E4%B8%80).doc" >环境搭建<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h3><ul>
<li><p>hadoop+zookeeper+hbase</p>
</li>
<li><p>这边搭建CDH5.14.2 - Hadoop2.6.0</p>
</li>
<li><p>后期Apache Hadoop 3.1.3</p>
</li>
<li><p>单机   完整版</p>
</li>
<li><p>高可用分布式HA</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/5.png"
                      style="zoom: 100%;" 
                ></li>
</ul>
<h4 id="A-单机配置"><a href="#A-单机配置" class="headerlink" title="A.单机配置"></a>A.单机配置</h4><ol>
<li><p>布置好虚拟机基础配置（要jdk1.8）</p>
</li>
<li><p>把hadoop-2.6.0-cdh5.14.2.tar.gz放入&#x2F;opt</p>
</li>
<li><p>解压并且到相应文件夹中</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxf hadoop-2.6.0-cdh5.14.2.tar.gz</span><br><span class="line"><span class="built_in">mv</span> hadoop-2.6.0-cdh5.14.2 soft/hadoop260</span><br><span class="line"><span class="built_in">cd</span> /opt/soft/hadoop260/etc/hadoop/</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>改文件</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim hadoop-env.sh</span></span><br><span class="line">改JAVA_HOME 为自己的路径比如：</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/soft/jdk180</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"># vim core-site.xml 这个下面</span><br><span class="line">1.指定文件系统（记得改IP）</span><br><span class="line">2.指定存放目录</span><br><span class="line">3.指定hdfs的使用白名单(这边的所有的root组下的)</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://192.168.179.139:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/soft/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.users<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>往往两个副本在同一个机架上，另一个副本在远端</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"># vim hdfs-site.xml</span><br><span class="line">副本数，这边1，后面要改（因为这边只用了单机）</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br><span class="line">计算引擎框架叫yarn</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">vim yarn-site.xml</span><br><span class="line">资源管理器配置，自动管理资源</span><br><span class="line">主要配置shuffle</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.localhost<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>/etc/profile</code>中最后加上</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hadoop Env</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/soft/hadoop260 <span class="comment"># 这边要改jdk地址</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> YARN_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> HADOOP_INSTALL=<span class="variable">$HADOOP_HOME</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>密钥生成</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br><span class="line">ssh-copy-id -i id_rsa.pub root@本机ip</span><br></pre></td></tr></table></figure></div>

<p>试一下</p>
<p><code>ssh hadoopstandalone</code>然后退出exit ，那个hadoopstandalone是之前改的主机名</p>
</li>
<li><p>格式化hdfs</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动集群</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br><span class="line"><span class="built_in">yes</span></span><br><span class="line"><span class="built_in">yes</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">stop-all.sh <span class="comment"># 关闭集群</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看是否成功</p>
<p><code>jps</code></p>
<p>除了jps外一共要5个</p>
<p>NameNode DataNode挂掉且配置没有问题的话，可以把tmp删了，把logs里面的东西删了，再重格式化一遍</p>
</li>
<li><p>从浏览器查看</p>
<p><a class="link"   href="http://hadoop的ip地址:50070/" >地址<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ol>
<h5 id="使用和api"><a href="#使用和api" class="headerlink" title="使用和api"></a>使用和api</h5><ul>
<li>Linux中</li>
</ul>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">mkdir</span> /mydemo <span class="comment"># 建立一个文件夹</span></span><br><span class="line">hadoop fs -put /opt/abc.txt /mydemo <span class="comment"># 传文件</span></span><br><span class="line">hadoop fs -get /mydemo/abc.txt ~/.ssh/ <span class="comment"># 下载数据</span></span><br><span class="line">hadoop dfs -<span class="built_in">cat</span> /mydemo/abc.txt <span class="comment"># 查看文件</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>Java中</p>
<ul>
<li><p>pom.xml中依赖</p>
<p>版本要匹配</p>
<ul>
<li><p>hadoop common是工具包</p>
</li>
<li><p>hadoop client是客户端</p>
</li>
<li><p>Hadoop hdfs 记得删test</p>
</li>
</ul>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hadoop.version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">hadoop.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Java中进行IO操作</p>
<ul>
<li><p>读操作</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 通过地址找到hdfs文件系统</span></span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://192.168.179.139:9000&quot;</span>)</span><br><span class="line">                                   , <span class="keyword">new</span> <span class="title class_">Configuration</span>());</span><br><span class="line">    <span class="comment">// 获取输入流</span></span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/mydemo/abc&quot;</span>));</span><br><span class="line">    <span class="comment">// 查看流信息</span></span><br><span class="line">    String line=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((line = fis.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    fis.close();</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>写数据</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 通过地址找到hdfs文件系统</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://192.168.179.139:9000&quot;</span>)</span><br><span class="line">                , <span class="keyword">new</span> <span class="title class_">Configuration</span>());</span><br><span class="line">        <span class="comment">// 获取输入流</span></span><br><span class="line">        <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/mydemo/abc&quot;</span>));</span><br><span class="line">        <span class="comment">// 准备一个写入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:/d.txt&quot;</span>);</span><br><span class="line">        IOUtils.copyBytes(fis,fos,<span class="number">4096</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="B-高可用hadoop集群搭建"><a href="#B-高可用hadoop集群搭建" class="headerlink" title="B.高可用hadoop集群搭建"></a>B.<a class="link"   href="https://github.com/Sabthever/Pictures1/blob/main/Download_Resources/%E9%AB%98%E5%8F%AF%E7%94%A8hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.pdf" >高可用hadoop集群搭建<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ol>
<li><p>安装3台centos7 服务器</p>
</li>
<li><p>配置名字hd01\hd02\hd03</p>
</li>
<li><p>配置网络static</p>
</li>
<li><p>关闭防火墙</p>
</li>
<li><p>hd01可以访问hd02、hd03（同理其他都可互相访问）</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三个都要</span></span><br><span class="line"><span class="comment">#hd01 做ssh 公私钥 无秘</span></span><br><span class="line">ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># copy 公钥到 hd02 hd03</span></span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub root@ha01</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub root@ha02</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub root@ha03</span><br><span class="line"><span class="comment"># ssh-copy-id 192.168.192.201#hd02</span></span><br><span class="line"><span class="comment"># ssh-copy-id 192.168.192.202#hd03</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>所有服务器时间同步</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装chrony</span></span><br><span class="line">yum -y install chrony</span><br><span class="line"><span class="comment">#配置chrony</span></span><br><span class="line">vi /etc/chrony.conf</span><br><span class="line">server ntp1.aliyun.com</span><br><span class="line">server ntp2.aliyun.com</span><br><span class="line">server ntp3.aliyun.com</span><br><span class="line">注释掉server 0.centos.pool.ntp.org iburst</span><br><span class="line"><span class="comment">#启动chrony</span></span><br><span class="line">systemctl start chronyd</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装wget</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装psmisc(linux命令工具包 namenode主备切换时要用到 只需要安装在两个namenode节点上)(好像暂时不用，后面看看情况)</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y psmisc</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改源</p>
</li>
</ol>
<h5 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h5><ol>
<li><p>先配置zookeeper，只要一台为主</p>
<p>zookeeper的端口是2181</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这边的在第一台中</span></span><br><span class="line"><span class="comment"># 先把相应压缩包放到/opt</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxf zookeeper-3.4.5-cdh5.14.2.tar.gz</span><br><span class="line"><span class="built_in">mv</span> zookeeper-3.4.5-cdh5.14.2 soft/zk345</span><br><span class="line"><span class="built_in">cd</span> soft/zk345/conf/</span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim zoo.cfg</span></span><br><span class="line">dataDir=/opt/soft/zk345/data</span><br><span class="line">在最后一行加上</span><br><span class="line">server.1=192.168.179.141:2888:3888 <span class="comment"># 这两个端口可以改，前一个是互相通信的，后一个是选老大的</span></span><br><span class="line">server.2=192.168.179.142:2888:3888</span><br><span class="line">server.3=192.168.179.143:2888:3888</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; data/myid</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把/opt/soft/zk345拷贝到其他两个中</span></span><br><span class="line">scp -r zk345/ root@ha02:/opt/soft/</span><br><span class="line">scp -r zk345/ root@ha03:/opt/soft/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/opt/soft/zk345/data/myid的id</span></span><br><span class="line">2号改2 3号改3</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>三个同时配置文件</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/profile最后加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Zookeeper Env</span></span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/soft/zk345</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动zookeeper</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">zkServer.sh stop <span class="comment"># 停止</span></span><br></pre></td></tr></table></figure></div>

<p>jps看一下</p>
<p>多一个QuorumPeerMain就是正确的</p>
</li>
<li><p>配置hadoop集群</p>
<ul>
<li><p>先在第一个中配置，把hadoop相应文件放到&#x2F;opt下</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxf hadoop-2.6.0-cdh5.14.2.tar.gz</span><br><span class="line"><span class="built_in">mv</span> hadoop-2.6.0-cdh5.14.2 /opt/soft/hadoop260</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/soft/hadoop260/tmp</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/soft/hadoop260/dfs/journalnode_data</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/soft/hadoop260/dfs/edits</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/soft/hadoop260/dfs/datanode_data</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/soft/hadoop260/dfs/namenode_data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/soft/hadoop260/etc/hadoop</span><br><span class="line"><span class="comment"># vim hadoop-env.sh</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/soft/jdk180</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/opt/soft/hadoop260/etc/hadoop</span><br><span class="line"><span class="comment"># 保存退出</span></span><br></pre></td></tr></table></figure></div>

<p>vim core-site.xml 中文到时候删了 主机名记得改</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定hadoop集群在zookeeper上注册的节点名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hacluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span> 集群的名字</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定hadoop运行时产生的临时文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///opt/soft/hadoop260/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置缓存大小 默认4KB，并行状态下每个文件都开就会很大--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定zookeeper的存放地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha01:2181,ha02:2181,ha03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个地方改名别忘了--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置允许root代理访问主机节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置该节点允许root用户所属的组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>vim hdfs-site.xml 中文删了 主机名记得改</p>
<p>如果用固态硬盘128M就太小了，可以放大</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据块默认大小128M--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.block.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--副本数量 不配置默认为3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namenode节点数据(元数据)的存放位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///opt/soft/hadoop260/dfs/namenode_data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--datanode节点数据(元数据)的存放位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///opt/soft/hadoop260/dfs/datanode_data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启hdfs的webui界面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--datanode上负责进行文件操作的线程数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.max.transfer.threads<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定hadoop集群在zookeeper上的注册名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hacluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hacluster集群下有两个namenode分别是nn1,nn2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.hacluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nn1的rpc、servicepc和http通讯地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.hacluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.servicepc-address.hacluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha01:53310<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.hacluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha01:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nn2的rpc、servicepc和http通讯地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.hacluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha02:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.servicepc-address.hacluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha02:53310<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.hacluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha02:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定Namenode的元数据在JournalNode上存放的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://ha01:8485;ha02:8485;ha03:8485/hacluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定JournalNode在本地磁盘的存储位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/soft/hadoop260/dfs/journalnode_data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定namenode操作日志存储位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/soft/hadoop260/dfs/edits<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启namenode故障转移自动切换--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置失败自动切换实现方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.hacluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置隔离机制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置隔离机制需要SSH免密登录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hdfs文件操作权限 false为不验证--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.premissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br><span class="line">主机名记得改</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定mapreduce在yarn上运行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置历史服务器地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha01:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置历史服务器webUI地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha01:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启uber模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.ubertask.enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>vim yarn-site.xml 中文记得删除</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启yarn高可用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Yarn集群在zookeeper上注册的节点名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hayarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定两个resourcemanager的名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定rm1的主机--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定rm2的主机--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置zookeeper的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha01:2181,ha02:2181,ha03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启yarn恢复机制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置执行resourcemanager恢复机制实现类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定主resourcemanager的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ha03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nodemanager获取数据的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启日志聚集功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置日志保留7天--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>vim slaves 改为</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">ha01</span><br><span class="line">ha02</span><br><span class="line">ha03</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>发送到其他两台机器中</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">scp -r /opt/soft/hadoop260/ root@ha02:/opt/soft</span><br><span class="line">scp -r /opt/soft/hadoop260/ root@ha03:/opt/soft</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>好了以后，同时在三台设备中</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/profile</span></span><br><span class="line">在最后加上</span><br><span class="line"></span><br><span class="line"><span class="comment">#hadoop</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/soft/hadoop260</span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> YARN_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> HADOOP_INSTALL=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
<h5 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h5><ol>
<li><p>启动zookeeper(3个都启动)(前面启动了就不用了)</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>JournalNode(3个都启动)</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start journalnode</span><br><span class="line"><span class="comment"># jps查看一下 多一个JournalNode</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>格式化namenode(只在ha01主机上)</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将ha01上的Namenode的元数据复制到ha02相同位置</p>
<p>这里面存储的是namenode的日志文件：fsimage_xxxx</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">scp -r /opt/soft/hadoop260/dfs/namenode_data/current/ root@ha02:/opt/soft/hadoop260/dfs/namenode_data</span><br></pre></td></tr></table></figure></div>

<p>&#x2F;opt&#x2F;soft&#x2F;hadoop260&#x2F;dfs 中的edits是datanode的日志文件</p>
</li>
<li><p>在ha01或ha02格式化故障转移控制器zkfc(这边再ha01上)</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在ha01上启动dfs服务</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/6.png"
                      style="zoom:80%;" 
                >
</li>
<li><p>在hd03上启动yarn服务(这都是之前配置好的)</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure></div>

<p>多了ResourceManager</p>
<p>都多了NodeManager</p>
</li>
<li><p>在hd01上启动history服务器（不一定要）</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure></div>

<p>多了JobHistoryServer</p>
</li>
<li><p>在hd02上启动resourcemanager服务</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure></div></li>
</ol>
<ul>
<li><p>查看效果</p>
<p>ha01 <a class="link"   href="http://192.168.179.141:50070/" >http://192.168.179.141:50070/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>ha02 <a class="link"   href="http://192.168.179.142:50070/" >http://192.168.179.142:50070/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>ha03 <a class="link"   href="http://192.168.179.143:50070/" >http://192.168.179.143:50070/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<h5 id="检查集群情况"><a href="#检查集群情况" class="headerlink" title="检查集群情况"></a>检查集群情况</h5><ol>
<li><p>jps 上面服务不能缺少</p>
</li>
<li><p>查看状态</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在hd01上查看服务状态</span></span><br><span class="line">hdfs haadmin -getServiceState nn1 <span class="comment">#active</span></span><br><span class="line">hdfs haadmin -getServiceState nn2 <span class="comment">#standby</span></span><br><span class="line"><span class="comment"># 在hd03上查看resourcemanager状态</span></span><br><span class="line">yarn rmadmin -getServiceState rm1 <span class="comment">#standby</span></span><br><span class="line">yarn rmadmin -getServiceState rm2 <span class="comment">#active</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>检查主备切换</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill 掉Namenode主节点 查看Namenode standby节点状态</span></span><br><span class="line"><span class="built_in">kill</span> -9 namenode主节点进程</span><br><span class="line"><span class="comment"># 恢复后重新加入</span></span><br><span class="line">hadoop-daemon.sh start namenode <span class="comment">#启动后也只是standby节点</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h5 id="集群关闭"><a href="#集群关闭" class="headerlink" title="集群关闭"></a>集群关闭</h5><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure></div>

<h5 id="集群二次启动"><a href="#集群二次启动" class="headerlink" title="集群二次启动"></a>集群二次启动</h5><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#三个都启动</span></span><br><span class="line">zkServer.sh start <span class="comment"># 这个要先开</span></span><br><span class="line"><span class="comment">#在hd01上启动dfs</span></span><br><span class="line">start-dfs.sh</span><br><span class="line"><span class="comment">#在hd03上启动yarn</span></span><br><span class="line">start-yarn.sh</span><br><span class="line"><span class="comment">#在hd02上启动resourcemanager</span></span><br><span class="line">yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/13.png"
                      style="zoom:80%;" 
                >

<p>来个第二次开启的脚本</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！/bin/sh</span></span><br><span class="line"><span class="comment">#三个都启动</span></span><br><span class="line">zkServer.sh start</span><br><span class="line"><span class="built_in">sleep</span> 0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取主机名</span></span><br><span class="line">full_hostname=$(hostname)</span><br><span class="line">last_char=<span class="string">&quot;<span class="variable">$&#123;full_hostname:0-1&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$last_char</span> == <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">	start-dfs.sh</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$last_char</span> == <span class="string">&quot;2&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">	yarn-daemon.sh start resourcemanager</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	start-yarn.sh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></div>



<h2 id="三-HDFS"><a href="#三-HDFS" class="headerlink" title="三.HDFS"></a>三.HDFS</h2><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="(一)介绍"></a>(一)介绍</h3><h4 id="1-HDFS副本机制"><a href="#1-HDFS副本机制" class="headerlink" title="1.HDFS副本机制"></a>1.HDFS副本机制</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/9.png"
                      style="zoom:80%;" 
                >

<h4 id="2-HDFS优缺点"><a href="#2-HDFS优缺点" class="headerlink" title="2.HDFS优缺点"></a>2.HDFS优缺点</h4><ul>
<li>优点<ul>
<li>高容错性</li>
<li>适合大数据处理</li>
<li>可构建在廉价的机器上</li>
</ul>
</li>
<li>缺点<ul>
<li>不适合低延迟数据访问场景</li>
<li>不适合小文件存取场景</li>
<li>不适合并发写入，文件随机求改场景</li>
</ul>
</li>
</ul>
<p>3.HDFS写 文件</p>
<h3 id="二-使用"><a href="#二-使用" class="headerlink" title="(二)使用"></a>(二)使用</h3><h4 id="1-HDFS写-文件"><a href="#1-HDFS写-文件" class="headerlink" title="1.HDFS写 文件"></a>1.HDFS写 文件</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/10.png"
                      style="zoom:80%;" 
                >

<ol>
<li>client向namenode请求地址</li>
<li>client拿着地址向yarn提出写入，提供地址</li>
<li>yarn向datanode存入数据，返回相应的应答</li>
<li>client收到应答后告诉向NameNode</li>
</ol>
<h4 id="2-HDFS读过程"><a href="#2-HDFS读过程" class="headerlink" title="2.HDFS读过程"></a>2.HDFS读过程</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/11.png"
                      style="zoom:80%;" 
                >



<h2 id="四-Hadoop高可用集群"><a href="#四-Hadoop高可用集群" class="headerlink" title="四.Hadoop高可用集群"></a>四.Hadoop高可用集群</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/18.png"
                      style="zoom: 50%;" 
                >

<h3 id="1-ZooKeeper"><a href="#1-ZooKeeper" class="headerlink" title="1.ZooKeeper"></a>1.ZooKeeper</h3><ul>
<li><p>脑裂现象</p>
<p>这边就没这个现象，因为配好了</p>
<p>hadoop 1.x 2.x是要配置重选</p>
<p>3.x中ZooKeeper会在两个主机中选出一个新的</p>
</li>
</ul>
<h3 id="2-Hadoop"><a href="#2-Hadoop" class="headerlink" title="2.Hadoop"></a>2.Hadoop</h3><h4 id="A-使用"><a href="#A-使用" class="headerlink" title="A.使用"></a>A.使用</h4><ul>
<li><p>查看效果</p>
<p>ha01 <a class="link"   href="http://192.168.179.141:50070/" >http://192.168.179.141:50070/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>ha02 <a class="link"   href="http://192.168.179.142:50070/" >http://192.168.179.142:50070/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>ha03 <a class="link"   href="http://192.168.179.143:50070/" >http://192.168.179.143:50070/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<h5 id="检查集群情况-1"><a href="#检查集群情况-1" class="headerlink" title="检查集群情况"></a>检查集群情况</h5><ol>
<li><p>jps 上面服务不能缺少</p>
</li>
<li><p>查看状态</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在hd01上查看服务状态</span></span><br><span class="line">hdfs haadmin -getServiceState nn1 <span class="comment">#active</span></span><br><span class="line">hdfs haadmin -getServiceState nn2 <span class="comment">#standby</span></span><br><span class="line"><span class="comment"># 在hd03上查看resourcemanager状态</span></span><br><span class="line">yarn rmadmin -getServiceState rm1 <span class="comment">#standby</span></span><br><span class="line">yarn rmadmin -getServiceState rm2 <span class="comment">#active</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>检查主备切换</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill 掉Namenode主节点 查看Namenode standby节点状态</span></span><br><span class="line"><span class="built_in">kill</span> -9 namenode主节点进程</span><br><span class="line"><span class="comment"># 恢复后重新加入</span></span><br><span class="line">hadoop-daemon.sh start namenode <span class="comment">#启动后也只是standby节点</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h5 id="集群二次启动-1"><a href="#集群二次启动-1" class="headerlink" title="集群二次启动"></a>集群二次启动</h5><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#三个都启动</span></span><br><span class="line">zkServer.sh start 这个要先开</span><br><span class="line"><span class="comment">#在hd01上启动dfs</span></span><br><span class="line">start-dfs.sh</span><br><span class="line"><span class="comment">#在hd03上启动yarn</span></span><br><span class="line">start-yarn.sh</span><br><span class="line"><span class="comment">#在hd02上启动resourcemanager</span></span><br><span class="line">yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure></div>

<ul>
<li>start-dfs.sh启动的是<ul>
<li>NameNode</li>
<li>Secondary NameNode</li>
<li>DataNode</li>
</ul>
</li>
<li>start-dfs.sh启动的是<ul>
<li>ResourceManager</li>
<li>NodeManager</li>
</ul>
</li>
</ul>
<h3 id="3-组成"><a href="#3-组成" class="headerlink" title="3.组成"></a>3.组成</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/8.png"
                      style="zoom:80%;" 
                >

<ul>
<li><p>NameNode相当于DataNode的目录</p>
<p>client得到NameNode中的元数据在去找DN，而不是NN取找DN</p>
</li>
<li><p><strong>NN挂掉了SNN并不会成为主节点，只能作辅助作用</strong>，NN失效了有备用NN而非SNN</p>
</li>
<li><p>&#x2F;opt&#x2F;soft&#x2F;hadoop260&#x2F;dfs&#x2F;namenode_data&#x2F;这里面存储的是namenode的日志文件：fsimage_xxxx</p>
<p>&#x2F;opt&#x2F;soft&#x2F;hadoop260&#x2F;dfs 中的edits是datanode的日志文件</p>
<p>seen_txid要统一</p>
</li>
</ul>
<h2 id="五-MapReduce"><a href="#五-MapReduce" class="headerlink" title="五.MapReduce"></a>五.MapReduce</h2><ul>
<li>程序工程文件夹<code>java/mymr</code></li>
</ul>
<h3 id="一-前期-1"><a href="#一-前期-1" class="headerlink" title="(一)前期"></a>(一)前期</h3><ul>
<li><p>针对大量数据进行计算、统计的引擎框架</p>
</li>
<li><p>数据少没有优势</p>
</li>
<li><p>真正的并行计算</p>
</li>
<li><p>一开始模拟数据调试</p>
</li>
<li><p>我们只要关心程序逻辑，不需要知道这么分布</p>
</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/14.png"
                      style="zoom:80%;" 
                >

<p>分解+聚合</p>
</li>
<li><p>设计思想</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/15.png"
                      style="zoom: 50%;" 
                >
</li>
<li><p>不适用领域</p>
<ul>
<li>难以实时计算</li>
<li>不适合(实时)流式计算</li>
<li>不适合DGA（有向图）计算</li>
</ul>
</li>
<li><p>MapReduce编程规范</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/16.png"
                      style="zoom:80%;" 
                >
</li>
<li><p><strong>开启多reducer节点</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启多个reduce任务</span></span><br><span class="line">job.setNumReduceTasks(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>MapperJoin</code>  </p>
<p>对于Mapper和Reducer的传递，</p>
<p>对于双表，比如用户和订单，对于大量订单和少量用户</p>
<p>可以把用户信息作为缓存放到订单服务器上，减少数据的拉取(本服务器上的就不用动了)</p>
<p><strong>建议25MB以内的可以传递过来</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/19.png"
                      style="zoom:80%;" 
                >
</li>
<li><p>整体架构</p>
<p><a class="link"   href="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/20.png" >图片原件<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/20.png"
                      alt="12"  
                >

<ul>
<li><p>过程</p>
<ol>
<li><p>准备行读取器进行逻辑切片，切片过程可以由自己调整切片大小而计算切片数量。但是，由于不会真的直接在128M的地方一刀切，所以可能会出现较大的切片</p>
</li>
<li><p>切片结果，key行偏移量，v为行内容，切成了多少片就有多少mapper任务</p>
<p>提优：一千七八片的话，通过调整切片最大值最小值，将总数提到2000</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切片大小源码 blockSize默认128MB</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">long</span> <span class="title function_">computeSplitSize</span><span class="params">(<span class="type">long</span> blockSize, <span class="type">long</span> minSize, <span class="type">long</span> maxSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Math.max(minSize, Math.min(maxSize, blockSize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>mapper处理</p>
</li>
<li><p>读取通过环状缓冲区来读入，用以节省内存，因为前面的切片过程由于不能从中截断会切出过大的片。单个maptask的内存无法直接处理这些数据，这个缓冲区大小为100M，满到80M时，等这条数据读完就溢出写入磁盘。</p>
</li>
<li><p>HashPartitioner分区，在溢出过程中。默认对key进行hash分区，实际可自定义，数量和reducer数量紧密相关</p>
</li>
<li><p>WritableComparator排序，在溢出过程中。默认对key进行ascii的排序，</p>
</li>
<li><p>Combiner进行局部合并，继承的也是Reducer。同时自动归并排序合并成大的内容，因为内部是由多个partition值的。combiner工作的位置和小文件聚合同时进行(这段是透明的)，我们只要关combiner</p>
</li>
<li><p>再传到相应Reducer进行归并。对于是否要reduce，可以看我们需求是否要进行合并。然后是看文件的大小，太小的文件会使过程过于复杂影响效率。</p>
</li>
</ol>
</li>
<li><p>FileInputFormat的过程中会获取前面的一系列参数</p>
<ul>
<li><p>可以直接查看源码</p>
</li>
<li><p>然后再主类中可以加入这条</p>
</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">job.getConfiguration().setLong(<span class="string">&quot;mapreduce.input.fileinputformat.split.minsize&quot;</span>,<span class="number">10000L</span>);</span><br><span class="line"><span class="comment">// 文件分割最小尺寸10kB一个，最好都是2的多少次方</span></span><br><span class="line">job.getConfiguration().setLong(<span class="string">&quot;mapreduce.input.fileinputformat.split.maxsize&quot;</span>,<span class="number">128000000L</span>);</span><br><span class="line"><span class="comment">// 最大分割</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>FileInputFormat继承InputFormat，里面有分割（getSplits）和读取（createRecordReader）两种要实现</p>
<p>分割的话确定好大小，会往后推直到找到相应符号(比如换行符)</p>
<p>读取默认是行读取器，因此默认Key为LongWritable类型</p>
</li>
</ul>
</li>
<li><p>环状缓冲区</p>
<ul>
<li>切片从头到尾找不到结束符、换行符等等 ，理论128M，但可能远超内存量</li>
<li>用于节省内存</li>
<li>100M用80M，利用类似于双指针法，双指针收尾相接则满，或者直接为0(都是取余的)就满</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二-Java程序1"><a href="#二-Java程序1" class="headerlink" title="(二)Java程序1"></a>(二)Java程序1</h3><ul>
<li><p>一个文件中单词统计</p>
</li>
<li><p>程序结构</p>
<p>我们要管的就是Map和Reduce</p>
<p>combine和Shuffle之间会比较慢</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/17.png"
                      style="zoom:80%;" 
                >
</li>
<li><p><strong>Hadoop中需要对象比较的原因</strong></p>
<p>Combine到Shuffle的步骤中，通过类似于哈希表的方式计算hash分配到各个服务器中。</p>
</li>
</ul>
<h4 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h4><div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hadoop.version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">hadoop.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-WordMapper-java"><a href="#2-WordMapper-java" class="headerlink" title="2.WordMapper.java"></a>2.WordMapper.java</h4><ul>
<li><p>知识</p>
<ul>
<li><p>这样的话要自己实现序列化</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Long,String,String,Integer&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>用这个就会自动序列化</p>
<p><code>&lt;keyin,valuein,keyout,vlueout&gt;</code></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text,Text, IntWritable&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意，Mapper第一个对于Hadoop而言一般都是LongWritable，都是自动分的行号</strong></p>
</li>
<li><p>用<code>context.write</code>来写入输出值，都要转为相应的格式</p>
</li>
</ul>
</li>
<li><p>程序</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.mymr.firstmr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分解接收到的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text,Text, IntWritable&gt; &#123;</span><br><span class="line">    <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 将一行数据分割成单词</span></span><br><span class="line">        String[] words = value.toString().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">// 利用for循环向后传递(单词 1)</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(word),one);<span class="comment">//hello 1, ok 1,hello 1, hadoop 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>解释</p>
<ul>
<li><code>IntWritable one = new IntWritable(1);</code>放外面节省空间</li>
</ul>
</li>
</ul>
<h4 id="3-WordReduce-java"><a href="#3-WordReduce-java" class="headerlink" title="3.WordReduce.java"></a>3.WordReduce.java</h4><ul>
<li><p>知识</p>
<ul>
<li>用<code>context.write</code>来写入输出值，都要转为相应的格式</li>
</ul>
</li>
<li><p>程序</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.mymr.firstmr;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line">  <span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 聚合统计</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line">      <span class="comment">// hello [1,1]</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">          <span class="comment">// 统计数组中有多少数字进行相加</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (IntWritable iw : values) &#123;</span><br><span class="line">              <span class="comment">//            cnt+=iw.get();</span></span><br><span class="line">              cnt++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 将统计的结果存放到文件中</span></span><br><span class="line">          context.write(key, <span class="keyword">new</span> <span class="title class_">IntWritable</span>(cnt));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>解释</p>
<ul>
<li>可以看到reduce方法第二个参数为迭代器，是因为值其实是多个聚合的数组，具体参考图片的Shuffle阶段</li>
</ul>
</li>
</ul>
<h4 id="4-main"><a href="#4-main" class="headerlink" title="4.main"></a>4.main</h4><ul>
<li><p>知识</p>
<ul>
<li><p>包要搞对</p>
<p>FileInputFormat和FileOutputFormat用长的那个包lib的</p>
</li>
</ul>
</li>
<li><p>程序</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.mymr.firstmr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用MapReduce框架运行我写的mapper和reducer业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 开启配置环境</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置程序的引导类</span></span><br><span class="line">        job.setJarByClass(WordApp.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务</span></span><br><span class="line">        job.setMapperClass(WordMapper.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务的输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置reducer任务</span></span><br><span class="line">        job.setReducerClass(WordReducer.class);</span><br><span class="line">        <span class="comment">// 设置reducer任务的输出类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置文件读取路径 FileInputFormat用长的那个包lib的</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\word.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置统计结果的输出路径 FileOutputFormat用长的那个包lib的 这个文件夹不能存在</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\wordresult&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>解释</p>
<ul>
<li><p>执行后会出错，空指针异常</p>
<p>因为windows下没hadoop环境，要配置环境</p>
</li>
</ul>
</li>
<li><p>windows下hadoop环境伪造</p>
<ul>
<li><p>把hadoop的压缩包找到一个地方解压(只要用里面的库)</p>
</li>
<li><p>把winutils.exe放在bin文件夹中</p>
</li>
<li><p>hadoop.dll放到c:&#x2F;Windows&#x2F;System32中</p>
</li>
<li><p>环境变量</p>
<p>新建一个HADOOP_HOME  值为hadoop文件路径</p>
<p>在Path中新加一条%HADOOP_HOME%\bin</p>
</li>
<li><p>重启一下idea</p>
</li>
</ul>
</li>
</ul>
<h3 id="三-Hadoop手动序列化"><a href="#三-Hadoop手动序列化" class="headerlink" title="(三)Hadoop手动序列化"></a>(三)Hadoop手动序列化</h3><ul>
<li><p>序列化和反序列化都要写，要对应好</p>
</li>
<li><p>Hadoop中的变量都要是序列化的，比如Text、IntWritable、LongWritable</p>
<p>如果不用这个，就需要我们手动的去序列化</p>
</li>
<li><p>全部手写</p>
<p><strong>一定要接入<code>Serializable</code>接口</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> chinese;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> math;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> english;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造、无参构造、get、set</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 序列化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">20</span>, <span class="number">88</span>, <span class="number">90</span>, <span class="number">95</span>);</span><br><span class="line">        <span class="comment">// 这个里面是文件</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/Temp/aabbcc&quot;</span>));</span><br><span class="line">        oos.writeObject(st);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 反序列化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:/Temp/aabbcc&quot;</span>));</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(stu.getStuname()+<span class="string">&quot;...&quot;</span>+stu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>MapReduce提供自动序列化与比较<code>WritableComparable&lt;T&gt;</code></p>
<p>写就是序列化，读就是反序列化</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">WritableComparable</span>&lt;Student&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> chinese;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> math;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> english;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 顺序不能乱，要和属性顺序一模一样</span></span><br><span class="line">        dataOutput.writeUTF(stuname);</span><br><span class="line">        dataOutput.writeInt(age);</span><br><span class="line">        dataOutput.writeInt(chinese);</span><br><span class="line">        dataOutput.writeInt(math);</span><br><span class="line">        dataOutput.writeInt(english);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuname=dataInput.readUTF();</span><br><span class="line">        <span class="built_in">this</span>.age = dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.chinese = dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.math = dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.english = dataInput.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="四-Java程序2"><a href="#四-Java程序2" class="headerlink" title="(四)Java程序2"></a>(四)Java程序2</h3><ul>
<li><p>学生成绩行转列</p>
</li>
<li><p>程序</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">WritableComparable</span>&lt;Student&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> chinese;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> math;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> english;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 顺序不能乱，要和属性顺序一模一样</span></span><br><span class="line">        dataOutput.writeUTF(stuname);</span><br><span class="line">        dataOutput.writeInt(age);</span><br><span class="line">        dataOutput.writeInt(chinese);</span><br><span class="line">        dataOutput.writeInt(math);</span><br><span class="line">        dataOutput.writeInt(english);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.stuname=dataInput.readUTF();</span><br><span class="line">        <span class="built_in">this</span>.age = dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.chinese = dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.math = dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.english = dataInput.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 要有set get toString</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text,Text,Student&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, Student&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        String[] infos = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setStuname(infos[<span class="number">1</span>]);</span><br><span class="line">        stu.setAge(Integer.parseInt(infos[<span class="number">2</span>]));</span><br><span class="line">        <span class="keyword">if</span> (infos[<span class="number">3</span>].equalsIgnoreCase(<span class="string">&quot;chinese&quot;</span>)) &#123;</span><br><span class="line">            stu.setChinese(Integer.parseInt(infos[<span class="number">4</span>]));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (infos[<span class="number">3</span>].equalsIgnoreCase(<span class="string">&quot;math&quot;</span>)) &#123;</span><br><span class="line">            stu.setMath(Integer.parseInt(infos[<span class="number">4</span>]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stu.setEnglish(Integer.parseInt(infos[<span class="number">4</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(stu.getStuname()),stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Student, Text, NullWritable&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Student&gt; values, Reducer&lt;Text, Student, Text, NullWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span>[] scores = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (Student st : values) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st.getChinese() != <span class="number">0</span>) &#123;</span><br><span class="line">                scores[<span class="number">0</span>]=st.getChinese();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (st.getMath() != <span class="number">0</span>) &#123;</span><br><span class="line">                scores[<span class="number">1</span>] = st.getMath();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                scores[<span class="number">2</span>] = st.getEnglish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(key+<span class="string">&quot; &quot;</span>+ Arrays.toString(scores)),NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 开启配置环境</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置程序的引导类</span></span><br><span class="line">        job.setJarByClass(StudentApp.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务</span></span><br><span class="line">        job.setMapperClass(StudentMapper.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务的输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(Student.class);</span><br><span class="line">        <span class="comment">// 设置reducer任务</span></span><br><span class="line">        job.setReducerClass(StudentReducer.class);</span><br><span class="line">        <span class="comment">// 设置reducer任务的输出类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line">        <span class="comment">// 设置文件读取路径 FileInputFormat用长的那个包lib的</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\stu.csv&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置统计结果的输出路径 FileOutputFormat用长的那个包lib的</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\sturesult&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>程序解释</p>
<p>不要某个输出可以用<code>NullWritable</code></p>
<p>最后要用<code>NullWritable.get()</code>来交付一个空值</p>
<p>自己的类就一定要序列化才能再mapper和reducer里用</p>
</li>
<li><p>程序效果</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,zs,20,chinese,56</span><br><span class="line">2,zs,20,math,35</span><br><span class="line">3,zs,20,english,33</span><br><span class="line">4,ls,21,chinese,48</span><br><span class="line">5,ls,21,math,77</span><br><span class="line">6,ls,21,english,53</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls [48, 77, 53]</span><br><span class="line">zs [56, 35, 33]</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="五-Java程序3"><a href="#五-Java程序3" class="headerlink" title="(五)Java程序3#"></a>(五)Java程序3#</h3><ul>
<li><p>双表查询的内联</p>
</li>
<li><p>用户和用户订单</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,张三,23</span><br><span class="line">2,李四,534</span><br><span class="line">3,王五,234</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,1,苹果,30</span><br><span class="line">2,2,栗子,40</span><br><span class="line">3,3,西瓜,15</span><br><span class="line">4,3,火龙果,80</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>mapper进来的时候，是单纯的上下拼接，一开始进来的key是行数</p>
</li>
<li><p>程序</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustOrder</span> <span class="keyword">implements</span> <span class="title class_">WritableComparable</span>&lt;CustOrder&gt;,Cloneable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> custid;</span><br><span class="line">    <span class="keyword">private</span> String custname=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ordid;</span><br><span class="line">    <span class="keyword">private</span> String goodname=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CustOrder <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (CustOrder)<span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(CustOrder o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        dataOutput.writeInt(custid);</span><br><span class="line">        dataOutput.writeUTF(custname);</span><br><span class="line">        dataOutput.writeInt(age);</span><br><span class="line">        dataOutput.writeInt(ordid);</span><br><span class="line">        dataOutput.writeUTF(goodname);</span><br><span class="line">        dataOutput.writeDouble(price);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.custid=dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.custname=dataInput.readUTF();</span><br><span class="line">        <span class="built_in">this</span>.age=dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.ordid=dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.goodname=dataInput.readUTF();</span><br><span class="line">        <span class="built_in">this</span>.price=dataInput.readDouble();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// toString get set省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这边按照用户id单纯分一下组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustOrderMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text, IntWritable,CustOrder&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Mapper&lt;LongWritable, Text, IntWritable, CustOrder&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 分割字符串</span></span><br><span class="line">        String[] infos = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="type">CustOrder</span> <span class="variable">co</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustOrder</span>();</span><br><span class="line">        <span class="comment">// 判断本条数据传入的是用户还是订单</span></span><br><span class="line">        <span class="keyword">if</span> (infos.length == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">// 传入的是一个用户数据</span></span><br><span class="line">            co.setCustid(Integer.parseInt(infos[<span class="number">0</span>]));</span><br><span class="line">            co.setCustname(infos[<span class="number">1</span>]);</span><br><span class="line">            co.setAge(Integer.parseInt(infos[<span class="number">2</span>]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 传入的是一个订单数据</span></span><br><span class="line">            co.setOrdid(Integer.parseInt(infos[<span class="number">0</span>]));</span><br><span class="line">            co.setCustid(Integer.parseInt(infos[<span class="number">1</span>]));</span><br><span class="line">            co.setGoodname(infos[<span class="number">2</span>]);</span><br><span class="line">            co.setPrice(Double.parseDouble(infos[<span class="number">3</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(<span class="keyword">new</span> <span class="title class_">IntWritable</span>(co.getCustid()),co);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustOrderReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;IntWritable,CustOrder, Text, NullWritable&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(IntWritable key, Iterable&lt;CustOrder&gt; values, Reducer&lt;IntWritable, CustOrder, Text, NullWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 将迭代器转集合</span></span><br><span class="line">        List&lt;CustOrder&gt; groupLst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (CustOrder cu : values) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                groupLst.add(cu.clone());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for (CustOrder cu : values) &#123;</span></span><br><span class="line"><span class="comment">//            groupLst.add(cu);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到用户对象信息</span></span><br><span class="line">        <span class="type">CustOrder</span> <span class="variable">cust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustOrder</span>();</span><br><span class="line">        <span class="keyword">for</span> (CustOrder co:groupLst)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!co.getCustname().equals(<span class="string">&quot;&quot;</span>)) &#123; <span class="comment">// 要用equals否则会出错</span></span><br><span class="line">                cust.setCustid(co.getCustid());</span><br><span class="line">                cust.setCustname(co.getCustname());</span><br><span class="line">                cust.setAge(co.getAge());</span><br><span class="line">                groupLst.remove(co);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关联数据发送到mr上下文</span></span><br><span class="line">        <span class="keyword">for</span> (CustOrder cos : groupLst) &#123;</span><br><span class="line">            <span class="comment">// 将订单信息和用户信息关联起来</span></span><br><span class="line">            cust.setOrdid(cos.getOrdid());</span><br><span class="line">            cust.setGoodname(cos.getGoodname());</span><br><span class="line">            cust.setPrice(cos.getPrice());</span><br><span class="line">            <span class="comment">// 将本数据发送上下文</span></span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(cust.toString()),NullWritable.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustOrderApp</span> &#123;</span><br><span class="line">    <span class="comment">// 递归删除一个文件夹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteDirectory</span><span class="params">(File dir)</span> &#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123; <span class="comment">//some JVM implementations may return null for empty dirs</span></span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">// Recursive call</span></span><br><span class="line">                    deleteDirectory(file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Delete the file</span></span><br><span class="line">                    file.delete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// The directory is now empty so now it can be deleted</span></span><br><span class="line">        dir.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 开启配置环境</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置程序的引导类</span></span><br><span class="line">        job.setJarByClass(CustOrderApp.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务</span></span><br><span class="line">        job.setMapperClass(CustOrderMapper.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务的输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(IntWritable.class);</span><br><span class="line">        job.setMapOutputValueClass(CustOrder.class);</span><br><span class="line">        <span class="comment">// 设置reducer任务</span></span><br><span class="line">        job.setReducerClass(CustOrderReducer.class);</span><br><span class="line">        <span class="comment">// 设置reducer任务的输出类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有这个文件就删了</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\custorderresult&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(fi.exists())&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CustOrderApp</span>().deleteDirectory(fi);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件读取路径 FileInputFormat用长的那个包lib的</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\custorder&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置统计结果的输出路径 FileOutputFormat用长的那个包lib的</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\custorderresult&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>解释</p>
<ul>
<li><p>空不能序列化，所以实体类中可以写个””初始化</p>
</li>
<li><p>要小心对象的传入与删除，往往会导致空指针</p>
<p>比如CustOrderReducer中，每次cu地址相同，会导致指向的空间一致，所以导致groupLst中的内容全部相同(这边的values是<code>Iterable&lt;CustOrder&gt; values</code>)</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;CustOrder&gt; groupLst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (CustOrder cu : values) &#123;</span><br><span class="line">      groupLst.add(cu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那么有几种解决方法</p>
<ol>
<li><p>新建一个CustOrder对象，逐个属性复制过去，<code>groupLst.add(新对象)</code></p>
</li>
<li><p>再CustOrder里面实现clone()，<code>groupLst.add(cu.clone())</code></p>
<p>实例对象要实现Cloneable接口才可以让clone()用public</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustOrder</span> <span class="keyword">implements</span> <span class="title class_">WritableComparable</span>&lt;CustOrder&gt;,Cloneable &#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CustOrder <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (CustOrder)<span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustOrderReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;IntWritable,CustOrder, Text, NullWritable&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(IntWritable key, Iterable&lt;CustOrder&gt; values, Reducer&lt;IntWritable, CustOrder, Text, NullWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 将迭代器转集合</span></span><br><span class="line">        List&lt;CustOrder&gt; groupLst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (CustOrder cu : values) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                groupLst.add(cu.clone());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ....</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>找不到其他的了&#x2F;(ㄒoㄒ)&#x2F;~~</p>
</li>
</ol>
</li>
<li><p><strong>开启多reducer节点</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启多个reduce任务</span></span><br><span class="line">job.setNumReduceTasks(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>结果</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CustOrder&#123;custid=1, custname=&#x27;张三&#x27;, age=23, ordid=1, goodname=&#x27;苹果&#x27;, price=30.0&#125;</span><br><span class="line">CustOrder&#123;custid=2, custname=&#x27;李四&#x27;, age=534, ordid=2, goodname=&#x27;栗子&#x27;, price=40.0&#125;</span><br><span class="line">CustOrder&#123;custid=3, custname=&#x27;王五&#x27;, age=234, ordid=4, goodname=&#x27;火龙果&#x27;, price=80.0&#125;</span><br><span class="line">CustOrder&#123;custid=3, custname=&#x27;王五&#x27;, age=234, ordid=3, goodname=&#x27;西瓜&#x27;, price=15.0&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>(六)Java程序4 MapJoin</p>
<ul>
<li><p>少量数据的如用户，和大量数据的如订单，少量数据要小于25MB</p>
</li>
<li><p>Reduce根本不用，只用Mapper，Mapper兼具了Reducer的功能。ReduceJoin是在Reducer中进行表关联</p>
</li>
<li><p>少量数据直接放到服务器的缓存中，在mapper阶段关联</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将用户文件(小于25M)存放到缓存中</span></span><br><span class="line">job.addCacheFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\custorder\\custs.csv&quot;</span>).toURI());</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在mapper中要初始化setup加入缓存</p>
<p><code>URI[] uris = context.getCacheFiles();</code></p>
</li>
<li><p>程序</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CO</span> <span class="keyword">implements</span> <span class="title class_">WritableComparable</span>&lt;CustOrder&gt;,Cloneable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> custid;</span><br><span class="line">    <span class="keyword">private</span> String custname=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ordid;</span><br><span class="line">    <span class="keyword">private</span> String goodname=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CustOrder <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (CustOrder)<span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(CustOrder o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        dataOutput.writeInt(custid);</span><br><span class="line">        dataOutput.writeUTF(custname);</span><br><span class="line">        dataOutput.writeInt(age);</span><br><span class="line">        dataOutput.writeInt(ordid);</span><br><span class="line">        dataOutput.writeUTF(goodname);</span><br><span class="line">        dataOutput.writeDouble(price);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.custid=dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.custname=dataInput.readUTF();</span><br><span class="line">        <span class="built_in">this</span>.age=dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.ordid=dataInput.readInt();</span><br><span class="line">        <span class="built_in">this</span>.goodname=dataInput.readUTF();</span><br><span class="line">        <span class="built_in">this</span>.price=dataInput.readDouble();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set get toString</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">COMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text,Text, NullWritable&gt; &#123;</span><br><span class="line">    <span class="comment">// 作为缓存</span></span><br><span class="line">    Map&lt;String,String&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 服务器启动时运行一次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">(Mapper&lt;LongWritable, Text, Text, NullWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 读缓存中的cust文件 设置相应的数据结构 存放到全局变量中</span></span><br><span class="line">        URI[] uris = context.getCacheFiles();</span><br><span class="line">        <span class="keyword">if</span> (uris != <span class="literal">null</span> &amp;&amp; uris.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取缓存文件路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> uris[<span class="number">0</span>].getPath();</span><br><span class="line">            <span class="comment">// 读文件</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                String[] infos = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                cache.put(infos[<span class="number">0</span>],line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, NullWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 获得到的是Order的数据1，1，苹果，30</span></span><br><span class="line">        String[] infos = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> cache.get(infos[<span class="number">1</span>]);</span><br><span class="line">        context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(user+<span class="string">&quot;,&quot;</span>+value.toString()),NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">COApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 开启配置环境</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置程序的引导类</span></span><br><span class="line">        job.setJarByClass(COApp.class);</span><br><span class="line">        <span class="comment">// 将用户文件(小于25M)存放到缓存中</span></span><br><span class="line">        job.addCacheFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\custorder\\custs.csv&quot;</span>).toURI());</span><br><span class="line">        <span class="comment">// 设置mapper任务</span></span><br><span class="line">        job.setMapperClass(COMapper.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务的输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(NullWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件读取路径 FileInputFormat用长的那个包lib的</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\custorder\\orders.csv&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置统计结果的输出路径 FileOutputFormat用长的那个包lib的</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\custorderresult&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="六-Java程序4"><a href="#六-Java程序4" class="headerlink" title="(六)Java程序4"></a>(六)Java程序4</h3><ul>
<li><p>MapReduce中所有内容都可以自定义</p>
<ol>
<li><p>这边来自定义中间的<strong>分组Partition部分</strong>，原生的是用hash进行分配reducer，可以自定义分配，这边是按照张、李、其他分</p>
<ul>
<li>自己的类<code>extends Partitioner&lt;T1,T2&gt;</code>mapper的outkey和outvalue</li>
</ul>
<p>返回的0、1、2就是放进哪个文件中</p>
<ul>
<li>主类中要有对应的Reducer数量即为分组数量，然后定义使用自定义分区</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启多个reduce任务</span></span><br><span class="line">job.setNumReduceTasks(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义分区</span></span><br><span class="line">job.setPartitionerClass(MyPartitioner.class);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>自定义<strong>排序Order部分</strong>，默认按键排序，自己重写也按键，但是可以把要排序的一起放到键中。这边按年龄排序</p>
<ul>
<li><p>两个参数就是两个键，return按照-1 0 1来排大小，如果是整数可以直接用<code>Integer.compare(para1,para2)</code></p>
</li>
<li><p>里面其实有很多接口的方法，这边只是其中一个</p>
</li>
<li><p>在主类中要加上如下语句</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置reducer任务</span></span><br><span class="line">job.setReducerClass(CustOrderReducer.class);</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>自定义<strong>Combiner部分</strong>，比如要聚合的时候算这个姓人的平均值</p>
<ul>
<li><p>虽然实现的是Reducer，但<strong>要和Mapper的输出结果保持一致</strong></p>
<p><code>extends Reducer&lt;mapperOutKey, mapperOutValue,mapperOutKey, mapperOutValue&gt; </code></p>
</li>
<li><p>也可以做排序，但是不是在整个组中，而是在相同的键中排序</p>
</li>
<li><p>在主类中要加入如下语句</p>
</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置combiner</span></span><br><span class="line">job.setCombinerClass(PartCombiner.class);</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li><p>多出的东西</p>
<ul>
<li>原本数据</li>
</ul>
</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">张三,20</span><br><span class="line">李四,30</span><br><span class="line">张无忌,18</span><br><span class="line">张三丰,80</span><br><span class="line">李四光,50</span><br><span class="line">李显龙,24</span><br><span class="line">王五,60</span><br><span class="line">赵六,56</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>程序</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text,Text, Text&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text,Text&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 分割数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> value.toString().substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        String[] infos = value.toString().split(&quot;,&quot;);</span></span><br><span class="line">        context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(name),value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPartitioner</span> <span class="keyword">extends</span> <span class="title class_">Partitioner</span>&lt;Text, Text&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPartition</span><span class="params">(Text text, Text text2, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> text.toString();</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;张&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;李&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartSortComparator</span> <span class="keyword">extends</span> <span class="title class_">WritableComparator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PartSortComparator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Text.class,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> &#123;</span><br><span class="line">        <span class="type">Text</span> <span class="variable">user1</span> <span class="operator">=</span> (Text)a;   <span class="comment">// a、b都是前面传过来的键</span></span><br><span class="line">        <span class="type">Text</span> <span class="variable">user2</span> <span class="operator">=</span> (Text)b;</span><br><span class="line">        <span class="type">int</span> <span class="variable">user1Age</span> <span class="operator">=</span> Integer.parseInt(user1.toString().split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">user2Age</span> <span class="operator">=</span> Integer.parseInt(user2.toString().split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(user1Age, user2Age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartCombiner</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text,Text,Text&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Reducer&lt;Text, Text, Text, Text&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 填充数据到集合</span></span><br><span class="line">        List&lt;String&gt; strlst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Text user : values) &#123;</span><br><span class="line">            strlst.add(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算所有人年龄的平均值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String us : strlst) &#123;</span><br><span class="line">            cnt+=Integer.parseInt(us.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = cnt / strlst.size();</span><br><span class="line">        <span class="comment">// 对string集合进行排队</span></span><br><span class="line">        Object[] obj = strlst.stream().sorted(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">age1</span> <span class="operator">=</span> Integer.parseInt(o1.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age2</span> <span class="operator">=</span> Integer.parseInt(o2.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(age1, age2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).toArray();</span><br><span class="line">        <span class="comment">// 输出数据</span></span><br><span class="line">        <span class="keyword">for</span> (Object ob : obj) &#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(ob.toString()+<span class="string">&quot;,avg=&quot;</span>+cnt),<span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 开启配置环境</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 开启任务</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置程序的引导类</span></span><br><span class="line">        job.setJarByClass(PartApp.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务</span></span><br><span class="line">        job.setMapperClass(PartMapper.class);</span><br><span class="line">        <span class="comment">// 设置mapper任务的输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启多个reduce任务</span></span><br><span class="line">        job.setNumReduceTasks(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用自定义分区</span></span><br><span class="line">        job.setPartitionerClass(MyPartitioner.class);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        // 设置Mapper中的数据排序</span></span><br><span class="line"><span class="comment">//       job.setSortComparatorClass(PartSortComparator.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置combiner</span></span><br><span class="line">        job.setCombinerClass(PartCombiner.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件读取路径 FileInputFormat用长的那个包lib的</span></span><br><span class="line">        FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\users.csv&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置统计结果的输出路径 FileOutputFormat用长的那个包lib的</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\mymr\\custorderresult&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>最终结果</p>
<ul>
<li><p>part-r-00000</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">张无忌,18,avg=39	</span><br><span class="line">张三,20,avg=39	</span><br><span class="line">张三丰,80,avg=39	</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>part-r-00001</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">李显龙,24,avg=34	</span><br><span class="line">李四,30,avg=34	</span><br><span class="line">李四光,50,avg=34	</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>part-r-00002</p>
<p>  可以看到，不同姓(键)下的并没有升序排序</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">王五,60,avg=60	</span><br><span class="line">赵六,56,avg=56	</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h2 id="六-Yarn"><a href="#六-Yarn" class="headerlink" title="六.Yarn"></a>六.Yarn</h2><h3 id="（一）前期"><a href="#（一）前期" class="headerlink" title="（一）前期"></a>（一）前期</h3><ul>
<li><p>分布式资源调度管理框架</p>
<p>（Yet Another Resource Negotiator）</p>
</li>
<li><p>历史</p>
<p>1.x中没有，mapreduce自己调度</p>
<p>2.x中开始出现</p>
</li>
</ul>
<h3 id="（二）Yarn内容"><a href="#（二）Yarn内容" class="headerlink" title="（二）Yarn内容"></a>（二）Yarn内容</h3><h4 id="1-基本架构核心组件总体"><a href="#1-基本架构核心组件总体" class="headerlink" title="1.基本架构核心组件总体"></a>1.基本架构核心组件总体</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/21.png"
                      style="zoom:80%;" 
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/22.png"
                      style="zoom: 50%;" 
                >

<ul>
<li><p>ApplicationMastper</p>
<p>相当于是做任务的主体，根据RM来调度空余的资源来形成Container。最后结果直接给client而不用交付RM</p>
</li>
<li><p>Container</p>
<p>容器，开辟空间和内存来做事。AM首先在自己的机器上开辟，不够根据RM调度，使用别人的资源来构成新Container</p>
</li>
</ul>
<h4 id="2-ResourceManager"><a href="#2-ResourceManager" class="headerlink" title="2.ResourceManager"></a>2.ResourceManager</h4><ul>
<li>ResourceManager<strong>组成</strong><ul>
<li>ResourceScheduler-&gt;资源调度器，根据节点的容量队列情况，为应用程序分配资源</li>
<li>Application Manager-&gt;应用程序管理器，负责接受Client端传输的job请求</li>
</ul>
</li>
<li>ResourceManager<strong>功能</strong><ul>
<li>处理客户端请求</li>
<li>监控NodeManager</li>
<li>启动和监控ApplicationMaster，进行必要的重启</li>
<li>整个系统的资源分配和调度</li>
</ul>
</li>
</ul>
<h4 id="3-NodeManager"><a href="#3-NodeManager" class="headerlink" title="3.NodeManager"></a>3.NodeManager</h4><ul>
<li><p>NodeManager功能</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/23.png"
                      style="zoom: 50%;" 
                ></li>
</ul>
<h4 id="4-ApplicationMaster"><a href="#4-ApplicationMaster" class="headerlink" title="4.ApplicationMaster"></a>4.ApplicationMaster</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/24.png"
                      style="zoom: 50%;" 
                >

<h4 id="5-Container"><a href="#5-Container" class="headerlink" title="5.Container"></a>5.Container</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/25.png"
                      style="zoom: 50%;" 
                >

<h4 id="6-YARN工作原理"><a href="#6-YARN工作原理" class="headerlink" title="6.YARN工作原理"></a>6.<a class="link"   href="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/26.png" >YARN工作原理<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/26.png"
                      style="zoom: 100%;" 
                >

<ul>
<li>不同任务，容器也不同</li>
</ul>
<h4 id="7-YARN的资源调度器"><a href="#7-YARN的资源调度器" class="headerlink" title="7.YARN的资源调度器"></a>7.YARN的资源调度器</h4><ul>
<li><p>目前Hadoop作业调度器有三种</p>
<ul>
<li><p>FIFO:先进先出调度器</p>
</li>
<li><p>Capacity Scheduler:容量调度器</p>
<p>根据程序的优先级和需求，就调更多资源给它</p>
</li>
<li><p>Fair Scheduler:公平调度器</p>
<p>所有程序和公平分配资源</p>
</li>
</ul>
</li>
<li><p>默认的作业调度器可以在yarn-default.xml文件中查看，属性如下</p>
<ul>
<li>yarn.resourcemanagerscheduler.class</li>
<li>Hadoop版本2.6.0-cdh5.14.2的默认调度器是公平调度器</li>
</ul>
</li>
</ul>
<h3 id="（三）任务提交"><a href="#（三）任务提交" class="headerlink" title="（三）任务提交"></a>（三）任务提交</h3><ol>
<li><p>MapReduceJava项目写好</p>
</li>
<li><p>上传数据文件到所需目录</p>
</li>
<li><p>改代码地址，&#x2F;&#x2F;&#x2F;是本地地址</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;file:///opt/testdata/users.csv&quot;</span>));</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;hdfs://192.168.179.139:9000/mydemo/users.csv&quot;</span>));</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">FileInputFormat.setInputPaths(job,<span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">// 这种就要命令行传值</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>项目打包，瘦包（不需要包依赖）因为放到hadoop环境下，本来就有</p>
<p><a class="link"   href="https://www.cnblogs.com/Chary/articles/18096225" >胖瘦包<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>这边直接打包，胖包方法是改build中的内容，网上有</p>
</li>
<li><p>运行</p>
<p><code>hadoop jar jar包包路径 主类全限定名 [args的传入值,...]</code></p>
<ul>
<li>用args传入地址的时候<code>file:///opt/testdata/users.csv /opt/testdata/res/five</code>第一个一定要用file:&#x2F;&#x2F; 第二个不一定</li>
<li>hdfs:&#x2F;&#x2F;192.168.179.139:9000&#x2F;mydemo&#x2F;users.csv</li>
</ul>
</li>
</ol>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/12.png"
                      style="zoom:50%;" 
                >

<h4 id="1-大量小文件存储进入Hadoop"><a href="#1-大量小文件存储进入Hadoop" class="headerlink" title="1.大量小文件存储进入Hadoop"></a>1.大量小文件存储进入Hadoop</h4><ul>
<li><p>不适合小文件原因是单个的文件给了较大的空间，机械硬盘一般用128MB</p>
<p>hadoop2默认块大小就是128Mb</p>
</li>
<li><p>小文件合成大文件 （一般是同样文件格式的、结构化的数据）</p>
<p>用<code>hadoop archive</code>归档</p>
<ol>
<li><p>先把小文件上传</p>
<p>一开始&#x2F;mydemo要有建立好</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put /opt/testdata/* /mydemo</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开启压缩</p>
<p>ma.har名字可以改，但后缀名一定要是.har</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop archive -archiveName ma.har -p /mydemo /mydemo1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看归档的文件</p>
<p>hadoop dfs和hdfs dfs没什么显著区别</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">cat</span> /mydemo1/ma.har/part-0</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ul>
<h4 id="2-Hadoop版本区别"><a href="#2-Hadoop版本区别" class="headerlink" title="2.Hadoop版本区别"></a>2.Hadoop版本区别</h4><ul>
<li>1和2，1没有yarn，2有</li>
<li>2和3，2只有两个NameNode，但是3可以有多个NameNode</li>
</ul>
<h4 id="3-HDFS有哪些角色和功能"><a href="#3-HDFS有哪些角色和功能" class="headerlink" title="3.HDFS有哪些角色和功能"></a>3.HDFS有哪些角色和功能</h4><ul>
<li><p>NameNode</p>
<p>存储文件元数据</p>
</li>
<li><p>DataNode</p>
<p>存储数据</p>
</li>
<li><p>SecondaryNameNode</p>
<p>作为NN的辅助，帮助数据持久化，<strong>单机中没有</strong></p>
</li>
<li><p>ResourseManager</p>
<p>yarn节点，调度</p>
</li>
<li><p>NodeManager</p>
<p>作为yarn的备用节点</p>
</li>
</ul>
<h4 id="4-HDFS副本存放策略"><a href="#4-HDFS副本存放策略" class="headerlink" title="4.HDFS副本存放策略"></a>4.HDFS副本存放策略</h4><ul>
<li>三台机器，两台同一机架上，还有一台在其他机架上</li>
</ul>
<h4 id="5-HDFS读写流程"><a href="#5-HDFS读写流程" class="headerlink" title="5.HDFS读写流程"></a>5.HDFS读写流程</h4><h4 id="6-MapReduce的过程"><a href="#6-MapReduce的过程" class="headerlink" title="6.MapReduce的过程"></a>6.MapReduce的过程</h4><h4 id="7-Hadoop使用的版本"><a href="#7-Hadoop使用的版本" class="headerlink" title="7.Hadoop使用的版本"></a>7.Hadoop使用的版本</h4><h4 id="8-Hive数据倾斜"><a href="#8-Hive数据倾斜" class="headerlink" title="8.Hive数据倾斜"></a>8.Hive数据倾斜</h4><h1 id="小脚本呢"><a href="#小脚本呢" class="headerlink" title="小脚本呢"></a>小脚本呢</h1><h3 id="1-hadoop单机启动"><a href="#1-hadoop单机启动" class="headerlink" title="1.hadoop单机启动"></a>1.hadoop单机启动</h3><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 五个节点+hive前后+zeppelin</span></span><br><span class="line">start-all.sh</span><br><span class="line"><span class="built_in">nohup</span> hive --service metastore &amp;</span><br><span class="line"><span class="built_in">nohup</span> hive --service hiveserver2 &amp;</span><br><span class="line">zeppelin-daemon.sh start</span><br></pre></td></tr></table></figure></div>

<h3 id="2-hadoop单机关闭"><a href="#2-hadoop单机关闭" class="headerlink" title="2.hadoop单机关闭"></a>2.hadoop单机关闭</h3><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">zeppelin-daemon.sh stop</span><br><span class="line">PID=$(jps -l| grep -i RunJar| awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;PID[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$id</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">stop-all.sh</span><br><span class="line">jps</span><br></pre></td></tr></table></figure></div>

<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Bigdata</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据学习笔记2-Hive、Hbase</title>
    <url>/2025/02/17/technology/bigdata/Hadoop2-Hive-Hbase/</url>
    <content><![CDATA[<h2 id="Hadoop2"><a href="#Hadoop2" class="headerlink" title="Hadoop2"></a>Hadoop2</h2><h2 id="七-Hive"><a href="#七-Hive" class="headerlink" title="七.Hive"></a>七.Hive</h2><ul>
<li>不统计是不走mapReduce的</li>
<li>最后ADS中的内容就是要被调用而不被调用的</li>
<li>默认走MapReduce引擎</li>
</ul>
<h3 id="（一）前期"><a href="#（一）前期" class="headerlink" title="（一）前期"></a>（一）前期</h3><h4 id="什么是"><a href="#什么是" class="headerlink" title="什么是"></a><strong>什么是</strong></h4><ul>
<li>基于Hadoop的<strong>数据仓库</strong>解决方案<ul>
<li>将结构化的数据文件映射为数据库表</li>
<li>提供类sql的查询语言HQL(Hive Query Language)</li>
<li>Hive让更多的人使用Hadoop</li>
</ul>
</li>
</ul>
<h4 id="优势和特点"><a href="#优势和特点" class="headerlink" title="优势和特点"></a><strong>优势和特点</strong></h4><ul>
<li><p>提供了一个简单的优化模型</p>
</li>
<li><p>HQL类SQL语法，简化MR开发</p>
</li>
<li><p>支持在不同的计算框架上运行</p>
</li>
<li><p>支持在HDFS和HBase上临时查询数据</p>
</li>
<li><p>支持用户自定义函数、格式</p>
</li>
<li><p>常用于ETL操作和BI</p>
<p>ETL：加载清理转化</p>
<p>BI：做图表</p>
</li>
<li><p>稳定可靠(真实生产环境)的批处理</p>
</li>
<li><p>有庞大活跃的社区</p>
</li>
</ul>
<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ul>
<li><p>映射hadoop数据成表</p>
</li>
<li><p>本身不存数据</p>
</li>
<li><p>自带一个小型数据库derby(相当于元数据库)，但是还是太小，再架设一个mysql为hive数据库。</p>
</li>
<li><p>图例和解释</p>
<p>Hive把hadoop元数据映射到mysql，用zeppelin来当数据库控制工具。</p>
<p>Hive相当于是一个中转的数据仓库，mysql中存元数据，hdfs中存原始数据，外部调用hive来结构化的查询。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/27.png"
                      style="zoom:80%;" 
                >
</li>
<li><p>做个人数据表映射的时候，脱敏操作，即敏感数据可以不映射</p>
</li>
</ul>
<h3 id="（二）内容"><a href="#（二）内容" class="headerlink" title="（二）内容"></a>（二）内容</h3><ul>
<li>数据库中大部分和Mysql一样，但是没有约束和主外键</li>
</ul>
<h3 id="（三）hive安装配置"><a href="#（三）hive安装配置" class="headerlink" title="（三）hive安装配置"></a>（三）hive安装配置</h3><ol>
<li><p>安装好hadoop</p>
</li>
<li><p>安装好mysql数据库，版本要对好，<strong>下面提前改好</strong></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">character-set-server=latin1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><a class="link"   href="https://github.com/Sabthever/Pictures1/blob/main/Download_Resources/%E5%A4%A7%E6%95%B0%E6%8D%AEhive(%E5%8D%B7%E5%9B%9B).doc" >安装hive<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，把hive-1.1.0-cdh5.14.2.tar.gz放入&#x2F;opt</p>
</li>
<li><p>解压移动编辑配置</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxf hive-1.1.0-cdh5.14.2.tar.gz</span><br><span class="line"><span class="built_in">mv</span> hive-1.1.0-cdh5.14.2 soft/hive110</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line">填入</span><br><span class="line"><span class="comment">#Hive Env</span></span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/opt/soft/hive110</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/soft/hive110/conf</span><br><span class="line">vim hive-site.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>vim hive-site.xml</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">填入</span><br><span class="line"># 第一个目录是自己改的</span><br><span class="line"># 第二个true为本地，false为其他IP</span><br><span class="line"># 下面的ip要相应改</span><br><span class="line"># 最下面密码别忘了</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.local<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.authentication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>NONE<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.client.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.client.password<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>上传一个mysql驱动包到hive110下的lib</p>
<p>驱动包是mysql-connector-java-5.1.38.jar，在maven下面的库中</p>
</li>
<li><p>jps确保五个服务都是启动状态，没有的话stop-all.sh;start-all.sh</p>
</li>
<li><p>启动hive服务（只能黑界面）</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hive --service metastore</span><br></pre></td></tr></table></figure></div>

<p><strong>启动后独占窗口，不能关闭</strong></p>
<p>jps多了RunJar</p>
<p>后台启动：<code>nohup hive --service metastore &amp;</code>两下回车，但没有返回值</p>
</li>
<li><p>再开一个新窗口，启动hive远程服务</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hive --service hiveserver2</span><br></pre></td></tr></table></figure></div>

<p><strong>启动后独占窗口，不能关闭</strong></p>
<p>jps多了RunJar</p>
<p>后台启动：<code>nohup hive --service hiveserver2 &amp;</code>但没有返回值</p>
</li>
<li><p>要使用再开窗口</p>
</li>
<li><p>hive命令直接进入数据库</p>
</li>
<li><p>创建数据表的时候可能会错，<code>MySQLSyntaxErrorException: Column length too big for column &#39;PARAM_VALUE&#39;</code></p>
<ul>
<li><p>退出后进入mysql -uroot -pok</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database hive character set latin1;</span><br><span class="line">flush privileges;</span><br><span class="line">show variables like &#x27;char%&#x27;; -- 这句可以查看编码</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
<ul>
<li><p>解释</p>
<p>要是会有扫描数据找不到</p>
<p>就执行初始化<code>schematool -dbType mysql -initSchema</code></p>
</li>
<li><p><strong>数据库元数据初始化命令：</strong><code>schematool -dbType derby -initSchema</code></p>
</li>
</ul>
<h3 id="（四）zeppelin安装配置"><a href="#（四）zeppelin安装配置" class="headerlink" title="（四）zeppelin安装配置"></a>（四）<a class="link"   href="https://github.com/Sabthever/Pictures1/blob/main/Download_Resources/zepplin%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.docx" >zeppelin安装配置<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h3><ul>
<li>zeppelin时远程使用hive映射数据库的</li>
</ul>
<ol>
<li><p>zeppelin-0.8.1-bin-all.tgz放到&#x2F;opt下</p>
</li>
<li><p>解压</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxf zeppelin-0.8.1-bin-all.tgz;</span><br><span class="line"><span class="built_in">mv</span> zeppelin-0.8.1-bin-all soft/zeppelin081;</span><br><span class="line"><span class="built_in">cd</span> soft/zeppelin081/conf/;</span><br><span class="line"><span class="built_in">cp</span> zeppelin-site.xml.template zeppelin-site.xml</span><br><span class="line"><span class="built_in">cp</span> zeppelin-env.sh.template zeppelin-env.sh</span><br></pre></td></tr></table></figure></div>

<p>vim zeppelin-site.xml，加一个</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>zeppelin.helium.registry<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>helium<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>vim zeppelin-env.sh</p>
<p>这里面还能改内存、核</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/soft/jdk180</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/opt/soft/hadoop260/etc/hadoop</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /opt/soft/hive110/conf/hive-site.xml /opt/soft/zeppelin081/conf/</span><br><span class="line"><span class="built_in">cp</span> /opt/soft/hadoop260/share/hadoop/common/hadoop-common-2.6.0-cdh5.14.2.jar /opt/soft/zeppelin081/interpreter/jdbc/</span><br><span class="line"><span class="built_in">cp</span> /opt/soft/hive110/lib/hive-jdbc-1.1.0-cdh5.14.2-standalone.jar /opt/soft/zeppelin081/interpreter/jdbc/</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>上传包java-json.jar</p>
<p>把这个包放到<code>/opt/soft/zeppelin081/lib</code>中</p>
</li>
<li><p>配置环境变量</p>
<p>vim &#x2F;etc&#x2F;profile加入</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Zepplin Env</span></span><br><span class="line"><span class="built_in">export</span> ZEPPELIN_HOME=/opt/soft/zeppelin081</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZEPPELIN_HOME</span>/bin</span><br></pre></td></tr></table></figure></div>

<p>source &#x2F;etc&#x2F;profile</p>
</li>
<li><p>结束</p>
<p>启动方法<code>zeppelin-daemon.sh start</code>，在这之前要重启hive</p>
</li>
</ol>
<h3 id="（五）使用"><a href="#（五）使用" class="headerlink" title="（五）使用"></a>（五）使用</h3><h4 id="1-第一次使用"><a href="#1-第一次使用" class="headerlink" title="1.第一次使用"></a>1.第一次使用</h4><ul>
<li>黑界面直接hive进入数据库</li>
</ul>
<ol>
<li>创建</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database mydemo;</span><br><span class="line">use mydemo;</span><br><span class="line">create table userinfos(userid int,username string,birthday string);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>创建数据表的时候可能会错，<code>MySQLSyntaxErrorException: Column length too big for column &#39;PARAM_VALUE&#39;</code></p>
<ul>
<li>退出后进入mysql -uroot -pok</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database hive character set latin1;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<ol start="2">
<li><p>插入数据</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into userinfos values(1,&#x27;zs&#x27;,&#x27;1999-10-12&#x27;),(2,&#x27;ls&#x27;,&#x27;2000-10-12&#x27;);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>速度很慢，因为用了mapreduce的mapper</li>
</ul>
</li>
<li><p>读数据</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from userinfos;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>速度很快，没有mapreduce</li>
<li><strong>但是用聚合或者统计就会使用mapreduce</strong>，速度特别慢</li>
</ul>
</li>
<li><p>在hdfs下&#x2F;hive&#x2F;warehouse&#x2F;mydemo&#x2F;userinfos下有相应数据</p>
<p>这个路径是配置hive的时候自己的路径</p>
</li>
</ol>
<h4 id="2-远程连接和使用"><a href="#2-远程连接和使用" class="headerlink" title="2.远程连接和使用"></a>2.远程连接和使用</h4><ol>
<li><p><strong>第三方软件连接测试</strong></p>
<p>远程执行命令要开着</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hive --service hiveserver2</span><br></pre></td></tr></table></figure></div>

<p>在命令行下beeline</p>
<p>是自己改的hive配置的密码，再输入密码</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">!connect jdbc:hive2://192.168.179.139:10000</span><br></pre></td></tr></table></figure></div>

<p>退出时<code>!q</code></p>
</li>
<li><p>zeppelin安装好</p>
</li>
<li><p>启动zeppelin，在这之前要启动hive</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">zeppelin-daemon.sh start</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>远程连接</p>
<p>浏览器访问<a class="link"   href="http://ip:8080/" >http://ip:8080/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>使用下面是</p>
</li>
<li><p>界面右上角anonymous-&gt;Interpreter</p>
<p>create一个新的集成环境叫hive，用的是jdbc</p>
<p>在配置中配置</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">default.driver   org.apache.hive.jdbc.HiveDriver</span><br><span class="line">default.url     jdbc:hive2://192.168.42.200:10000</span><br><span class="line">default.user    root</span><br></pre></td></tr></table></figure></div>

<p>相应位置要输入密码</p>
<p>点击保存</p>
</li>
<li><p>点击上面的Noteboook-&gt;create new note</p>
<p>notename随便这边firsthive</p>
<p>默认的<strong>数据仓库</strong>(不是数据库)选hive</p>
</li>
<li><p>进入后就可以用sql语句了</p>
<p>但是这边不能使用<code>;</code>,每一句只能单行，如果要查某个数据库中的数据，就要如下<code>select * from mydemo.userinfos</code></p>
</li>
<li><p>除此之外</p>
<p>用%sh还可以指定使用的解释器</p>
</li>
</ol>
<h4 id="3-DataGrip远程连接"><a href="#3-DataGrip远程连接" class="headerlink" title="3.DataGrip远程连接"></a>3.DataGrip远程连接</h4><ol>
<li>开启hadoop和hive</li>
</ol>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br><span class="line"><span class="built_in">nohup</span> hive --service metastore &amp;</span><br><span class="line"><span class="built_in">nohup</span> hive --service hiveserver2 &amp;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>配置datagriphive数据库</li>
<li>记得改驱动可以在hive下的lib找形如<code>hive-jdbc-1.1.0-cdh5.14.2-standalone.jar</code>要对应相应的版本</li>
</ol>
<h3 id="（六）详细学习"><a href="#（六）详细学习" class="headerlink" title="（六）详细学习"></a>（六）详细学习</h3><ul>
<li>函数没转过去会出空</li>
</ul>
<h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/28.png"
                      style="zoom:67%;" 
                >

<ul>
<li><p>string类型用的最多，数仓尽量用string</p>
</li>
<li><p>数据清洗就要转化为其他类型</p>
</li>
<li><p>比mysql中多了<strong>复杂类型数据</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/29.png"
                      style="zoom:80%;" 
                >

<ul>
<li>struct相当于一个对象</li>
</ul>
</li>
</ul>
<h4 id="2-Hive数据结构"><a href="#2-Hive数据结构" class="headerlink" title="2.Hive数据结构"></a>2.Hive数据结构</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/30.png"
                      style="zoom:80%;" 
                ></li>
<li>partition分区为了方便找数据</li>
<li>buckets在抽样过程中</li>
</ul>
<h4 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3.数据库操作"></a>3.数据库操作</h4><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/31.png"
                     
                ></li>
<li>cascade是关联删除，会把依赖于主键的全删了</li>
</ul>
<h4 id="4-表操作"><a href="#4-表操作" class="headerlink" title="4.表操作"></a>4.<strong>表操作</strong></h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/33.png"
                     
                ></p>
</li>
<li><p>默认的分隔符是SOH即为<code>\001</code></p>
</li>
<li><p>regexp_replace相当于replace</p>
</li>
<li><p>还有temporary临时表，会话结束就没了</p>
</li>
<li><p>nvl()判断第一个表达式是否为null，<code>nvl(判断,否的话执行这条)</code></p>
</li>
<li><p>insert into追加</p>
<p>insert overwrite覆盖</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/52.png"
                     
                ></p>
<p>用这种方式就默认都是SOH</p>
</li>
<li><h3 id="创建内部表"><a href="#创建内部表" class="headerlink" title="创建内部表"></a>创建<strong>内部表</strong></h3><p>十分危险，删除表会<strong>连带着hdfs内部的数据全部删除</strong>，而非只删除元数据</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建一个内部表</span></span><br><span class="line"><span class="keyword">create table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student(</span><br><span class="line">id <span class="type">int</span>, name string</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 设置分隔符，默认SOH</span></span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line"><span class="comment">-- 设置存储格式 除了textfile，ORC和Parquet是两个广泛使用的</span></span><br><span class="line">stored <span class="keyword">as</span> textfile</span><br><span class="line"><span class="comment">-- 设置存储位置 这个是可以自己定义的</span></span><br><span class="line">location<span class="string">&#x27;/home/hadoop/hive/warehouse/student&#x27;</span></span><br><span class="line"><span class="comment">--查询表的类型</span></span><br><span class="line"><span class="keyword">desc</span> formatted student;</span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="创建外部表"><a href="#创建外部表" class="headerlink" title="创建外部表"></a>创建<strong>外部表</strong></h3><p><strong>只删元数据，不删数据本体</strong></p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student(</span><br><span class="line">	id <span class="type">int</span>, name string</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="复杂类型分割"><a href="#复杂类型分割" class="headerlink" title="复杂类型分割"></a>复杂类型分割</h3><div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> mydemo.students(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    likes <span class="keyword">array</span><span class="operator">&lt;</span>string<span class="operator">&gt;</span></span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span></span><br><span class="line">tblproperties(&quot;skip.header.line.count&quot;<span class="operator">=</span>&quot;1&quot;) <span class="comment">-- 跳过多少行</span></span><br><span class="line">location <span class="string">&#x27;/towers/students&#x27;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,zs,20,豆浆:油条:烤鱼:烤鸭</span><br><span class="line">1,ls,21,包子:水煮面</span><br></pre></td></tr></table></figure></div>

<p>结果</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/34.png"
                      style="zoom:80%;" 
                >
</li>
<li><p>数据采集</p>
<p>就是数据放到hdfs，创建外部表做映射</p>
</li>
<li><h3 id="高阶建表语句"><a href="#高阶建表语句" class="headerlink" title="高阶建表语句"></a><strong>高阶建表语句</strong></h3><ul>
<li><p>这样建立的表是<strong>内部表</strong></p>
<p>而且底层数据复制了一份放在了默认的路径中</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> mydemo.friends1 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mydemo.friends</span><br></pre></td></tr></table></figure></div>

<p><strong>用途</strong>：新建底层数据，在上面的select语句中加上where等，用于过滤数据。实际上数据仓库中就建立多层数据，映射、加工、服务一层一层的来过滤数据，需要很多中间表，就是上的的方法。</p>
</li>
<li><p>还可以这样子，就不会有数据 <em><strong>like</strong></em></p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> mydemo.friends2 <span class="keyword">like</span> mydemo.friends</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><h3 id="创建临时表"><a href="#创建临时表" class="headerlink" title="创建临时表"></a>创建临时表</h3></li>
<li><p>删除表</p>
<ul>
<li>删掉整个</li>
</ul>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> mydemo.friends</span><br></pre></td></tr></table></figure></div>

<p>​	不能用delete，因为照道理原始数据是不能改的</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/37.png"
                      alt="image-20240713145515802" style="zoom:67%;" 
                >


</li>
<li><h3 id="数据表分割问题"><a href="#数据表分割问题" class="headerlink" title="数据表分割问题"></a>数据表分割问题</h3><ol>
<li><p>朋友表，用excel出来的元数据如</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,张三,&quot;赵六,宋七&quot;</span><br><span class="line">2,李四,&quot;胡三,李儒&quot;</span><br><span class="line">3,王五,&quot;铃兰,张无忌,赵敏&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>用下面的语句会出错</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> mydemo.friends(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    friends string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">location <span class="string">&#x27;/towers/friends&#x27;</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/35.png"
                      style="zoom:67%;" 
                >
</li>
<li><p>这时候就有一个东西叫做：解析器</p>
</li>
</ol>
</li>
</ul>
<h4 id="5-解析器serde"><a href="#5-解析器serde" class="headerlink" title="5.解析器serde"></a>5.<strong>解析器</strong>serde</h4><ul>
<li><p>先解决4中的最后一个问题</p>
<p>如下就没问题了</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> mydemo.friends(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    friends string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format serde <span class="string">&#x27;org.apache.hadoop.hive.serde2.OpenCSVSerde&#x27;</span></span><br><span class="line"><span class="keyword">with</span> serdeproperties(</span><br><span class="line">    &quot;separatorChar&quot;<span class="operator">=</span>&quot;,&quot;,</span><br><span class="line">    &quot;quoteChar&quot;<span class="operator">=</span>&quot;\&quot;&quot;,</span><br><span class="line">    &quot;escapeChar&quot;=&quot;\\&quot;</span><br><span class="line">)</span><br><span class="line">-- row format delimited fields terminated by &#x27;,&#x27;</span><br><span class="line">location &#x27;/towers/friends&#x27;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/36.png"
                      alt="image-20240713142213770" style="zoom:67%;" 
                >

<ol>
<li><code>&quot;separatorChar&quot;=&quot;,&quot;</code>：这个属性指定了字段之间的分隔符。在这个例子中，分隔符被设置为逗号（<code>,</code>），这是CSV文件中最常见的分隔符。</li>
<li><code>&quot;quoteChar&quot;=&quot;\&quot;&quot;</code>：这个属性指定了用于包围字段值的字符，当字段值中包含分隔符、引号字符或换行符时，通常会用这些引号字符将字段值包围起来。在这个例子中，引号字符被设置为双引号（<code>&quot;</code>）。</li>
<li><code>&quot;escapeChar&quot;=&quot;\\&quot;</code>：这个属性指定了用于转义引号字符内的特殊字符的转义字符。然而，在CSV的上下文中，这个属性的具体行为可能会因实现而异，因为CSV标准本身并没有明确定义转义字符的使用。在<code>OpenCSVSerde</code>中，这个属性可能用于处理引号字符内部的引号字符（例如，通过前置一个反斜杠来转义引号），但这取决于<code>OpenCSVSerde</code>的具体实现和配置。然而，需要注意的是，在提供的例子中，转义字符被设置为反斜杠（<code>\</code>），但字符串值中的反斜杠自身需要被转义（即写成<code>\\</code>），这在许多编程语言中都是必要的，以确保反斜杠被正确地解析为字符串中的一个字符，而不是作为转义字符的开始。</li>
</ol>
</li>
</ul>
<h4 id="6-内部结构"><a href="#6-内部结构" class="headerlink" title="6.内部结构"></a>6.内部结构</h4><ul>
<li><p><strong>直接</strong>把<strong>相应格式</strong>的文件放到dfs中的相应目录中，就可以直接读取</p>
<p>因此可以在命令终端直接put</p>
</li>
</ul>
<h4 id="7-数据表上锁"><a href="#7-数据表上锁" class="headerlink" title="7.数据表上锁"></a>7.数据表上锁</h4><ul>
<li><p>当做删除等操作的时候一直运行没响应</p>
<p>把字符集改为latin1</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">character-set-server=latin1</span><br><span class="line"></span><br><span class="line">重启服务service mysqld restart</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>关闭zeppelin和hive</p>
</li>
<li><p>重启hive</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/32.png"
                      style="zoom:67%;" 
                ></li>
</ul>
<h4 id="8-装载数据LOAD"><a href="#8-装载数据LOAD" class="headerlink" title="8.装载数据LOAD"></a>8.装载数据LOAD</h4><ul>
<li><p>也可以在hdfs dfs -put来导入</p>
</li>
<li><p>LOAD用于在Hive中移动数据</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/38.png"
                      alt="image-20240713145729473" style="zoom:80%;" 
                >

<ul>
<li>LOCAL:指定文件位于本地文件系统，执行后为拷贝数据</li>
<li>OVERWRITE:表示覆盖表中现有数据</li>
</ul>
</li>
<li><p>示例</p>
<ul>
<li><p>把linux上的数据文件加载到mydemo.students的数据表</p>
<p><strong>如果没有overwrite，就相当于是追加</strong></p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/testdata/t.txt&#x27;</span></span><br><span class="line">overwrite <span class="keyword">into</span> <span class="keyword">table</span> mydemo.students</span><br><span class="line"><span class="comment">-- select * from mydemo.students</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h4 id="9-Hive分区（Partition）"><a href="#9-Hive分区（Partition）" class="headerlink" title="9.Hive分区（Partition）"></a>9.Hive分区（Partition）</h4><h5 id="A-介绍"><a href="#A-介绍" class="headerlink" title="A.介绍"></a>A.介绍</h5><ul>
<li><p>分区主要用于提高性能</p>
<ul>
<li>分区列的值将表划分为一个个的文件夹</li>
<li>查询时语法使用”分区”列和常规列类似</li>
<li>查询时Hive会只从指定分区查询数据，提高查询效率</li>
</ul>
</li>
<li><p>分为静态分区和动态分区</p>
<ul>
<li>两者的建表过程是相同的</li>
<li>静态分区：先添加分区（建立文件夹），用户传递</li>
<li>动态分区：更具数据来判断，只有sql执行时才会确定。动态分区个数也是可调的，一般是100个。很多时候扛不住，还是要静态分区，增量计算分区，每天一点往里塞</li>
</ul>
</li>
<li><p>比如销售的订单到部分按季度查，就按季度。决定粒度，取决于查询结果</p>
</li>
<li><p>分区表一般都是内部表</p>
</li>
<li><p><strong>静态分区</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/39.png"
                      style="zoom:67%;" 
                >
</li>
<li><p><strong>动态分区</strong></p>
<p>先塞数据进去，然后自动分区</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/42.png"
                      style="zoom:67%;" 
                ></li>
</ul>
<h5 id="B-静态例子1"><a href="#B-静态例子1" class="headerlink" title="B.静态例子1"></a>B.静态例子1</h5><ul>
<li><p>吊塔运行记录每天的数据</p>
</li>
<li><p>按天来进行最小粒度的划分</p>
</li>
<li><p>先进行数据的仿真模拟</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTowerLog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 799 10*60*60</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        cal.set(<span class="number">2024</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">// 准备五年间加名字20240101</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dirName</span> <span class="operator">=</span> sdf.format(cal.getTime());</span><br><span class="line">        <span class="comment">// 生成800个塔吊文件 塔吊编号+日期 zt0001_20240101.log</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;e:/Temp/towerdata/curr/&quot;</span> + dirName;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">            <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">                file.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(path + <span class="string">&quot;/&quot;</span> + towerLogFileName(i)</span><br><span class="line">                    + <span class="string">&quot;_&quot;</span> + dirName + <span class="string">&quot;.log&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> time=<span class="number">0</span>;time &lt;<span class="number">10</span>*<span class="number">60</span>*<span class="number">60</span>;time++)&#123;</span><br><span class="line">                <span class="comment">// 时间向前加</span></span><br><span class="line">                cal.add(Calendar.SECOND, <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 写日志字符串 日期时间中间加个T</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">logStr</span> <span class="operator">=</span> towerLogFileName(i) + <span class="string">&quot; &quot;</span></span><br><span class="line">                        + sdf1.format(cal.getTime()).replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;T&quot;</span>) + <span class="string">&quot; &quot;</span> </span><br><span class="line">                        + rand.nextInt(<span class="number">12</span>) + <span class="string">&quot; &quot;</span></span><br><span class="line">                        + rand.nextInt(<span class="number">10</span>) + <span class="string">&quot; &quot;</span></span><br><span class="line">                        + rand.nextInt(<span class="number">15</span>) + <span class="string">&quot; &quot;</span></span><br><span class="line">                        + rand.nextInt(<span class="number">5</span>) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                        raf.write(logStr.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            raf.write(<span class="string">&quot;hehe&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            raf.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">towerLogFileName</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;zk&quot;</span> + String.format(<span class="string">&quot;%04d&quot;</span>, no);</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>数据文件夹如下</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/40.png"
                      style="zoom:80%;" 
                >

<p>数据形如</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">zk0000 2024-01-01T08:00:01 6 1 5 4</span><br><span class="line">zk0000 2024-01-01T08:00:02 3 8 2 2</span><br><span class="line">zk0000 2024-01-01T08:00:03 5 0 1 4</span><br><span class="line">zk0000 2024-01-01T08:00:04 3 3 2 2</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建分区表</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> mydemo.towerdatas(</span><br><span class="line">    id string,</span><br><span class="line">    ts string,</span><br><span class="line">    weight string,</span><br><span class="line">    speed string,</span><br><span class="line">    <span class="keyword">range</span> string,</span><br><span class="line">    angle string</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span>  (ymd string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建静态分区</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line"><span class="keyword">alter table</span> mydemo.towerdatas <span class="keyword">add</span> <span class="keyword">partition</span>(ymd<span class="operator">=</span><span class="string">&#x27;20240101&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>载入数据</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/testdata/20240101/&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> mydemo.towerdatas <span class="keyword">partition</span>(ymd<span class="operator">=</span><span class="string">&#x27;20240101&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>最终结果</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/41.png"
                      style="zoom:80%;" 
                >
</li>
<li><p>实际中要用脚本每天把数据放入</p>
<p><code>hive -e &quot;命令&quot;</code>可以直接运行，当然也可以<code>echo &quot;命令&quot; | hive</code>这样来运行</p>
<p>远程脚本可以如下，这个脚本要在能够ssh免密登录的时候才可以这样做</p>
<ul>
<li><p>实际要做的步骤</p>
<ol>
<li>将日志服务器上的数据传递给hadoop集群</li>
<li>在hive上的某个分区表上添加分区</li>
<li>将本地接到的数据加载到这个分区中</li>
<li>删除本地数据</li>
<li>每天都要做(crontab定时任务)</li>
</ol>
</li>
<li><p>脚本示例</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取当天日期，按照实际要是前一天，而不是当天的</span></span><br><span class="line">foldername=`<span class="built_in">date</span> +<span class="string">&quot;%Y%m%d&quot;</span>`</span><br><span class="line">scp -r /opt/data/<span class="variable">$foldername</span> root@192.168.179.139:/opt/towerdata/</span><br><span class="line"><span class="comment"># 在hive的towerdatas表中建立昨日分区</span></span><br><span class="line">CREATEPARTITIONSTR=<span class="string">&quot;alter table mydemo.towerdatas add partition(ymd=&#x27;<span class="variable">$&#123;foldername&#125;</span>&#x27;);&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hive -e \&quot;<span class="variable">$CREATEPARTITIONSTR</span>\&quot;&quot;</span> | ssh root@192.168.179.139</span><br><span class="line"><span class="comment"># 将本地数据导入昨日分区</span></span><br><span class="line">IMORTDATASTR=<span class="string">&quot;load data local inpath &#x27;/opt/towerdata/<span class="variable">$foldername</span>&#x27; into table mydemo.towerdatas partition(ymd=&#x27;<span class="variable">$foldername</span>&#x27;)&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hive -e \&quot;<span class="variable">$IMORTDATASTR</span>\&quot;&quot;</span> | ssh root@192.168.179.139</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将linux上的数据删除</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rm -rf /opt/towerdata/<span class="variable">$foldername</span>/&quot;</span> | ssh root@192.168.179.139</span><br><span class="line"><span class="comment"># 删除半年前的数据分区</span></span><br><span class="line">foldername=`<span class="built_in">date</span> -d <span class="string">&quot;-196 day&quot;</span> <span class="string">&#x27;+%Y%m%d&#x27;</span>`</span><br><span class="line">DROPPARTITIONSTR=<span class="string">&quot;alter table mydemo.towerdatas drop partition(ymd=<span class="variable">$foldername</span>)&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hive -e \&quot;<span class="variable">$DROPPARTITIONSTR</span>\&quot;&quot;</span> | ssh root@192.168.179.139</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>crontab设置定时任务</p>
<p><code>crontab -e</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.cron</span></span><br><span class="line">1 * * * * <span class="built_in">source</span> ~/example.sh</span><br><span class="line"><span class="comment"># 每一分钟执行一次</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h5 id="C-动态例子1"><a href="#C-动态例子1" class="headerlink" title="C.动态例子1"></a>C.动态例子1</h5><ul>
<li><p>过程</p>
<ol>
<li>将一堆数据导入hdfs</li>
<li>在hadoop上使用归档把所有数据压缩到一个文件中</li>
<li>在hive建立一个临时的表并存储数据</li>
<li>将临时表的数据通过insert语句动态存放到分区表中</li>
</ol>
</li>
<li><p>数据仿真</p>
<p>很多很多天的数据以单条目生成，小改了一下</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成300天数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> day=<span class="number">0</span>;day&lt;<span class="number">300</span>;day++) &#123;</span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    cal.set(<span class="number">2024</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cal.add(Calendar.DATE, day);</span><br><span class="line">    <span class="comment">// 准备五年间加名字20240101</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">dirName</span> <span class="operator">=</span> sdf.format(cal.getTime());</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>过程</p>
<ol>
<li><p>在hadoop建立一个临时文件夹并上传所有数据到临时文件夹</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">mkdir</span> /datatmp</span><br><span class="line">hdfs dfs -put /opt/towerdata /datatmp</span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> /dataarchive <span class="comment"># 执行一次就够了</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>由于小文件过多所以使用hadoop将众多的小文件进行归档</p>
<p><code>hadoop archive -archiveName data1.har -p /datatmp/towerdata /dataarchive</code></p>
</li>
<li><p>查看归档文件信息</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">cat</span> /dataarchive/data1.har/part-0</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在数据仓库中创建一个<strong>临时表</strong></p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> temporary <span class="keyword">table</span> mydemo.temps(</span><br><span class="line">    id string,</span><br><span class="line">    ts string,</span><br><span class="line">    weight string,</span><br><span class="line">    speed string,</span><br><span class="line">    <span class="keyword">range</span> string,</span><br><span class="line">    angle string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">location <span class="string">&#x27;/dataarchive/data1.har&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将临时表的数据使用insert语句导入到分区表中</p>
<p>导入过程不一定吃得消，要么就脚本分段导入要么调整hadoop参数，网上找好，包括线程数，内存数</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">hdfs-site.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--datanode上负责进行文件操作的线程数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.max.transfer.threads<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>32768<span class="tag">&lt;/<span class="name">value</span>&gt;</span> 改大小默认4096</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启动态分区</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition<span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition.mode<span class="operator">=</span>nonstrict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> mydemo.towerdatas <span class="keyword">partition</span>(ymd) <span class="keyword">select</span> t.<span class="operator">*</span>,regexp_replace(<span class="built_in">substring</span>(t.ts,<span class="number">0</span>,<span class="number">10</span>),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) ymd <span class="keyword">from</span> mydemo.temps t</span><br><span class="line">改为，</span><br><span class="line"><span class="keyword">insert into</span> mydemo.towerdatas <span class="keyword">partition</span>(ymd)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> t.<span class="operator">*</span>,regexp_replace(<span class="built_in">substring</span>(t.ts,<span class="number">0</span>,<span class="number">10</span>),<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>) ymd <span class="keyword">from</span> mydemo.temps t) f <span class="keyword">where</span> f.ymd <span class="keyword">like</span> <span class="string">&#x27;2024012%&#x27;</span></span><br><span class="line">要性能调优</span><br></pre></td></tr></table></figure></div>

<ul>
<li>写快出问题了，调整文件句柄数，提高线程数，同时不让超过内存</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="10-分桶"><a href="#10-分桶" class="headerlink" title="10.分桶"></a>10.分桶</h4><h5 id="A-知识点"><a href="#A-知识点" class="headerlink" title="A.知识点"></a>A.知识点</h5><ul>
<li><p>Bucket</p>
</li>
<li><p>分桶对应于HDFS中的文件</p>
<ul>
<li>更高的查询处理效率</li>
<li>使抽样（sampling）更高效</li>
<li>一般根据”桶列”的哈希函数将数据进行分桶</li>
</ul>
</li>
<li><p>分桶只有动态分桶</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> hive.enforce.bucketing <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>定义分桶</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">CLUSTERED <span class="keyword">BY</span> (employee_id) <span class="keyword">INTO</span> <span class="number">2</span> BUCKETS</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>必须使用INSERT方式加载数据</p>
</li>
<li><p><strong>分桶抽样</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/43.png"
                      style="zoom:67%;" 
                >

<ul>
<li><p>第一句话，第一个3是从哪个桶开始抽取。32可大于可小于桶数，代表取<code>桶数/32</code>个桶的数据</p>
</li>
<li><p>rand()为随机采样，rand(num)为伪随机</p>
</li>
<li><p>除此之外，可以</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mydemo.mybucket <span class="keyword">tablesample</span>(<span class="number">40</span> <span class="keyword">percent</span>) <span class="comment">-- 百分比采样</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mydemo.mybucket <span class="keyword">tablesample</span>(<span class="number">20</span>B) <span class="comment">-- 字节采样</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mydemo.mybucket <span class="keyword">tablesample</span>(<span class="number">4</span> <span class="keyword">rows</span>) <span class="comment">-- 按行采样</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h5 id="B-例子1jp"><a href="#B-例子1jp" class="headerlink" title="B.例子1jp"></a>B.例子1jp</h5><ol>
<li><p>开启分桶功能</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.enforce.bucketing<span class="operator">=</span><span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置reduce个数和桶的数量一致</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> mapreduce.job.reduces<span class="operator">=</span><span class="number">4</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建1个分桶表</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> mydemo.mybucket(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name string,</span><br><span class="line">    gender string,</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">)</span><br><span class="line">clustered <span class="keyword">by</span> (id) <span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line">stored <span class="keyword">as</span> textfile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>插入数据</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> mydemo.mybucket <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),(<span class="number">2</span>,<span class="string">&#x27;ls&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),(<span class="number">3</span>,<span class="string">&#x27;ww&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),(<span class="number">4</span>,<span class="string">&#x27;zl&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),(<span class="number">5</span>,<span class="string">&#x27;sq&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),(<span class="number">6</span>,<span class="string">&#x27;wb&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),(<span class="number">7</span>,<span class="string">&#x27;cq&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;es&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),(<span class="number">9</span>,<span class="string">&#x27;io&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>),(<span class="number">10</span>,<span class="string">&#x27;zw&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>结果</p>
<p>四个小文件，四个reduce，分区是多文件夹</p>
<p>第一个中</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">8es男20</span><br><span class="line">4zl男20</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>数据采样</p>
<ul>
<li><p>拿了1、3桶的所有数据</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mydemo.mybucket <span class="keyword">tablesample</span>(bucket <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">2</span>) s</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>拿1桶所有</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mydemo.mybucket <span class="keyword">tablesample</span>(bucket <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">4</span>) s</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>拿半个桶的</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from mydemo.mybucket tablesample(bucket 1 out of 8) s</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
<h4 id="11-分区和分桶的不同"><a href="#11-分区和分桶的不同" class="headerlink" title="11.分区和分桶的不同"></a>11.分区和分桶的不同</h4><ul>
<li>分区是表的部分列的集合，可以为频繁使用的数据建立分区，这样查找分区中的数据时就不需要扫描全表，这对于提高查找效率很有帮助</li>
<li>不同于分区对列直接进行拆分，桶往往使用列的哈希值对数据打散，并分发到各个不同的桶中从而完成数据的分桶过程</li>
<li>分区和分桶最大的区别就是分桶随机分割数据库，分区是非随机分割数据库</li>
<li>分区在底层是一个个文件夹，分桶是一个个文件</li>
</ul>
<h4 id="12-Hive视图-View"><a href="#12-Hive视图-View" class="headerlink" title="12.Hive视图(View)"></a>12.Hive视图(View)</h4><h5 id="A-介绍-1"><a href="#A-介绍-1" class="headerlink" title="A.介绍"></a>A.介绍</h5><ul>
<li><p>视图概述</p>
<ul>
<li>通过隐藏子查询、连接和函数来简化查询的逻辑结构</li>
<li>只保存定义，不存储数据</li>
<li>如果删除或更改基础表，则查询视图将失败</li>
<li>视图是只读的，不能插入或装载数据</li>
</ul>
</li>
<li><p>应用场景</p>
<ul>
<li>将特定的列提供给用户，保护数据隐私</li>
<li>用于查询语句复杂的场景</li>
</ul>
</li>
<li><p><strong>Hive侧视图</strong>（Lateral View）</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/44.png"
                      style="zoom:67%;" 
                >
</li>
<li><p>举例</p>
<ul>
<li><p>最早左边，分为右边，最后变成</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> lineno,ctx,split(ctx,<span class="string">&#x27; &#x27;</span>) ctxarr <span class="keyword">from</span> mydemo.article</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/45.png"
                      style="zoom:80%;" 
                >
</li>
<li><p>这样子就最终</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/46.png"
                      style="zoom:80%;" 
                >
</li>
<li><p>但是不知道是属于哪个，因此可以用视图</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> lineno,ctx, word <span class="keyword">from</span> mydemo.article <span class="keyword">lateral</span> <span class="keyword">view</span> explode(split(ctx,<span class="string">&#x27; &#x27;</span>)) a <span class="keyword">as</span> word</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/47.png"
                     
                ></p>
</li>
<li><p>还可以带上排序</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> lineno,ctx,<span class="keyword">no</span>,word <span class="keyword">from</span> mydemo.article <span class="keyword">lateral</span> <span class="keyword">view</span> posexplode(split(ctx,<span class="string">&#x27; &#x27;</span>)) a <span class="keyword">as</span> <span class="keyword">no</span>,word</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/48.png"
                     
                ></p>
</li>
<li><p>&#x3D;&#x3D;explode炸开&#x3D;&#x3D;比较重要，<strong>一列值分割转行</strong>。和真正的<strong>列转行</strong>有区别，真正的列转行是多列转行，用的是<strong>多次查询后Union</strong></p>
</li>
</ul>
</li>
</ul>
<h4 id="13-Hive高级查询"><a href="#13-Hive高级查询" class="headerlink" title="13.Hive高级查询"></a>13.Hive高级查询</h4><h5 id="A-查询"><a href="#A-查询" class="headerlink" title="A.查询"></a>A.查询</h5><ul>
<li><p>基本和mysql相同，有个<em><strong>rlike</strong></em></p>
<p>rlike后面跟正则，形如<code>select * from mydemo.mybucket where name rlike &#39;z[a-z]*&#39;</code></p>
</li>
<li><p>CTE语法</p>
<p>with t1 as</p>
</li>
<li><p>join方式</p>
</li>
</ul>
<h5 id="B"><a href="#B" class="headerlink" title="B."></a>B.</h5><h5 id="c"><a href="#c" class="headerlink" title="c."></a>c.</h5><h4 id="14-一次练习"><a href="#14-一次练习" class="headerlink" title="14.一次练习"></a>14.一次练习</h4><ul>
<li>上课商店销售分析练习</li>
</ul>
<h5 id="A-商店销售分析练习1-DOS"><a href="#A-商店销售分析练习1-DOS" class="headerlink" title="A.商店销售分析练习1-DOS"></a>A.商店销售分析练习1-DOS</h5><ol>
<li><p>在hadoop上建立存储数据的文件夹 并上传文件到对应的文件夹</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">%sh</span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /storeanaly/customer</span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /storeanaly/store</span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /storeanaly/tran</span><br><span class="line">hdfs dfs -put /opt/testdata/jydata/customer_details.csv /storeanaly/customer</span><br><span class="line">hdfs dfs -put /opt/testdata/jydata/store_details.csv /storeanaly/store</span><br><span class="line">hdfs dfs -put /opt/testdata/jydata/transaction_details.csv /storeanaly/tran</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建映射原始文件的数据仓库ODS_SALE</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database ods_sale</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在近源层数据库中创建映射的数据表-ods_customer</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> ods_sale.ods_customer(</span><br><span class="line">    customer_id string,</span><br><span class="line">    first_name string,</span><br><span class="line">    last_name string,</span><br><span class="line">    email string,</span><br><span class="line">    gender string,</span><br><span class="line">    address string,</span><br><span class="line">    country string,</span><br><span class="line">    <span class="keyword">language</span> string,</span><br><span class="line">    job string,</span><br><span class="line">    credit_type string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format serde <span class="string">&#x27;org.apache.hadoop.hive.serde2.OpenCSVSerde&#x27;</span></span><br><span class="line"><span class="keyword">with</span> serdeproperties(</span><br><span class="line">    &quot;separatorChar&quot;<span class="operator">=</span>&quot;,&quot;,</span><br><span class="line">    &quot;quoteChar&quot;<span class="operator">=</span>&quot;\&quot;&quot;,</span><br><span class="line">    &quot;escapeChar&quot;=&quot;\\&quot;</span><br><span class="line">)</span><br><span class="line">location &#x27;/storeanaly/customer&#x27;</span><br><span class="line">tblproperties(&quot;skip.header.line.count&quot;=&quot;<span class="number">1</span>&quot;)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在近源层数据库中创建映射的数据表-ods_store</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> ods_sale.ods_store(</span><br><span class="line">    store_id string,</span><br><span class="line">    store_name string,</span><br><span class="line">    employee_number string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format serde <span class="string">&#x27;org.apache.hadoop.hive.serde2.OpenCSVSerde&#x27;</span></span><br><span class="line"><span class="keyword">with</span> serdeproperties(</span><br><span class="line">    &quot;separatorChar&quot;<span class="operator">=</span>&quot;,&quot;,</span><br><span class="line">    &quot;quoteChar&quot;<span class="operator">=</span>&quot;\&quot;&quot;,</span><br><span class="line">    &quot;escapeChar&quot;=&quot;\\&quot;</span><br><span class="line">)</span><br><span class="line">location &#x27;/storeanaly/store&#x27;</span><br><span class="line">tblproperties(&quot;skip.header.line.count&quot;=&quot;<span class="number">1</span>&quot;)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在近源层数据库中创建映射的数据表-ods_trans</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> ods_sale.ods_trans(</span><br><span class="line">    transaction_id string,</span><br><span class="line">    customer_id string,</span><br><span class="line">    store_id string,</span><br><span class="line">    price string,</span><br><span class="line">    product string,</span><br><span class="line">    trandate string,</span><br><span class="line">    trantime string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format serde <span class="string">&#x27;org.apache.hadoop.hive.serde2.OpenCSVSerde&#x27;</span></span><br><span class="line"><span class="keyword">with</span> serdeproperties(</span><br><span class="line">    &quot;separatorChar&quot;<span class="operator">=</span>&quot;,&quot;,</span><br><span class="line">    &quot;quoteChar&quot;<span class="operator">=</span>&quot;\&quot;&quot;,</span><br><span class="line">    &quot;escapeChar&quot;=&quot;\\&quot;</span><br><span class="line">)</span><br><span class="line">location &#x27;/storeanaly/tran&#x27;</span><br><span class="line">tblproperties(&quot;skip.header.line.count&quot;=&quot;<span class="number">1</span>&quot;)</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>对ods_customer进行数据探索工作</p>
<p>每一个表的逐条数据进行探索，格式对不对，有没有重复等等，并且要有一定的处理方法</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>hive</span><br><span class="line"><span class="comment">-- select count(1) from ods_sale.ods_customer -- 500</span></span><br><span class="line"><span class="comment">-- select count(customer_id) from ods_sale.ods_customer where trim(customer_id)!=&quot;&quot;</span></span><br><span class="line"><span class="comment">-- select count(distinct customer_id) from ods_sale.ods_customer</span></span><br><span class="line"><span class="comment">-- select count(1) from ods_sale.ods_customer where customer_id rlike &#x27;^[0-9]+$&#x27;</span></span><br><span class="line"><span class="comment">-- select count(*) from ods_sale.ods_customer where first_name is null or last_name is null or trim(first_name)=&#x27;&#x27; or trim(last_name)=&#x27;&#x27;</span></span><br><span class="line"><span class="comment">-- select concat(first_name,last_name) from ods_sale.ods_customer group by concat(first_name,last_name) having count(concat(first_name,last_name))&gt;1</span></span><br><span class="line"><span class="comment">-- select * from ods_sale.ods_customer where email is not null and trim(email)!=&#x27;&#x27; and email not rlike &#x27;^([0-9a-zA-Z]+@[0-9a-zA-Z]+(\\-[0-9a-zA-Z]+)?(\\.[0-9a-zA-Z]+)?\\.[0-9a-zA-Z]+)$&#x27;    -- 邮箱域名地址中可能存放在 - 字符 或者只有1个字符的情况</span></span><br><span class="line"><span class="comment">-- select gender from ods_sale.ods_customer group by gender</span></span><br><span class="line"><span class="comment">-- with t1 as(select country,count(1) from ods_sale.ods_customer group by country)</span></span><br><span class="line"><span class="comment">-- select * from t1 where country=&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---探索ods_store</span></span><br><span class="line"><span class="comment">-- select * from ods_sale.ods_store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 探索ods_sale.ods_trans</span></span><br><span class="line"><span class="comment">-- select count(*) from ods_sale.ods_trans  -- 8100</span></span><br><span class="line"><span class="comment">-- select count(transaction_id) from ods_sale.ods_trans where trim(transaction_id)!=&quot;&quot;</span></span><br><span class="line"><span class="comment">-- select count(distinct transaction_id) from ods_sale.ods_trans  -- 8000 有100行是重复的 修改订单编号 8004 8004_1</span></span><br><span class="line"><span class="comment">-- select transaction_id from ods_sale.ods_trans group by transaction_id having count(transaction_id)&gt;1</span></span><br><span class="line"><span class="comment">-- with t1 as(select distinct * from ods_sale.ods_trans) select count(1) from t1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- select count(t.customer_id) from ods_sale.ods_trans t inner join ods_sale.ods_customer c on t.customer_id=c.customer_id</span></span><br><span class="line"><span class="comment">-- select store_id from ods_sale.ods_trans group by store_id</span></span><br><span class="line"><span class="comment">-- select * from ods_sale.ods_trans where price not rlike &#x27;^[0-9]+(\.[0-9]&#123;1,&#125;)?$&#x27;</span></span><br><span class="line"><span class="comment">-- select * from ods_sale.ods_trans where trim(product)=&#x27;&#x27;</span></span><br><span class="line"><span class="comment">-- select * from ods_sale.ods_trans where trandate not rlike &#x27;^[1,2][0-9]&#123;3&#125;\-[0-9]&#123;1,2&#125;\-[0-9]&#123;1,2&#125;$&#x27;</span></span><br><span class="line"><span class="comment">-- select * from ods_sale.ods_trans where trantime not rlike &#x27;^[0-9]&#123;1,2&#125;:[0-9]&#123;1,2&#125;$&#x27;  -- 10:32 PM将此种数据转为24小时制 22：32</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h5 id="B-商店销售分析练习2-DWD"><a href="#B-商店销售分析练习2-DWD" class="headerlink" title="B.商店销售分析练习2-DWD"></a>B.商店销售分析练习2-DWD</h5><ol>
<li><p>创建数据明细层数据库dwd_sale</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database dwd_sale</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>根据ods的customer表导入dwd的customer</p>
<p><strong>这步其实是可以压缩的</strong></p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> dwd_sale.dwd_customer <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ods_sale.ods_customer</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>根据ods的store表导入dwd的store</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> dwd_sale.dwd_store <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ods_sale.ods_store</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>5 创建自定义事件处理函数</p>
<ul>
<li><p>跳到15那的Java示例1</p>
</li>
<li><p>上传jar包到hdfs</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /func</span><br><span class="line">hdfs dfs -put /opt/timefunc-1.0-SNAPSHOT.jar /func</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在hive上使用hdfs上的jar包创建永久函数</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> timehandler <span class="keyword">as</span> <span class="string">&#x27;com.njupt.timefunc.TimeChange&#x27;</span> <span class="keyword">using</span> jar <span class="string">&#x27;hdfs://192.168.179.139:9000/func/timefunc-1.0-SNAPSHOT.jar&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>如果jar包错了，要在idea中清理缓存File-invalidate caches</p>
<p>然后再hive中要先drop function，再重启zeppelin和hive</p>
<p>最后再来一遍</p>
</li>
</ul>
</li>
<li><p>创建自定义事件处理函数</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- create table dwd_sale.dwd_trans like ods_sale.ods_trans -- 执行一次</span></span><br><span class="line"><span class="keyword">with</span></span><br><span class="line">t2 <span class="keyword">as</span>(<span class="keyword">select</span> t.<span class="operator">*</span>,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> transaction_id <span class="keyword">order</span> <span class="keyword">by</span> customer_id) rank <span class="keyword">from</span> ods_sale.ods_trans t),</span><br><span class="line">t3 <span class="keyword">as</span>(<span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> rank<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> transaction_id <span class="keyword">else</span> concat(transaction_id,<span class="string">&#x27;_&#x27;</span>,rank) <span class="keyword">end</span> transaction_id,</span><br><span class="line">        customer_id,store_id,price,product,trandate,timehandler(trantime) <span class="keyword">as</span> trantime <span class="keyword">from</span> t2)</span><br><span class="line"><span class="keyword">insert into</span> dwd_sale.dwd_trans <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t3</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h5 id="C-商店销售分析练习3-DWS"><a href="#C-商店销售分析练习3-DWS" class="headerlink" title="C.商店销售分析练习3-DWS"></a>C.商店销售分析练习3-DWS</h5><ul>
<li>数据服务层，用于业务处理</li>
<li>这边没有什么要用的，直接导进来就好了</li>
</ul>
<ol>
<li><p>创建dws数据服务层数据</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database dws_sale</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将dwd中的表导入到dws层 构建数据模型 并做初步聚合工作</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> dws_sale.dws_customer <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dwd_sale.dwd_customer</span><br><span class="line"><span class="keyword">create table</span> dws_sale.dws_store <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dwd_sale.dwd_store</span><br><span class="line"><span class="keyword">create table</span> dws_sale.dws_trans <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dwd_sale.dwd_trans</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h5 id="D-商店销售分析练习3-ADS"><a href="#D-商店销售分析练习3-ADS" class="headerlink" title="D.商店销售分析练习3-ADS"></a>D.商店销售分析练习3-ADS</h5><ol>
<li><p>创建数据应用层数据库ADS</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database ads_sale</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>销售主题域-指标1 查询各国顾客表占比</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span></span><br><span class="line">t1 <span class="keyword">as</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) cnt_cust_number <span class="keyword">from</span> dws_sale.dws_customer),</span><br><span class="line">t2 <span class="keyword">as</span>(<span class="keyword">select</span> country,<span class="built_in">count</span>(<span class="number">1</span>) country_cust_number <span class="keyword">from</span> dws_sale.dws_customer <span class="keyword">group</span> <span class="keyword">by</span> country),</span><br><span class="line">t3 <span class="keyword">as</span>(<span class="keyword">select</span> t2.<span class="operator">*</span>,t1.cnt_cust_number <span class="keyword">from</span> t1 <span class="keyword">cross</span> <span class="keyword">join</span> t2)</span><br><span class="line"><span class="keyword">select</span> country,(country_cust_number<span class="operator">*</span><span class="number">1.0</span><span class="operator">/</span>cnt_cust_number)<span class="operator">*</span><span class="number">100</span> kindCountryPerc <span class="keyword">from</span> t3</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>销售主题域-指标2 查询订单表中共有多少不同顾客下过订单和多少顾客没有下过订单</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span></span><br><span class="line">t1 <span class="keyword">as</span>(<span class="keyword">select</span> customer_id <span class="keyword">from</span> dws_sale.dws_trans <span class="keyword">group</span> <span class="keyword">by</span> customer_id),</span><br><span class="line">t2 <span class="keyword">as</span>(<span class="keyword">select</span> c.customer_id,t.customer_id cid <span class="keyword">from</span> dws_sale.dws_customer c <span class="keyword">left</span> <span class="keyword">join</span> t1 t <span class="keyword">on</span> c.customer_id<span class="operator">=</span>t.customer_id),</span><br><span class="line">t3 <span class="keyword">as</span>(<span class="keyword">select</span> customer_id <span class="keyword">from</span> t2 <span class="keyword">where</span> cid <span class="keyword">is</span> <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;gooduser&#x27;</span> cust, <span class="built_in">count</span>(<span class="number">1</span>) number <span class="keyword">from</span> t1</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;baduser&#x27;</span> cust,<span class="built_in">count</span>(<span class="number">1</span>) number <span class="keyword">from</span> t3</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>销售主题域-指标3 查询商品表中购买数量前五的商品</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span></span><br><span class="line">t1 <span class="keyword">as</span>(<span class="keyword">select</span> product,<span class="built_in">count</span>(<span class="number">1</span>) buy_num <span class="keyword">from</span> dws_sale.dws_trans <span class="keyword">group</span> <span class="keyword">by</span> product),</span><br><span class="line">t2 <span class="keyword">as</span>(<span class="keyword">select</span> product,buy_num,<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> buy_num <span class="keyword">desc</span>) rk <span class="keyword">from</span> t1)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> rk <span class="operator">&lt;=</span><span class="number">5</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="15-Hive函数和Java"><a href="#15-Hive函数和Java" class="headerlink" title="15.Hive函数和Java"></a>15.Hive函数和Java</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/57.png"
                     
                ></p>
<ul>
<li>UDF相当于出一个 UDAF UDTF</li>
<li>UDF一进一出</li>
<li>UDAF：多进一出，类似max，min</li>
<li>UDTF：一进多出，类似explode</li>
</ul>
<h5 id="A-UDF"><a href="#A-UDF" class="headerlink" title="A.UDF"></a>A.UDF</h5><ul>
<li><p>总体</p>
</li>
<li><p><em>User Defined Function</em></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/50.png"
                     
                ></p>
</li>
<li><p>Java示例1</p>
<ol>
<li><p>导入包</p>
<p>比较难导入</p>
 <div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>时间变化pm am 或者没有改成24小时</p>
<p>要多考虑边界</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.timefunc;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeChange</span> <span class="keyword">extends</span> <span class="title class_">UDF</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 3:41 3:41 AM 3:41 PM</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">evaluate</span><span class="params">(String time)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> Integer.parseInt(time.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (hour &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="type">Pattern</span> <span class="variable">tm</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;([0-9]&#123;1,2&#125;:[0-9]&#123;1,2&#125;).*&quot;</span>);</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">mt</span> <span class="operator">=</span> tm.matcher(time);</span><br><span class="line">            mt.find();</span><br><span class="line">            <span class="keyword">return</span> mt.group(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Pattern amReg=Pattern.compile(<span class="string">&quot;(.*)[aA][mM]&quot;</span>);</span><br><span class="line">            Pattern pmReg=Pattern.compile(<span class="string">&quot;(.*)[pP][mM]&quot;</span>);</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">amM</span> <span class="operator">=</span> amReg.matcher(time);</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">pmM</span> <span class="operator">=</span> pmReg.matcher(time);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (amM.find()) &#123;</span><br><span class="line">                <span class="comment">// 上午时间</span></span><br><span class="line">                <span class="keyword">return</span> amM.group(<span class="number">1</span>).trim();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pmM.find()) &#123;</span><br><span class="line">                <span class="comment">// 下午时间</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">pm</span> <span class="operator">=</span> pmM.group(<span class="number">1</span>).trim();</span><br><span class="line">                String[] times = pm.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> (Integer.parseInt(times[<span class="number">0</span>])+<span class="number">12</span>)+<span class="string">&quot;:&quot;</span>+times[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> time;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;13:31 pM&quot;</span>;</span><br><span class="line">        <span class="type">TimeChange</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimeChange</span>();</span><br><span class="line">        System.out.println(tc.evaluate(t));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>不要main，打包，放到hdfs所在机器上</p>
</li>
<li><p>跳到15那的Java示例1</p>
</li>
</ol>
<p>上传jar包到hdfs</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /func</span><br><span class="line">hdfs dfs -put /opt/timefunc-1.0-SNAPSHOT.jar /func</span><br></pre></td></tr></table></figure></div>

<p>在hive上使用hdfs上的jar包创建永久函数</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> timehandler <span class="keyword">as</span> <span class="string">&#x27;com.njupt.timefunc.TimeChange&#x27;</span> <span class="keyword">using</span> jar <span class="string">&#x27;hdfs://192.168.179.139:9000/func/timefunc-1.0-SNAPSHOT.jar&#x27;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="B-时间函数"><a href="#B-时间函数" class="headerlink" title="B.时间函数"></a>B.时间函数</h5><div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">除了mysql那些</span><br><span class="line">trunc剪切</span><br><span class="line">from_unixtime 从时间戳转日期时间</span><br></pre></td></tr></table></figure></div>

<h5 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C.字符串"></a>C.字符串</h5><div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cast</span>(xxx <span class="keyword">as</span> <span class="type">int</span>) <span class="comment">-- 字符串转换</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/58.png"
                     
                ></p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> regexp_extract(<span class="string">&#x27;zs 1999-12-15 football,pingpang&#x27;</span>,<span class="string">&#x27;[a-z]+ ([0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;) .*&#x27;</span>,<span class="number">1</span>) <span class="comment">-- 出1999-12-15</span></span><br></pre></td></tr></table></figure></div>

<h5 id="D-类型转换函数和数学函数"><a href="#D-类型转换函数和数学函数" class="headerlink" title="D.类型转换函数和数学函数"></a>D.类型转换函数和数学函数</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/59.png"
                     
                ></p>
<h5 id="E-日期函数"><a href="#E-日期函数" class="headerlink" title="E.日期函数"></a>E.日期函数</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/60.png"
                     
                ></p>
<p>季度quarter</p>
<ul>
<li><p><a class="link"   href="https://blog.csdn.net/qq_45124566/article/details/128203740" >date_format的格式标签<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240720135343188.png"
                      alt="image-20240720135343188"
                ></p>
</li>
</ul>
<h5 id="G-条件函数"><a href="#G-条件函数" class="headerlink" title="G.条件函数"></a>G.条件函数</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/61.png"
                     
                ></p>
<h5 id="H-聚合函数"><a href="#H-聚合函数" class="headerlink" title="H.聚合函数"></a>H.聚合函数</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/56.png"
                     
                ></p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> json_tuple(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;zs&quot;,&quot;age&quot;:40&#125;&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,&quot;age&quot;) <span class="comment">-- json中一定要&quot;&quot;，但hive都可以，取出这两个值</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>一个小例子</p>
<p>log文件形如</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-07-19 10:30:19.313  INFO 21384 --- [http-nio-9090-exec-5] com.njupt.mydata.controller.DataCtrl     : &#123;&quot;name&quot;:&quot;zhangsanfeng&quot;,&quot;age&quot;:40&#125;</span><br><span class="line">2024-07-19 10:30:19.500  INFO 21384 --- [http-nio-9090-exec-6] com.njupt.mydata.controller.DataCtrl     : &#123;&quot;name&quot;:&quot;zhangsanfeng&quot;,&quot;age&quot;:40&#125;</span><br></pre></td></tr></table></figure></div>

<p>hive读取</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database md</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> md.exp1(</span><br><span class="line">    data string</span><br><span class="line">)</span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/testdata/info.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> md.exp1</span><br><span class="line"><span class="keyword">select</span> json_tuple(regexp_extract(data,<span class="string">&#x27;^.* : (\\&#123;.*\\&#125;)$&#x27;</span>,<span class="number">1</span>),<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>) <span class="keyword">from</span> md.exp1 <span class="keyword">where</span> data rlike <span class="string">&#x27;^.* : \\&#123;.*\\&#125;$&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>结果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/62.png"
                     
                ></p>
<p>也可以用Java</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240719112202360.png"
                      alt="image-20240719112202360"
                ></p>
</li>
</ul>
<h5 id="I-数组操作"><a href="#I-数组操作" class="headerlink" title="I.数组操作"></a>I.数组操作</h5><ul>
<li><code>array_contains(array,str)</code>str是否在array中</li>
<li>制作数组<code>array(&#39;str1&#39;,&#39;str2&#39;)</code></li>
</ul>
<h4 id="16-MapJoin"><a href="#16-MapJoin" class="headerlink" title="16.MapJoin"></a>16.MapJoin</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/51.png"
                     
                ></p>
<h4 id="17-排序"><a href="#17-排序" class="headerlink" title="17.排序"></a>17.排序</h4><ul>
<li><p>分类</p>
<p>全局排序（Order by）</p>
<p>每个MapReduce内部排序（Sort by）</p>
<p>分区排序（Distribute by）</p>
<p>先分桶再排序（Cluster by）</p>
</li>
<li><p>Order by</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/53.png"
                      style="zoom:67%;" 
                >

<p>不管怎么设置，order by最后一定只有一个reducer</p>
</li>
<li><p><strong>Sort by</strong>和<strong>Distribute by</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/54.png"
                     
                ></p>
<p>sort by是组内排序，因此要配合distribute by使用</p>
<p>distribute by相当于分区操作，默认使用hash</p>
<p>记得要提前设置reduce数量，否则默认为1，<code>set mapreduce.job.reduces=3</code>设置个数</p>
</li>
<li><p>cluster by</p>
<p>基本不用，局限太大。只能升序，而且分组和排序的字段只能同一个</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/55.png"
                      style="zoom:50%;" 
                ></li>
</ul>
<h4 id="18-自定义mapReduce数量"><a href="#18-自定义mapReduce数量" class="headerlink" title="18.自定义mapReduce数量"></a>18.自定义mapReduce数量</h4><h5 id="A-mapper"><a href="#A-mapper" class="headerlink" title="A.mapper"></a>A.mapper</h5><p><code>set mapred.max.split.size=204800</code>设置分块大小，可以决定mapper数量，默认128M，单位为B</p>
<h5 id="B-reducer"><a href="#B-reducer" class="headerlink" title="B.reducer"></a>B.reducer</h5><p><code>set mapreduce.job.reduces=3</code>设置个数</p>
<h4 id="19-单元格分组聚合"><a href="#19-单元格分组聚合" class="headerlink" title="19.单元格分组聚合"></a>19.单元格分组聚合</h4><p>相当于mysql中的group_concat。collect_set,collect_list</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/56.png"
                     
                ></p>
<p>从列直接聚合成一行，set是无序不可重复的，list是有序可重复</p>
<h4 id="20-Hive事务"><a href="#20-Hive事务" class="headerlink" title="20.Hive事务"></a>20.Hive事务</h4><p>有，但不太用，因为主要是select操作，默认是不开的</p>
<p>原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。</p>
<h4 id="21-Hive性能调优"><a href="#21-Hive性能调优" class="headerlink" title="21.Hive性能调优"></a>21.Hive性能调优</h4><ul>
<li><code>explain 语句</code>查看运行的过程</li>
<li>文件格式<ul>
<li>textfile  天生横向扫描</li>
<li>SequenceFile  把数据转为键值对，行格式，压缩比低，能直接看到切片效果，基本不用</li>
<li>ORCFILE <code>stored as orc</code> 压缩比高，行列存储，每个块都有索引，自带zlib和znappy压缩器，加载时性能消耗大</li>
<li>parquet，列式存储，存储嵌套式的数据</li>
</ul>
</li>
</ul>
<h4 id="22-Hive数据倾斜"><a href="#22-Hive数据倾斜" class="headerlink" title="22.Hive数据倾斜"></a>22.<a class="link"   href="https://www.cnblogs.com/qingyunzong/p/8847597.html" >Hive数据倾斜<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><p>​	<a href="./#Hive%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C.md">本地</a></p>
<h4 id="23-Java连接Hive"><a href="#23-Java连接Hive" class="headerlink" title="23.Java连接Hive"></a>23.Java连接Hive</h4><ul>
<li>不统计是不走mapReduce的</li>
<li>最后ADS中的内容就是要被调用而不被调用的</li>
</ul>
<h5 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h5><ul>
<li><p>加入的包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>连接访问</p>
<p>jdbc</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;org.apache.hive.jdbc.HiveDriver&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:hive2://192.168.179.139:10000/dws_supermark&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>); <span class="comment">// hive的用户名和密码</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstat</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">&quot;select credit_type,count(1) num from dws_supermark.dws_customs group by credit_type order by num desc limit 5&quot;</span>);</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstat.executeQuery();</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        System.out.println(rs.getString(<span class="string">&quot;credit_type&quot;</span>)+<span class="string">&quot; &quot;</span>+rs.getInt(<span class="string">&quot;num&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    rs.close();</span><br><span class="line">    pstat.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h5><ul>
<li><p>导入包</p>
<p>前面选sql中的mybatis的驱动,再后面自己加</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> 这是个连接池</span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置application.yml</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.apache.hive.jdbc.HiveDriver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:hive2://192.168.179.139:10000/ads_supermark_user</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis.cfg.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>其他如后端框架mysql的连接</p>
</li>
</ul>
<h3 id="七-离线数仓四层结构"><a href="#七-离线数仓四层结构" class="headerlink" title="(七).离线数仓四层结构"></a>(七).离线数仓四层结构</h3><h4 id="自己总结的"><a href="#自己总结的" class="headerlink" title="自己总结的"></a>自己总结的</h4><ul>
<li>例子在上面14的一次练习中有</li>
</ul>
<ol>
<li><p>近源层</p>
<p>单纯映射表，ODS，Operational Data Store</p>
<p>进行数据的探索</p>
</li>
<li><p>数据明细层</p>
<p>DWD，Data Warehouse Detail，进行数据清理</p>
</li>
<li><p>数据服务层</p>
<p>DWS，Data Warehouse Summary</p>
<ul>
<li><p><strong>维度表</strong>：名词表，如用户、商品。</p>
<p>看一个事实的维度，用户表是交易表的维度表。</p>
</li>
<li><p><strong>事实表</strong>：动作表，如交易订单</p>
</li>
<li><p>可以进行一些数据的统计，做聚合等等</p>
</li>
<li><p>模型</p>
<p>星型模型，一个动作为中心，多维度查看。</p>
<p>雪花模型，从某个维度看维度再向事实</p>
<p>星座模型，多个维度看多个事实</p>
</li>
</ul>
</li>
<li><p>数据应用层</p>
<p>ADS，Application Data Store </p>
<p>把要查询的内容查完之后存在表中，做指标，后续外部调用就不要使用MapReduce了。</p>
<p>最后结果甚至可以存放在Mysql中，因为最后统计的数据量并不是很大，<strong>如果要做二次统计就放Mysql</strong></p>
</li>
<li><p>DWT层</p>
<p>如果是做指标的话，ADS层会换成DWT层</p>
</li>
</ol>
<ul>
<li><p>上面每一层都要有一个数据库</p>
<p>合起来称为数据仓库</p>
</li>
</ul>
<h4 id="后来讲的"><a href="#后来讲的" class="headerlink" title="后来讲的"></a>后来讲的</h4><h3 id="八-多次练习"><a href="#八-多次练习" class="headerlink" title="(八)多次练习"></a>(八)多次练习</h3><h4 id="1-某宝用户行为分析练习"><a href="#1-某宝用户行为分析练习" class="headerlink" title="1.某宝用户行为分析练习"></a>1.<a class="link"   href="https://tianchi.aliyun.com/dataset/649" >某宝用户行为分析练习<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ul>
<li><a class="link"   href="https://blog.csdn.net/m0_46525538/article/details/137242863" >https://blog.csdn.net/m0_46525538/article/details/137242863<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<ol>
<li><p>创建数据仓库</p>
<p><code>create database taobao</code></p>
</li>
<li><p>创建数据表</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> taobao.userbehavior(</span><br><span class="line">    cust_id string,</span><br><span class="line">    sku_id string,</span><br><span class="line">    spu_id string,</span><br><span class="line">    useract string,</span><br><span class="line">    ts string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>导入数据</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/testdata/UserBehavior.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> taobao.userbehavior</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>数据探索</p>
<p><code>select * from taobao.userbehavior where cust_id not rlike &#39;^[0-9]+$&#39;</code></p>
</li>
<li><p>数据清理(分区表按日分，将时间戳改为YYYY-MM-DD HH:MM:SS)</p>
<ul>
<li><p>建立分区表，用orc的方式存储</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> taobao.behaviorpart(</span><br><span class="line">    cust_id string,</span><br><span class="line">    sku_id string,</span><br><span class="line">    spu_id string,</span><br><span class="line">    useract string,</span><br><span class="line">    actiondate string</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (ymd string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">stored <span class="keyword">as</span> orc</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>动态分区塞入数据</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- set hive.exec.dynamic.partition=true</span></span><br><span class="line"><span class="comment">-- set hive.exec.dynamic.partition.mode=nonstrict</span></span><br><span class="line"><span class="comment">-- insert into taobao.behaviorpart partition(ymd)</span></span><br><span class="line"><span class="comment">-- select t.*,date_format(actiondate,&#x27;yyyyMMdd&#x27;) ymd from (select ub.cust_id,ub.sku_id,ub.spu_id,ub.useract,from_unixtime(cast(ub.ts as int)) actiondate from taobao.userbehavior ub) t</span></span><br></pre></td></tr></table></figure></div>

<p>但是由于硬盘的原因受到限制，因此用静态分区，逐分区塞入数据</p>
</li>
<li><p>静态分区塞入数据，中间步骤用临时表缓解硬盘压力，删掉前面的表</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- alter table taobao.behaviorpart add partition(ymd=&#x27;20171125&#x27;) partition(ymd=&#x27;20171126&#x27;) </span></span><br><span class="line"><span class="comment">-- partition(ymd=&#x27;20171127&#x27;) partition(ymd=&#x27;20171128&#x27;) partition(ymd=&#x27;20171129&#x27;) </span></span><br><span class="line"><span class="comment">-- partition(ymd=&#x27;20171130&#x27;) partition(ymd=&#x27;20171201&#x27;) partition(ymd=&#x27;20171202&#x27;) partition(ymd=&#x27;20171203&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- create table taobao.tmp1 like taobao.userbehavior</span></span><br><span class="line"><span class="comment">-- insert into taobao.tmp1 select ub.cust_id,ub.sku_id,ub.spu_id,ub.useract,from_unixtime(cast(ub.ts as int)) actiondate from taobao.userbehavior ub</span></span><br><span class="line"><span class="comment">-- drop table taobao.userbehavior</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> taobao.behaviorpart <span class="keyword">partition</span>(ymd<span class="operator">=</span><span class="string">&#x27;20171202&#x27;</span>) <span class="keyword">select</span> cust_id,sku_id,spu_id,useract,ts actiondate </span><br><span class="line"><span class="keyword">from</span> taobao.tmp1 <span class="keyword">where</span> date_format(ts,<span class="string">&#x27;yyyyMMdd&#x27;</span>)<span class="operator">=</span><span class="string">&#x27;20171202&#x27;</span> <span class="comment">-- 一天天的导入</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>成交率</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 成交率</span></span><br><span class="line"><span class="keyword">with</span></span><br><span class="line">t1 <span class="keyword">as</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> cust_id) total_num <span class="keyword">from</span> taobao.behaviorpart),</span><br><span class="line">t2 <span class="keyword">as</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> cust_id) buy_num <span class="keyword">from</span> taobao.behaviorpart <span class="keyword">where</span> useract<span class="operator">=</span><span class="string">&#x27;buy&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;成交率&#x27;</span> say,t2.buy_num<span class="operator">/</span>t1.total_num closerate <span class="keyword">from</span> t1 <span class="keyword">cross</span> <span class="keyword">join</span> t2</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>复购率</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复购率</span></span><br><span class="line"><span class="keyword">with</span></span><br><span class="line">t1 <span class="keyword">as</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> cust_id) buy_num <span class="keyword">from</span> taobao.behaviorpart <span class="keyword">where</span> useract<span class="operator">=</span><span class="string">&#x27;buy&#x27;</span>),</span><br><span class="line">t2 <span class="keyword">as</span>(<span class="keyword">select</span> cust_id <span class="keyword">from</span> taobao.behaviorpart <span class="keyword">where</span> useract<span class="operator">=</span><span class="string">&#x27;buy&#x27;</span>),</span><br><span class="line">t3 <span class="keyword">as</span>(<span class="keyword">select</span> cust_id <span class="keyword">from</span> t2 <span class="keyword">group</span> <span class="keyword">by</span> cust_id <span class="keyword">having</span> <span class="built_in">count</span>(<span class="number">1</span>)<span class="operator">&gt;</span><span class="number">1</span>),</span><br><span class="line">t4 <span class="keyword">as</span>(<span class="keyword">select</span> <span class="built_in">count</span>(cust_id) s <span class="keyword">from</span> t3)</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;复购率&#x27;</span> say,t4.s<span class="operator">/</span>t1.buy_num closerate <span class="keyword">from</span> t1 <span class="keyword">cross</span> <span class="keyword">join</span> t4</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>转化漏斗(点击-收藏&#x2F;加购-购买的数量关系)</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(if(useract<span class="operator">=</span><span class="string">&#x27;pv&#x27;</span>,<span class="number">1</span>,<span class="keyword">null</span>)) pv,<span class="built_in">count</span>(if(useract<span class="operator">=</span><span class="string">&#x27;fav&#x27;</span>,<span class="number">1</span>,<span class="keyword">null</span>)) fav,</span><br><span class="line"><span class="built_in">count</span>(if(useract<span class="operator">=</span><span class="string">&#x27;cart&#x27;</span>,<span class="number">1</span>,<span class="keyword">null</span>)) cart,<span class="built_in">count</span>(if(useract<span class="operator">=</span><span class="string">&#x27;buy&#x27;</span>,<span class="number">1</span>,<span class="keyword">null</span>)) buy <span class="keyword">from</span> taobao.behaviorpart</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>跳失率(点击单页面即退出的用户&#x2F;全部点击用户数)</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span></span><br><span class="line">t1 <span class="keyword">as</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) dump_num <span class="keyword">from</span> (<span class="keyword">select</span> cust_id <span class="keyword">from</span> taobao.behaviorpart <span class="keyword">where</span> useract<span class="operator">=</span><span class="string">&#x27;pv&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> cust_id <span class="keyword">having</span> <span class="built_in">count</span>(cust_id)<span class="operator">=</span><span class="number">1</span>) t),</span><br><span class="line">t2 <span class="keyword">as</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> cust_id) pv_total <span class="keyword">from</span> taobao.behaviorpart <span class="keyword">where</span> useract<span class="operator">=</span><span class="string">&#x27;pv&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;跳失率&#x27;</span> say,t1.dump_num<span class="operator">/</span>t2.pv_total lossrate <span class="keyword">from</span> t1 <span class="keyword">cross</span> <span class="keyword">join</span> t2</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>最活跃的用户Top10</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id,<span class="built_in">count</span>(<span class="number">1</span>) active <span class="keyword">from</span> taobao.behaviorpart <span class="keyword">group</span> <span class="keyword">by</span> cust_id <span class="keyword">order</span> <span class="keyword">by</span> active <span class="keyword">desc</span> limit <span class="number">10</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>最热门的商品Top10(浏览率最高的10个商品)</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sku_id,<span class="built_in">count</span>(<span class="number">1</span>) pv_num <span class="keyword">from</span> taobao.behaviorpart <span class="keyword">where</span> useract<span class="operator">=</span><span class="string">&#x27;pv&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> sku_id <span class="keyword">order</span> <span class="keyword">by</span> pv_num <span class="keyword">desc</span> limit <span class="number">10</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>统计每天的用户量、点击量、收藏量、加购量、购买量</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> date_format(actiondate,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) addate,<span class="built_in">count</span>(<span class="keyword">distinct</span> cust_id) cnt_user,<span class="built_in">count</span>(if(useract<span class="operator">=</span><span class="string">&#x27;pv&#x27;</span>,<span class="number">1</span>,<span class="keyword">null</span>)) cnt_pv,<span class="built_in">count</span>(if(useract<span class="operator">=</span><span class="string">&#x27;fav&#x27;</span>,<span class="number">1</span>,<span class="keyword">null</span>))cnt_fav,<span class="built_in">count</span>(if(useract<span class="operator">=</span><span class="string">&#x27;cart&#x27;</span>,<span class="number">1</span>,<span class="keyword">null</span>)) cnt_cart,<span class="built_in">count</span>(if(useract<span class="operator">=</span><span class="string">&#x27;buy&#x27;</span>,<span class="number">1</span>,<span class="keyword">null</span>)) cnt_buy <span class="keyword">from</span> taobao.behaviorpart <span class="keyword">group</span> <span class="keyword">by</span> date_format(actiondate,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>)</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="2-较为真实的用户行为分析"><a href="#2-较为真实的用户行为分析" class="headerlink" title="2.较为真实的用户行为分析"></a>2.较为真实的用户行为分析</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240719142654641.png"
                      alt="image-20240719142654641"
                ></p>
<ul>
<li><p>要求：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">customer_details.csv </span><br><span class="line">customer_id,first_name,last_name,email,gender,address,country,language,job,credit_type,credit_no</span><br><span class="line"></span><br><span class="line"> store_details.csv </span><br><span class="line">store_id,store_name,employee_number</span><br><span class="line"></span><br><span class="line"> store_review.csv </span><br><span class="line">transaction_id,store_id,review_score</span><br><span class="line"></span><br><span class="line"> transaction_details.csv </span><br><span class="line">transaction_id,customer_id,store_id,price,product,date,time</span><br><span class="line"></span><br><span class="line">Customer分析</span><br><span class="line">6.1找出顾客最常用的信用卡</span><br><span class="line">6.2找出客户资料中排名前五的职位名称</span><br><span class="line">6.3在美国女性最常用的信用卡</span><br><span class="line">6.4按性别和国家进行客户统计</span><br><span class="line"></span><br><span class="line">Transaction分析-1</span><br><span class="line">7.1计算每月总收入</span><br><span class="line">7.2计算每个季度的总收入</span><br><span class="line">7.3按年计算总收入</span><br><span class="line">7.4按工作日计算总收入</span><br><span class="line">7.5按时间段计算总收入(需要清理数据)</span><br><span class="line">7.6按时间段计算平均消费</span><br><span class="line">7.7按工作日计算平均消费</span><br><span class="line">7.8计算年、月、日的交易总数</span><br><span class="line">7.9找出交易量最大的10个客户</span><br><span class="line">7.10找出消费最多的前10位顾客</span><br><span class="line"></span><br><span class="line">Transaction分析-2</span><br><span class="line">7.11统计该期间交易数量最少的用户</span><br><span class="line">7.12计算每个季度的独立客户总数</span><br><span class="line">7.13计算每周的独立客户总数</span><br><span class="line">7.14计算整个活动客户平均花费的最大值</span><br><span class="line">7.15统计每月花费最多的客户</span><br><span class="line">7.16统计每月访问次数最多的客户</span><br><span class="line">7.17按总价找出最受欢迎的5种产品</span><br><span class="line">7.18根据购买频率找出最畅销的5种产品</span><br><span class="line">7.19根据客户数量找出最受欢迎的5种产品</span><br><span class="line">7.20验证前5个details</span><br><span class="line"></span><br><span class="line">Store分析</span><br><span class="line">8.1按客流量找出最受欢迎的商店</span><br><span class="line">8.2根据顾客消费价格找出最受欢迎的商店</span><br><span class="line">8.3根据顾客交易情况找出最受欢迎的商店</span><br><span class="line">8.4根据商店和唯一的顾客id获取最受欢迎的产品</span><br><span class="line">8.5获取每个商店的员工与顾客比</span><br><span class="line">8.6按年和月计算每家店的收入</span><br><span class="line">8.7按店铺制作总收益饼图</span><br><span class="line">8.8找出每个商店最繁忙的时间段</span><br><span class="line">8.9找出每家店的忠实顾客</span><br><span class="line">8.10根据每位员工的最高收入找出明星商店</span><br><span class="line"></span><br><span class="line">Review分析</span><br><span class="line">9.1在ext store review中找出存在冲突的交易映射关系</span><br><span class="line">9.2了解客户评价的覆盖率</span><br><span class="line">9.3根据评分了解客户的分布情况</span><br><span class="line">9.4根据交易了解客户的分布情况</span><br><span class="line">9.5客户给出的最佳评价是否总是同一家门店</span><br></pre></td></tr></table></figure></div>
</li>
<li></li>
</ul>
<h2 id="八-HBase"><a href="#八-HBase" class="headerlink" title="八.HBase"></a>八.HBase</h2><h3 id="（一）前期-1"><a href="#（一）前期-1" class="headerlink" title="（一）前期"></a>（一）前期</h3><ul>
<li>争议较大</li>
<li>NoSQL</li>
<li>目的是存储海量数据，在不启用MapReduce的情况下，快速查数据，列式存储</li>
<li>实时流的存储往往用HBase，是Hadoop原生的。Doris的好处是用sql，但存储能力和HBase差不多</li>
<li>鼓励冗余</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240720171300559.png"
                      alt="image-20240720171300559"
                ></li>
<li>比较昂贵，虽然效率高，但是用得人少</li>
<li>面试重点：<ul>
<li>Hbase行键是如何设计的</li>
<li>优化：预处理分析</li>
<li>热点问题</li>
<li>随机读写</li>
</ul>
</li>
<li>百亿数据必用，十亿左右可用可不用，适合PB级别的数据</li>
<li>hbase版本和hadoop有要求</li>
</ul>
<h3 id="（二）内容-1"><a href="#（二）内容-1" class="headerlink" title="（二）内容"></a>（二）内容</h3><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h4><ul>
<li>数据访问速度快，响应时间约2-20毫秒</li>
<li>支持随机读写，每个节点20k~100k+ops&#x2F;s</li>
<li>可扩展性，可扩展到20,000+节点</li>
<li>高并发</li>
</ul>
<h4 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2.应用场景"></a>2.应用场景</h4><ul>
<li>增量数据-时间序列数据<ul>
<li>高容量，高速写入</li>
<li>HBase之上有OpenTSDB模块，可以满足时序类场景<br>比如传感器，系统监控，股票行情监控等</li>
</ul>
</li>
<li>内容服务-Web后端应用<ul>
<li>Facebook和Alibaba</li>
<li>费用比较高</li>
</ul>
</li>
</ul>
<h4 id="3-随机存取"><a href="#3-随机存取" class="headerlink" title="3.随机存取"></a>3.随机存取</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240722100316623.png"
                      alt="image-20240722100316623"
                ></p>
</li>
<li><p>列存储，列簇，就是多个列为一个列簇。如下图所示，基本信息、亲属就是列簇。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240722101813403.png"
                      alt="image-20240722101813403"
                ></p>
<p>然后把每个列簇分出来，分成类似于多张表，但是这张表我们称为列簇，我们看上去仍然是一张表。中间的关联是用的行键（而不是主外键）。一个store就是一个列簇，一般最多两三个列簇</p>
</li>
<li><p>实际上的架构每行都为</p>
<p><code>行键 列簇 时间戳 列名 值</code></p>
<p>冗余性很高，但是通过稀疏索引可快速找到相应列，实现随机存取</p>
</li>
<li><p>物理架构</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240722100504997.png"
                      alt="image-20240722100504997"
                ></p>
<p>StoreFile相当于是hdp中的block，对应一张表的一个列簇，一个Store相当于一张表，</p>
</li>
<li><p>行太多时，就分Region，多Region上下相连，才是完整的表</p>
</li>
<li><p>列太多时，分割成列簇，就是一个个StoreFile</p>
</li>
<li><p>MemStore是写入的缓冲区，达到容量条件或者时间要求会写入HDFS形成HFile</p>
</li>
<li><p>HLog（WAL）日志文件，因为MemStore在内存中，因此可能会导致丢失，先写入WAL，再放内存就可以还原了</p>
</li>
<li><p><a class="link"   href="https://cloud.tencent.com/developer/article/1797288%E3%80%81" >https://cloud.tencent.com/developer/article/1797288、<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>HRegion分割是按hash，Store内部是按字典排序</p>
</li>
</ul>
<h3 id="（三）单机安装"><a href="#（三）单机安装" class="headerlink" title="（三）单机安装"></a>（三）单机安装</h3><ol>
<li><p>前提要有Hadoop</p>
</li>
<li><p>先安装zookeeper，zookeeper-3.4.5-cdh5.14.2.tar.gz放到<code>/opt</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxf zookeeper-3.4.5-cdh5.14.2.tar.gz</span><br><span class="line"><span class="built_in">mv</span> zookeeper-3.4.5-cdh5.14.2 soft/zk345</span><br><span class="line"><span class="built_in">cd</span> soft/zk345/conf/</span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></div>

<p><code>vim zoo.cfg</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">dataDir=/opt/soft/zk345/data</span><br><span class="line">server.1=192.168.179.139:2888:3888</span><br></pre></td></tr></table></figure></div>

<p><code>vim /etc/profile</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Zookeeper Env</span></span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/soft/zk345</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 在hadoop启动的情况下</span></span><br><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure></div>

<p>多个QuorumPeerMain</p>
</li>
<li><p>hbase安装，把hbase-1.2.0-cdh5.14.2.tar.gz放到<code>/opt</code>下</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxf hbase-1.2.0-cdh5.14.2.tar.gz</span><br><span class="line"><span class="built_in">mv</span> hbase-1.2.0-cdh5.14.2 soft/hbase120</span><br><span class="line"><span class="built_in">cd</span> soft/hbase120/conf</span><br></pre></td></tr></table></figure></div>

<p><code>vim hbase-env.sh</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/soft/jdk180</span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span> <span class="comment"># 用外部的zookeeper</span></span><br></pre></td></tr></table></figure></div>

<p><code>vim hbase-site.xml</code></p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://192.168.179.139:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">&lt;!—单机模式不需要配置，分布式配置此项为true,单机好像也得true--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/soft/zk345/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>vim &#x2F;etc&#x2F;profile</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Hbase Env</span></span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/opt/soft/hbase120</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HBASE_HOME</span>/bin</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">start-hbase.sh</span><br><span class="line"><span class="comment"># 多出HRegionServer HMaseter</span></span><br><span class="line"><span class="comment"># 进入</span></span><br><span class="line">hbase shell</span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="（四）使用"><a href="#（四）使用" class="headerlink" title="（四）使用"></a>（四）使用</h3><h4 id="1-第一次使用-1"><a href="#1-第一次使用-1" class="headerlink" title="1.第一次使用"></a>1.第一次使用</h4><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">start-hbase.sh</span><br><span class="line"><span class="comment"># HRegionServer HMaseter</span></span><br><span class="line"><span class="comment"># 进入</span></span><br><span class="line">hbase shell</span><br><span class="line"><span class="comment"># 进入后</span></span><br><span class="line">list</span><br></pre></td></tr></table></figure></div>

<p>删除过程要<strong>按住ctrl删除</strong>，否则会往后删</p>
<h4 id="2-各种命令"><a href="#2-各种命令" class="headerlink" title="2.各种命令"></a>2.各种命令</h4><ul>
<li><p>命令集</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240722103614849.png"
                      alt="image-20240722103614849"
                ></p>
</li>
<li><p>名空间(namespace)-对应数据库</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">create_namespace &#x27;名字&#x27;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>建表</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">create &#x27;名空间:表名&#x27;,&#x27;列簇1&#x27;,&#x27;列簇2&#x27;...</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>插入数据</p>
<p>一次只能插入一格</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">put &#x27;名空间:表名&#x27;,行键,&#x27;列簇名:列名&#x27;,&#x27;字符串数据&#x27;或者数字</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看数据</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">scan &#x27;名空间:表名&#x27;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>结果 能看到有插入的时间戳</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240722105216040.png"
                      alt="image-20240722105216040"
                ></p>
<ul>
<li><p>查单个</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">get &#x27;名空间:表名&#x27;,行键</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查前5行</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">scan &#x27;名空间:表名&#x27;,&#123;LIMIT=&gt;5&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>修改 和插入一样，会直接覆盖</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">put &#x27;名空间:表名&#x27;,行键,&#x27;列簇名:列名&#x27;,&#x27;字符串数据&#x27;或者数字</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除数据</p>
<ul>
<li><p>删一格</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete &#x27;名空间:表名&#x27;,行键,&#x27;列簇名:列名&#x27;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删一行</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete &#x27;名空间:表名&#x27;,行键</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删全部数据</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate &#x27;名空间:表名&#x27;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>删表</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">先关停表再删除</span><br><span class="line">disable &#x27;名空间:表名&#x27;</span><br><span class="line">drop &#x27;名空间:表名&#x27;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>统计数</p>
<p>每1000行统计一次，太慢</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">count &#x27;名空间:表名&#x27;</span><br></pre></td></tr></table></figure></div>

<p>外部统计</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hbase org.apache.hadoop.hbase.mapreduce.RowCounter <span class="string">&#x27;库:表&#x27;</span> [<span class="string">&#x27;outputfile&#x27;</span>]</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="3-外部导入数据"><a href="#3-外部导入数据" class="headerlink" title="3.外部导入数据"></a>3.外部导入数据</h4><ul>
<li><strong>csv文件不要表头</strong></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240722110228811.png"
                      alt="image-20240722110228811"
                ></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hbase org.apache.hadoop.hbase.mapreduce.ImportTsv \</span><br><span class="line">-Dimporttsv.separator=,  \</span><br><span class="line">-Dimporttsv.columns=<span class="string">&quot;HBASE_ROW_KEY,列簇名:列名,列簇名:列名......&quot;</span> \</span><br><span class="line">mydemo:userinfos file://csv文件绝对路径</span><br></pre></td></tr></table></figure></div>

<h4 id="4-第一次hive操作hbase"><a href="#4-第一次hive操作hbase" class="headerlink" title="4.第一次hive操作hbase"></a>4.第一次hive操作hbase</h4><ul>
<li><p>首先hbase中有一个表mydemo:userinfos，两个列簇：base和others</p>
</li>
<li><p>数据三列都在base中，分别为name,age,gender</p>
</li>
<li><p>并不是很好，只是对hbase做了映射，还是得走mapreduce而不会用hbase。因为hive直接读取了hbase在hdfs上的文件</p>
</li>
<li><p>hbase是用SequenceFile 的方式存储的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240722141907855.png"
                      alt="image-20240722141907855"
                ></p>
</li>
<li><p>因此这个方式做离线数仓还行，用Java直接对client下命令比较好</p>
</li>
</ul>
<ol>
<li><p>用hive映射操作hbase表(insert select)</p>
 <div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database exp;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> exp.cutoms(</span><br><span class="line">    id string,</span><br><span class="line">    username string,</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    sex string</span><br><span class="line">)</span><br><span class="line">STORED <span class="keyword">BY</span> <span class="string">&#x27;org.apache.hadoop.hive.hbase.HBaseStorageHandler&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (</span><br><span class="line">  &quot;hbase.columns.mapping&quot; <span class="operator">=</span> &quot;:key,base:name,base:age,base:gender&quot;</span><br><span class="line">)</span><br><span class="line">TBLPROPERTIES (</span><br><span class="line">  &quot;hbase.table.name&quot; <span class="operator">=</span> &quot;mydemo:userinfos&quot;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="5-Java控制hbase"><a href="#5-Java控制hbase" class="headerlink" title="5.Java控制hbase"></a>5.Java控制hbase</h4><ul>
<li>走的是hbase的底层，速度比hive快得多</li>
<li>项目名hivejdbc</li>
</ul>
<ol>
<li><p>导入依赖</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用</p>
<p>&#x3D;&#x3D;<code>C:\Windows\System32\drivers\etc\hosts</code>加虚拟机的<code>ip 主机名</code>，否则读不到表&#x3D;&#x3D;</p>
<ul>
<li><p>读数据</p>
  <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> HBaseConfiguration.create();</span><br><span class="line">        <span class="comment">// 设置zookeeper地址</span></span><br><span class="line">        config.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;192.168.179.139:2181&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启hbase数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionFactory.createConnection(config);</span><br><span class="line">        System.out.println(<span class="string">&quot;连接开启&quot;</span>+connection);</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="comment">// 找到你要操作的表</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(<span class="string">&quot;mydemo:userinfos&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;找到表：&quot;</span>+table);</span><br><span class="line">        <span class="comment">// 拿数据</span></span><br><span class="line">        <span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line">        <span class="type">ResultScanner</span> <span class="variable">rss</span> <span class="operator">=</span> table.getScanner(scan);</span><br><span class="line">        System.out.println(<span class="string">&quot;获得数据集合：&quot;</span>+rss);</span><br><span class="line">        <span class="keyword">for</span> (Result rs : rss) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>(rs.getRow())+ <span class="string">&quot; &quot;</span>+</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>(rs.getValue(<span class="string">&quot;base&quot;</span>.getBytes(),<span class="string">&quot;name&quot;</span>.getBytes()))+<span class="string">&quot; &quot;</span>+</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>(rs.getValue(<span class="string">&quot;base&quot;</span>.getBytes(),<span class="string">&quot;age&quot;</span>.getBytes()))+<span class="string">&quot; &quot;</span>+</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>(rs.getValue(<span class="string">&quot;base&quot;</span>.getBytes(),<span class="string">&quot;gender&quot;</span>.getBytes())));</span><br><span class="line">        &#125;</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>写数据</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> HBaseConfiguration.create();</span><br><span class="line">        <span class="comment">// 设置zookeeper地址</span></span><br><span class="line">        config.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;192.168.179.139:2181&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启hbase数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionFactory.createConnection(config);</span><br><span class="line">        System.out.println(<span class="string">&quot;连接开启&quot;</span>+connection);</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="comment">// 找到你要操作的表</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(<span class="string">&quot;mydemo:users&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;找到表：&quot;</span>+table);</span><br><span class="line">        <span class="comment">// 添加一条数据</span></span><br><span class="line"><span class="comment">//        Put put = new Put(&quot;1&quot;.getBytes());</span></span><br><span class="line"><span class="comment">//        put.addColumn(&quot;base&quot;.getBytes(), &quot;uname&quot;.getBytes(), &quot;zs&quot;.getBytes());</span></span><br><span class="line"><span class="comment">//        put.addColumn(&quot;base&quot;.getBytes(),&quot;age&quot;.getBytes(),&quot;20&quot;.getBytes());</span></span><br><span class="line"><span class="comment">//        put.addColumn(&quot;base&quot;.getBytes(),&quot;gender&quot;.getBytes(),&quot;男&quot;.getBytes());</span></span><br><span class="line"><span class="comment">//        table.put(put);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次性添加1000条数据</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        List&lt;Put&gt; putss = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= <span class="number">1002</span>; i++) &#123;</span><br><span class="line">            <span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>((<span class="string">&quot;&quot;</span>+i).getBytes());</span><br><span class="line">            put.addColumn(<span class="string">&quot;base&quot;</span>.getBytes(), <span class="string">&quot;uname&quot;</span>.getBytes(), (<span class="string">&quot;zs&quot;</span>+i).getBytes());</span><br><span class="line">            put.addColumn(<span class="string">&quot;base&quot;</span>.getBytes(),<span class="string">&quot;age&quot;</span>.getBytes(),(<span class="string">&quot;&quot;</span>+rand.nextInt(<span class="number">100</span>)).getBytes());</span><br><span class="line">            put.addColumn(<span class="string">&quot;base&quot;</span>.getBytes(),<span class="string">&quot;gender&quot;</span>.getBytes(),(i%<span class="number">2</span>==<span class="number">0</span>?<span class="string">&quot;男&quot;</span>:<span class="string">&quot;女&quot;</span>).getBytes());</span><br><span class="line">            putss.add(put);</span><br><span class="line">        &#125;</span><br><span class="line">        table.put(putss);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
<h4 id="6-Java不定长度批量插入"><a href="#6-Java不定长度批量插入" class="headerlink" title="6.Java不定长度批量插入"></a>6.Java不定长度批量插入</h4><ul>
<li><p>包和前面一样</p>
</li>
<li><p>用缓存的方式</p>
</li>
<li><p>包用高版本的，才有定时刷缓冲区</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><pre><code class="java">package org.example;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.*;

import java.util.Random;

public class App1 &#123;
    public static void main(String[] args) throws Exception&#123;
        Configuration config = HBaseConfiguration.create();
        // 设置zookeeper地址
        config.set(&quot;hbase.zookeeper.quorum&quot;, &quot;192.168.179.139:2181&quot;);
        // 开启hbase数据库连接
        Connection connection = ConnectionFactory.createConnection(config);
        System.out.println(&quot;连接开启&quot;+connection);
        // 读取数据
        // 找到你要操作的表
        Table table = connection.getTable(TableName.valueOf(&quot;mydemo:users&quot;));
        System.out.println(&quot;找到表：&quot;+table);

        // 一次性添加1000条数据
        Random rand = new Random();
        // 准备一个特定的缓存对象
        BufferedMutatorParams bmp = new BufferedMutatorParams(TableName.valueOf(&quot;mydemo:users&quot;));
        bmp.writeBufferSize(1024*1024); // 设置当数据满1kb时就填充数据到hdfs
        bmp.setWriteBufferPeriodicFlushTimerTickMs(2000); // 设置如果缓存区没有填满 此时刷新时间到达也会触发写操作
        // bmp.setWriteBufferPeriodicFlushTimeoutMs(3000); 超时时间
        BufferedMutator bm = connection.getBufferedMutator(bmp);

        for (int i = 1; i &lt;= 34225; i++) &#123;
            Put put = new Put((&quot;&quot;+i).getBytes());
            put.addColumn(&quot;base&quot;.getBytes(), &quot;uname&quot;.getBytes(), (&quot;zs&quot;+i).getBytes());
            put.addColumn(&quot;base&quot;.getBytes(),&quot;age&quot;.getBytes(),(&quot;&quot;+rand.nextInt(100)).getBytes());
            put.addColumn(&quot;base&quot;.getBytes(),&quot;gender&quot;.getBytes(),(i%2==0?&quot;男&quot;:&quot;女&quot;).getBytes());
            put.addColumn(&quot;base&quot;.getBytes(),&quot;say&quot;.getBytes(),&quot;51CTO博客已为您找到关于java 设置指定时间运行的相关内容,包含IT学习相关文档代码介绍、相关教程视频课程,以及java 设置指定时间运行问答内容。更多java 设置指定时间运行&quot;.getBytes());
            bm.mutate(put);
        &#125;
//        bm.flush();
        bm.close();
        connection.close();
    &#125;
&#125;

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### （五）进阶学习</span><br><span class="line"></span><br><span class="line">#### 1.Region管理</span><br><span class="line"></span><br><span class="line">- Region拆分</span><br><span class="line">  - 当一个Region大到一定程度，会进行分裂(split)</span><br><span class="line">  - HBase可以通过Region Split达到负载均衡</span><br><span class="line">  - Region默认大小10G</span><br><span class="line">- Region合并</span><br><span class="line">  - 如果删除了大量数据，很多Region变小，这时候分成多个Region就很浪费，可以把Region合并起来，Region的合并不是为了性能考虑，主要是出于维护的目的</span><br><span class="line">- Region的拆分要重计算row_key，所以动态分不好，事先分区比较好。即为***预分区***</span><br><span class="line"></span><br><span class="line">##### A.Region预分区</span><br><span class="line"></span><br><span class="line">- 将数据分布在多Region上，防止自动分区，默认10G，每个表2、3列簇。要设计Row_key，**默认是按照Ascii来的**</span><br><span class="line"></span><br><span class="line">- 创建预分区，三个数字四个区，|是124，因此比前面数字小于等于的都会在左边，并非是数字，而是字符</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
create &#39;mydemo:uuu&#39;,&#39;base&#39;,&#123;SPLITS=&gt;[&#39;0|&#39;,&#39;1|&#39;,&#39;2|&#39;]&#125;
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 插入一条数据</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
put &#39;mydemo:uuu&#39;,&#39;012356bds&#39;,&#39;base:name&#39;,&#39;zs&#39;
</code></pre>
<p>结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240722174111986.png"
                      alt="image-20240722174111986"
                ></p>
</li>
</ul>
<h5 id="B-预分区Row-key设计"><a href="#B-预分区Row-key设计" class="headerlink" title="B.预分区Row_key设计"></a>B.<strong>预分区Row_key设计</strong></h5><ul>
<li>(防止数据热点)</li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Bigdata</tag>
        <tag>Hive</tag>
        <tag>Hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据学习笔记3-Scala</title>
    <url>/2025/05/27/technology/bigdata/Hadoop3-Scala/</url>
    <content><![CDATA[<p>Hadoop3</p>
<h1 id="九-Scala"><a href="#九-Scala" class="headerlink" title="九.Scala"></a>九.Scala</h1><h2 id="一-前期"><a href="#一-前期" class="headerlink" title="(一)前期"></a>(一)前期</h2><ul>
<li>数据分析专用语言</li>
<li>源自Java<ul>
<li>构建在JVM上</li>
<li>与Java兼容、互通</li>
</ul>
</li>
<li>优势<ul>
<li>多范式编程：面向对象、函数式</li>
<li>表达能力强，代码精简</li>
</ul>
</li>
<li>大数据Scala<ul>
<li>Spark采用Scala语言设计</li>
<li>提供的API更加优雅</li>
<li>基于JVM的语言更融入Hadoop生态圈</li>
</ul>
</li>
</ul>
<h2 id="二-内容介绍"><a href="#二-内容介绍" class="headerlink" title="(二)内容介绍"></a>(二)内容介绍</h2><ul>
<li>一般要idea和终端配合使用</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723110635874.png"
                      alt="image-20240723110635874"
                ></li>
</ul>
<h2 id="三-开发环境搭建"><a href="#三-开发环境搭建" class="headerlink" title="(三)开发环境搭建"></a>(三)开发环境搭建</h2><ul>
<li>2.11.8版本配合后面Spark</li>
</ul>
<ol>
<li><p>语言安装</p>
<p>对于scala-2.11.8.msi，一路往后next就行了</p>
</li>
<li><p>进入cmd</p>
<p>scala看是否能用</p>
</li>
<li><p>idea中安装插件</p>
<ul>
<li><p>联机安装，在前面的界面中Plugins找Scala插件install</p>
</li>
<li><p>离线安装，自己找方法去，找到zip和jar后(要对应好idea的相应版本)，Settings-&gt;Plugins-&gt;Install plugin from disk</p>
<p><a class="link"   href="https://plugins.jetbrains.com/plugin/1347-scala" >https://plugins.jetbrains.com/plugin/1347-scala<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
</li>
</ol>
<h2 id="四-基础语法"><a href="#四-基础语法" class="headerlink" title="(四)基础语法"></a>(四)基础语法</h2><h3 id="1-初次使用"><a href="#1-初次使用" class="headerlink" title="1.初次使用"></a>1.初次使用</h3><h4 id="A-建立idea-scala工程"><a href="#A-建立idea-scala工程" class="headerlink" title="A.建立idea scala工程"></a>A.建立idea scala工程</h4><ol>
<li>仍然使用Maven-quickstart，因为Scala的选项全用国外源</li>
<li>三处版本改好</li>
<li>在main中右键新建一个scala目录</li>
<li>右击scala目录，Mark Directory As-&gt;Resources Root</li>
<li>alt ctrl shift s -&gt;Libraries-&gt;+号-&gt;加入scala-sdk-&gt;ok-&gt;ok</li>
</ol>
<h4 id="B-第一个Scala对象"><a href="#B-第一个Scala对象" class="headerlink" title="B.第一个Scala对象"></a>B.第一个Scala对象</h4><ol>
<li><p>右击scala包，scala class-&gt;<code>com.njupt.firstscala.First</code>要选Object</p>
</li>
<li><p>main回车会直接跳出来，写下hello world</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.firstscala</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">First</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello,world!!!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Unit那是返回值，相当于void，&#x3D;是固定语法</p>
</li>
<li><p>调用Java中的函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723103410534.png"
                      alt="image-20240723103410534"
                ></p>
<ul>
<li>scala调用Java</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kkk</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">First</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> app = <span class="keyword">new</span> <span class="type">App1</span>();</span><br><span class="line">    app.kkk(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">    println(<span class="string">&quot;Hello,world!!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>Java调用Scala</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">First</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">xxx</span></span>(name:<span class="type">String</span>):<span class="type">String</span>=&#123;</span><br><span class="line">    <span class="keyword">return</span> name+<span class="string">&quot;，你坏！！&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">&quot;Hello World!&quot;</span> + First.xxx(<span class="string">&quot;张无忌&quot;</span>) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>First是一个对象，不用创建直接调用</p>
</li>
</ul>
</li>
</ol>
<h4 id="c-流式语法初试"><a href="#c-流式语法初试" class="headerlink" title="c.流式语法初试"></a>c.流式语法初试</h4><ul>
<li><p>对于数组每一个加2，过滤出偶数，然后逐行输出</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> arr=<span class="type">Array</span>(<span class="number">1</span>,<span class="number">22</span>,<span class="number">13</span>,<span class="number">56</span>,<span class="number">78</span>,<span class="number">77</span>);</span><br><span class="line">    arr.map(x=&gt;x+<span class="number">2</span>).filter(x=&gt;x%<span class="number">2</span>==<span class="number">0</span>).foreach(println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-关键字表"><a href="#2-关键字表" class="headerlink" title="2.关键字表"></a>2.关键字表</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723113048949.png"
                      alt="image-20240723113048949"
                ></p>
<h3 id="3-变量与常量"><a href="#3-变量与常量" class="headerlink" title="3.变量与常量"></a>3.变量与常量</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723112629251.png"
                      alt="image-20240723112629251" style="zoom:50%;" 
                >

<ul>
<li><p>例子 变量</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a:<span class="type">Int</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>; <span class="comment">// 也行</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>例子 常量</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> b:<span class="type">Int</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">val</span> b=<span class="number">20</span>; <span class="comment">// 也行</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>内部有类型识别器会自动识别</p>
</li>
</ul>
<h3 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.数据类型"></a>4.数据类型</h3><h5 id="A-包装类型"><a href="#A-包装类型" class="headerlink" title="A.包装类型"></a>A.包装类型</h5><ul>
<li>Scala认为一切皆对象，因此<strong>首字母全都是大写</strong>，比Java还纯粹，Java中是基本类型，Scala是包装类型。</li>
<li>变量底下有很多很多方法，连基本运算都是方法。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723113440788.png"
                      alt="image-20240723113440788"
                ></p>
<h5 id="B-数据类型层次结构"><a href="#B-数据类型层次结构" class="headerlink" title="B.数据类型层次结构"></a>B.数据类型层次结构</h5><ul>
<li><p>图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723114006302.png"
                      alt="image-20240723114006302"
                ></p>
</li>
</ul>
<h3 id="5-字符串插值器"><a href="#5-字符串插值器" class="headerlink" title="5.字符串插值器"></a>5.字符串插值器</h3><ul>
<li><p>s型插值器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723114610274.png"
                      alt="image-20240723114610274"
                ></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name2=<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">println(<span class="string">s&quot;<span class="subst">$&#123;name&#125;</span>和<span class="subst">$&#123;name2&#125;</span>是朋友&quot;</span>)</span><br><span class="line"><span class="comment">// 结果：张三和李四是朋友</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="6-判断语句"><a href="#6-判断语句" class="headerlink" title="6.判断语句"></a>6.判断语句</h3><h5 id="A-if语句"><a href="#A-if语句" class="headerlink" title="A.if语句"></a>A.if语句</h5><ul>
<li><p>和Java一样直接用</p>
</li>
<li><p>并且支持如下语法，Scala中<em><strong>不支持三元表达式</strong></em></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> res = <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">2</span>;</span><br><span class="line">println(res);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="B-while"><a href="#B-while" class="headerlink" title="B.while"></a>B.while</h5><ul>
<li>和Java一样用，<code>do...while</code>也没有区别</li>
</ul>
<h5 id="C-for循环"><a href="#C-for循环" class="headerlink" title="C.for循环"></a>C.for循环</h5><ul>
<li><p>图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723115123313.png"
                      alt="image-20240723115123313"
                ></p>
<p>to是<code>1&lt;=i&lt;=num</code></p>
<p>until是<code>1&lt;=i&lt;num</code></p>
<p><strong>by后面跟着的是步长</strong></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是10-5输出 步长为-1</span></span><br><span class="line"><span class="keyword">for</span>(g:<span class="type">Int</span> &lt;- <span class="number">10</span> to <span class="number">5</span> by <span class="number">-1</span>) &#123;</span><br><span class="line">    println(g);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>&lt;-</code>这个是个组合符号</p>
</li>
<li><p>foreach用法</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> arr=<span class="type">Array</span>(<span class="number">1</span>,<span class="number">22</span>,<span class="number">13</span>,<span class="number">56</span>,<span class="number">78</span>,<span class="number">77</span>);</span><br><span class="line"><span class="keyword">for</span>(i:<span class="type">Int</span> &lt;- arr) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>for循环过滤</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i:<span class="type">Int</span> &lt;- <span class="number">1</span> to <span class="number">10</span> ; <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">    print(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出246810</span></span><br></pre></td></tr></table></figure></div>

<p>后面可以跟着多条件，这些条件相当于是&amp;&amp;的关系</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i:<span class="type">Int</span> &lt;- <span class="number">1</span> to <span class="number">10</span> ; <span class="keyword">if</span> 条件<span class="number">1</span>; <span class="keyword">if</span> 条件<span class="number">2</span>……)&#123;&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="D-中断"><a href="#D-中断" class="headerlink" title="D.中断"></a>D.中断</h5><ul>
<li><p>break</p>
<p>要导入包才可以用</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.util.control.<span class="type">Breaks</span>.<span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span>(i:<span class="type">Int</span> &lt;- arr) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    print(i+<span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者break()也行，但是不管怎么样都会抛出错误，因此应该</span></span><br><span class="line"><span class="keyword">import</span> scala.util.control.<span class="type">Breaks</span>.&#123;<span class="keyword">break</span>, breakable&#125;</span><br><span class="line">breakable&#123;</span><br><span class="line">    <span class="keyword">for</span>(i:<span class="type">Int</span> &lt;- arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        print(i+<span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>breakable相当于规定了<strong>跳转的位置</strong></p>
<p><strong>因此可以如下替代<em>continue</em>的用法，scala中没有continue</strong></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i:<span class="type">Int</span> &lt;- arr) &#123;</span><br><span class="line">    breakable&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>) <span class="keyword">break</span>();</span><br><span class="line">        print(i+<span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="E-match"><a href="#E-match" class="headerlink" title="E.match"></a>E.match</h5><p>相当于Java 的switch，但是功能有增强。<code>_</code>相当于其他</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; arr.groupBy(x=&gt;&#123;</span><br><span class="line">     |   x <span class="keyword">match</span> &#123;</span><br><span class="line">     |     <span class="keyword">case</span> i <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span> =&gt; <span class="string">&quot;even&quot;</span></span><br><span class="line">     |     <span class="keyword">case</span> _ =&gt; <span class="string">&quot;odd&quot;</span></span><br><span class="line">     |   &#125;</span><br><span class="line">     | &#125;)</span><br><span class="line">res2: scala.collection.immutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Map</span>(odd -&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">3435</span>, <span class="number">89</span>), even -&gt; <span class="type">Array</span>(<span class="number">22</span>, <span class="number">56</span>, <span class="number">8</span>))</span><br><span class="line">scala&gt; arr.groupBy(x=&gt;x <span class="keyword">match</span>&#123;</span><br><span class="line">     |   <span class="keyword">case</span> i <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span> =&gt; <span class="string">&quot;even&quot;</span></span><br><span class="line">     |   <span class="keyword">case</span> _ =&gt; <span class="string">&quot;odd&quot;</span></span><br><span class="line">     | &#125;)</span><br><span class="line">res3: scala.collection.immutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Map</span>(odd -&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">3435</span>, <span class="number">89</span>), even -&gt; <span class="type">Array</span>(<span class="number">22</span>, <span class="number">56</span>, <span class="number">8</span>))</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><strong>模式匹配</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726111454623.png"
                      alt="image-20240726111454623"
                ></p>
<ul>
<li>模式后面加if是<strong>模式守卫</strong></li>
</ul>
</li>
<li><p><strong>可用于类型判定</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726111548345.png"
                      alt="image-20240726111548345" style="zoom:50%;" 
                >
</li>
<li><p><strong>可用于样例类内部值直接判定</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726111636916.png"
                      alt="image-20240726111636916" style="zoom:50%;" 
                >

<ul>
<li>例1 找到了sid为”zs”的，并且提取了他的birthday，gender值</li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> zs = <span class="type">Student</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;zs&quot;</span>, <span class="string">&quot;1999-10-12&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">zs <span class="keyword">match</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Student</span>(sid,<span class="string">&quot;zs&quot;</span>,birthday,gender)=&gt;println(<span class="string">s&quot;看到张三了<span class="subst">$&#123;birthday&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _=&gt;println(<span class="string">&quot;没有找到&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 看到张三了1999-10-12</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>例2 模式守卫</li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">zs <span class="keyword">match</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Student</span>(sid,<span class="string">&quot;zs&quot;</span>,birthday,gender) <span class="keyword">if</span> birthday.toInt&gt;=<span class="number">10</span> =&gt;println(<span class="string">s&quot;看到张三了<span class="subst">$&#123;birthday&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _=&gt;println(<span class="string">&quot;没有找到&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>例3 由这个知道，<strong>样例类自带unapply，但是普通类没有，需要自己去实现。而match匹配输出靠的就是unapply</strong></li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> (<span class="params">_name:<span class="type">String</span>,_age:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name=_name;</span><br><span class="line">  <span class="keyword">val</span> age=_age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(_name: <span class="type">String</span>, _age: <span class="type">Int</span>): <span class="type">Customer</span> = <span class="keyword">new</span> <span class="type">Customer</span>(_name, _age)</span><br><span class="line">    <span class="comment">//  def unapply(arg: Customer): Option[(String, Int)] = &#123;</span></span><br><span class="line"><span class="comment">//    if(arg ==null)</span></span><br><span class="line"><span class="comment">//      None</span></span><br><span class="line"><span class="comment">//    else</span></span><br><span class="line"><span class="comment">//      Some(arg.name,arg.age)</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">    <span class="comment">// 没这个就会出下面的错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> customer = <span class="type">Customer</span>(<span class="string">&quot;zs&quot;</span>, <span class="number">20</span>)</span><br><span class="line">    customer <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Customer</span>(name,age) =&gt;println(<span class="string">s&quot;<span class="subst">$&#123;name&#125;</span>,<span class="subst">$&#123;age&#125;</span>&quot;</span>) <span class="comment">// 这边出错了，找不到unapply</span></span><br><span class="line">      <span class="keyword">case</span> _=&gt;println(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="7-Scala函数"><a href="#7-Scala函数" class="headerlink" title="7.Scala函数"></a>7.Scala函数</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240725113929142.png"
                      alt="image-20240725113929142"
                ></p>
<ul>
<li>不用return ，直接把要返回的内容放最下面</li>
<li>函数字面量其实就是函数名，类字面量是类的属性</li>
</ul>
<h5 id="A-参数传递与高阶函数"><a href="#A-参数传递与高阶函数" class="headerlink" title="A.参数传递与高阶函数"></a>A.参数传递与高阶函数</h5><ul>
<li><p>传值调用(call-by-value)		传名调用(call-bh)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240725114141786.png"
                      alt="image-20240725114141786"
                ></p>
</li>
<li><p><em><strong>高阶函数</strong></em>：参数可以为函数</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">abc</span></span>(f:(<span class="type">String</span>,<span class="type">Int</span>) =&gt;<span class="type">String</span>) =&#123;</span><br><span class="line">    <span class="keyword">val</span> res = f(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>)</span><br><span class="line">    println(res)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ab</span></span>(x:<span class="type">String</span>,y:<span class="type">Int</span>):<span class="type">String</span>=&#123;</span><br><span class="line">    <span class="string">&quot;Hello,&quot;</span>+x+<span class="string">&quot;,&quot;</span>+y.toString</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    abc(ab)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 Hello,李四,20  abc是高阶函数</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><code>f:(String,Int) =&gt;String</code>代表，传入的参数是个函数，<code>(String,Int)</code>是传入函数的参数列表，<code>=&gt;String</code>，这一段成为ab的方法原型</p>
<p>上面图中<code>f:=&gt;Int</code>是传入无参函数，输出为Int类型</p>
</li>
</ul>
</li>
</ul>
<h5 id="B-参数可设置默认值"><a href="#B-参数可设置默认值" class="headerlink" title="B.参数可设置默认值"></a>B.参数可设置默认值</h5><div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab</span></span>(x:<span class="type">String</span>=<span class="string">&quot;pty&quot;</span>,y:<span class="type">Int</span>=<span class="number">13</span>):<span class="type">String</span>=&#123;</span><br><span class="line">  <span class="string">&quot;Hello,&quot;</span>+x+<span class="string">&quot;,&quot;</span>+y.toString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="C-匿名函数"><a href="#C-匿名函数" class="headerlink" title="C.匿名函数"></a>C.匿名函数</h5><div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span></span>(f:(<span class="type">String</span>,<span class="type">Int</span>) =&gt;<span class="type">String</span>) =&#123;</span><br><span class="line">    <span class="keyword">val</span> res = f(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>)</span><br><span class="line">    println(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//    abc(ab)</span></span><br><span class="line">    abc((x,y)=&gt;&#123;</span><br><span class="line">        <span class="string">s&quot;Hello,<span class="subst">$&#123;x&#125;</span>,<span class="subst">$&#123;y&#125;</span>&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>abc包括的部分，如下，就是匿名函数，实际上就是Java中的Lambda表达式</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">(x,y)=&gt;&#123;</span><br><span class="line">    <span class="string">s&quot;Hello,<span class="subst">$&#123;x&#125;</span>,<span class="subst">$&#123;y&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="D-函数嵌套"><a href="#D-函数嵌套" class="headerlink" title="D.函数嵌套"></a>D.函数嵌套</h5><ul>
<li>函数里可以包含方法，但是出了外层就不可用了</li>
<li>不建议使用</li>
</ul>
<h5 id="E-函数柯里化"><a href="#E-函数柯里化" class="headerlink" title="E.函数柯里化"></a>E.函数柯里化</h5><ul>
<li><p>每个参数都加个小括号</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span></span>(n:<span class="type">Int</span>)(n2:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</span><br><span class="line">  n+n2</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(mod(<span class="number">10</span>)(<span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可用于方法重载</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span></span>(n:<span class="type">Int</span>)(n2:<span class="type">Int</span>)=&#123;</span><br><span class="line">    n+n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod1</span></span>(n:<span class="type">Int</span>)=mod(n)(<span class="number">20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod2</span></span>(n2:<span class="type">Int</span>)=mod(<span class="number">10</span>)(n2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(mod1(<span class="number">10</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="F-隐式参数"><a href="#F-隐式参数" class="headerlink" title="F.隐式参数"></a>F.隐式参数</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240725144446418.png"
                      alt="image-20240725144446418"
                ></p>
<ul>
<li><p><strong>不管是全局还是局部只能有一个类型相似的隐式参数</strong>，如在这儿是个Int型，那么整个类中只能有这一个Int型的隐式参数</p>
</li>
<li><p>和柯里化结合，会对最后一整个小括号里所有生效</p>
</li>
<li><p>例子</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CurryingTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">implicit</span> <span class="keyword">var</span> abc:<span class="type">Int</span>=<span class="number">20</span> <span class="comment">// 不管全局还是局部一个类中只能一个同类型的隐式参数</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mod</span></span>(n:<span class="type">Int</span>)(<span class="keyword">implicit</span> n2:<span class="type">Int</span>)=&#123;</span><br><span class="line">    n+n2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(mod(<span class="number">10</span>)) <span class="comment">// 出30</span></span><br><span class="line">    println(mod(<span class="number">10</span>)(<span class="number">40</span>)) <span class="comment">// 出50</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>隐藏了方法</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tools</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">genericNum</span></span>(str:<span class="type">String</span>,i:<span class="type">Int</span>)=&#123;</span><br><span class="line">    str.hashCode()%i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CurryingTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">implicit</span> <span class="keyword">var</span> abc1:<span class="type">Tools</span>=<span class="keyword">new</span> <span class="type">Tools</span>()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">mod</span></span>(str:<span class="type">String</span>)(<span class="keyword">implicit</span> gn:<span class="type">Tools</span>) = &#123;</span><br><span class="line">    gn.genericNum(str,<span class="number">3</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(mod(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="G-隐式函数"><a href="#G-隐式函数" class="headerlink" title="G.隐式函数"></a>G.隐式函数</h5><ul>
<li><p>隐式函数也称隐式转换，使用implicit修饰的函数</p>
</li>
<li><p>应用场景</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240725153703103.png"
                      alt="image-20240725153703103" style="zoom: 50%;" 
                >
</li>
<li><p>例子</p>
<p>本来<code>true+20</code>是不可以的，但是隐式函数让Boolean类型的直接转换了</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">fti</span></span>(x:<span class="type">Boolean</span>)=<span class="keyword">if</span>(x) <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//    println(mod(&quot;hello&quot;))</span></span><br><span class="line">    <span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line">    println(flag+num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>任何值无法执行都变为数字，<strong>只有出错时才会调用隐式函数</strong></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">stn</span></span>(x:<span class="type">Any</span>)=x.toString.toInt</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="H-函数闭包"><a href="#H-函数闭包" class="headerlink" title="H.函数闭包"></a>H.函数闭包</h5><ul>
<li><p>变量型的函数</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc=</span></span>(str:<span class="type">String</span>)=&gt;&#123;</span><br><span class="line">    <span class="string">s&quot;Hello,<span class="subst">$&#123;str&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(abc(<span class="string">&quot;sfdf&quot;</span>))</span><br><span class="line"><span class="comment">// Hello,sfdf</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>尽量不要用</p>
</li>
</ul>
<h2 id="五-数组、元组与集合"><a href="#五-数组、元组与集合" class="headerlink" title="(五)数组、元组与集合"></a>(五)数组、元组与集合</h2><ul>
<li>scala中的语法：方法中只有一个参数可以省略<code>.</code>和<code>()</code></li>
<li>Map往往要用二元组来变化或者输出</li>
<li>scala算子，类似于流处理</li>
<li><code>String*</code>类型的传值除了<code>&quot;a&quot;,&quot;b&quot;</code>，还可以<code>数组:_*</code></li>
</ul>
<h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h3><ul>
<li><p>这边用的都是小括号来判断</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723142858382.png"
                      alt="image-20240723142858382"
                ></p>
</li>
<li><p><a href="https://blog.csdn.net/zyp13781913772/article/details/81428862"><em><strong>数组方法</strong></em></a></p>
<p>在终端中看</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> arr=<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">656</span>,<span class="number">32</span>,<span class="number">76</span>,<span class="number">1</span>)</span><br><span class="line">arr.按<span class="type">Tab</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>迭代器用foreach来读取，Some(1)诸如此类用get来获取</p>
</li>
<li><p><code>def ++[B &gt;: Int, That](that: scala.collection.GenTraversableOnce[B])(implicit bf: scala.collection.generic.CanBuildFrom[Array[Int],B,That]): That</code></p>
<p>B和That都是泛型，但B要至少Int型的，即为Long。byte和short不可用。后面跟着个集合。集合的合并</p>
<ul>
<li>下面包括的其他知识点：<ul>
<li>偏函数</li>
</ul>
</li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">arr.++(<span class="type">Array</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>))</span><br><span class="line"><span class="comment">//输出res0: Array[Int] = Array(1, 2, 3, 656, 32, 76, 1, 3, 5, 7)</span></span><br><span class="line">arr.++(<span class="type">Array</span>(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>))</span><br><span class="line"><span class="comment">// 输出res1: Array[Any] = Array(1, 2, 3, 656, 32, 76, 1, aa, bb)</span></span><br><span class="line">arr ++ <span class="type">Array</span>(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>)</span><br><span class="line"><span class="comment">// res2: Array[Any] = Array(1, 2, 3, 656, 32, 76, 1, aa, bb)</span></span><br><span class="line">arr ++ <span class="string">&quot;cc&quot;</span></span><br><span class="line"><span class="comment">// res3: Array[AnyVal] = Array(1, 2, 3, 656, 32, 76, 1, c, c)</span></span><br><span class="line">arr ++ <span class="number">100</span></span><br><span class="line"><span class="comment">// 错误输出</span></span><br><span class="line">scala&gt; <span class="number">10</span> +: arr</span><br><span class="line">res6: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">656</span>, <span class="number">32</span>, <span class="number">76</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; arr :+ <span class="number">10</span></span><br><span class="line">res7: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">656</span>, <span class="number">32</span>, <span class="number">76</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; lst ++: arr</span><br><span class="line">res8: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">656</span>, <span class="number">32</span>, <span class="number">76</span>, <span class="number">1</span>)</span><br><span class="line">scala&gt; arr++: lst</span><br><span class="line">res9: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">656</span>, <span class="number">32</span>, <span class="number">76</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">68</span>, <span class="number">90</span>)</span><br><span class="line"><span class="comment">//**`:`在的位置即为数组在的位置**，冒号右边的集合决定最终的结合</span></span><br><span class="line"><span class="comment">// 光++也可以，而且以左边的为最终类型</span></span><br><span class="line"></span><br><span class="line">(<span class="number">0</span> /: arr)(_+_)</span><br><span class="line">res10: <span class="type">Int</span> = <span class="number">771</span> <span class="comment">// 左子树相加，把数组里的内容全部相加</span></span><br><span class="line">(<span class="number">1</span> /: arr)(_*_)</span><br><span class="line">res12: <span class="type">Int</span> = <span class="number">9572352</span> <span class="comment">// 左子树相乘，把数组里的内容全部相乘，前面的值是初始值</span></span><br><span class="line">(arr :\ <span class="number">0</span>)(_+_)</span><br><span class="line">res13: <span class="type">Int</span> = <span class="number">771</span> <span class="comment">// 右子树相加，从右加到左</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> sbi = <span class="keyword">new</span> <span class="type">StringBuilder</span>()</span><br><span class="line">sbi: <span class="type">StringBuilder</span> =</span><br><span class="line">scala&gt;  arr.addString(sbi)</span><br><span class="line">res14: <span class="type">StringBuilder</span> = <span class="number">12365632761</span> <span class="comment">// 化为字符串相连</span></span><br><span class="line"></span><br><span class="line">scala&gt; arr.mkString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">res15: <span class="type">String</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">656</span>,<span class="number">32</span>,<span class="number">76</span>,<span class="number">1</span> <span class="comment">// 转为字符串，而且还可以设置分隔符</span></span><br></pre></td></tr></table></figure></div>

<p><code>：</code>始终对着集合</p>
</li>
<li><p><code>arr1.par.aggregate(10)(am,bm)</code>10会成为第一个函数的第一个参数，每一个值是第一个函数中第二个值。第二个函数是前面计算结果的数组中的所有值，是<strong>多线程</strong>，一定要加这个par</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240723152515201.png"
                      alt="image-20240723152515201"
                ></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> arr1=<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">arr1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">am</span></span>(num1:<span class="type">Int</span>,num2:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</span><br><span class="line">    | println(<span class="string">s&quot;<span class="subst">$&#123;num1&#125;</span>+<span class="subst">$&#123;num2&#125;</span>&quot;</span>)</span><br><span class="line">    | <span class="keyword">return</span> num1+num2;</span><br><span class="line">    | &#125;</span><br><span class="line">am: (num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)<span class="type">Int</span></span><br><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">bm</span></span>(num1:<span class="type">Int</span>,num2:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</span><br><span class="line">    | println(<span class="string">s&quot;bm:<span class="subst">$&#123;num1&#125;</span>+<span class="subst">$&#123;num2&#125;</span>=<span class="subst">$&#123;num1+num2&#125;</span>&quot;</span>)</span><br><span class="line">    | <span class="keyword">return</span> num1+num2;</span><br><span class="line">    | &#125;</span><br><span class="line">bm: (num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)<span class="type">Int</span></span><br><span class="line">scala&gt; arr1.aggregate(<span class="number">10</span>)(am,bm)</span><br><span class="line"><span class="number">10</span>+<span class="number">1</span></span><br><span class="line"><span class="number">11</span>+<span class="number">2</span></span><br><span class="line"><span class="number">13</span>+<span class="number">3</span></span><br><span class="line"><span class="number">16</span>+<span class="number">4</span></span><br><span class="line"><span class="number">20</span>+<span class="number">5</span></span><br><span class="line">res16: <span class="type">Int</span> = <span class="number">25</span></span><br><span class="line">scala&gt; arr1.par.aggregate(<span class="number">10</span>)(am,bm)</span><br><span class="line"><span class="comment">// 下面这些顺序都不一定</span></span><br><span class="line"><span class="number">10</span>+<span class="number">4</span></span><br><span class="line"><span class="number">10</span>+<span class="number">2</span></span><br><span class="line"><span class="number">10</span>+<span class="number">3</span></span><br><span class="line"><span class="number">10</span>+<span class="number">1</span></span><br><span class="line"><span class="number">10</span>+<span class="number">5</span></span><br><span class="line">bm:<span class="number">11</span>+<span class="number">12</span>=<span class="number">23</span></span><br><span class="line">bm:<span class="number">14</span>+<span class="number">15</span>=<span class="number">29</span></span><br><span class="line">bm:<span class="number">13</span>+<span class="number">29</span>=<span class="number">42</span></span><br><span class="line">bm:<span class="number">23</span>+<span class="number">42</span>=<span class="number">65</span></span><br><span class="line">res17: <span class="type">Int</span> = <span class="number">65</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面这些过程，可以简化为下面的</span></span><br><span class="line">scala&gt; arr1.par.aggregate(<span class="number">10</span>)(_+_,_+_)</span><br><span class="line">res48: <span class="type">Int</span> = <span class="number">65</span></span><br><span class="line"><span class="comment">// 但是结果不一定为65出错，因为多线程太快了，而前面的每步骤print减缓了速度，大部分情况都是对的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//apply 取值操作</span></span><br><span class="line">scala&gt; arr1(<span class="number">2</span>)</span><br><span class="line">res83: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line">scala&gt; arr1.apply(<span class="number">2</span>)</span><br><span class="line">res84: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//charAt 按数字取字符</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="type">Array</span>(&#x27;a&#x27;,&#x27;c&#x27;,&#x27;d&#x27;)</span><br><span class="line">str: <span class="type">Array</span>[<span class="type">Char</span>] = <span class="type">Array</span>(a, c, d)</span><br><span class="line">scala&gt; str.charAt(<span class="number">1</span>)</span><br><span class="line">res85: <span class="type">Char</span> = c</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值只是地址</span></span><br><span class="line">scala&gt; <span class="keyword">var</span> arr2=arr1</span><br><span class="line">arr2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">scala&gt; arr2(<span class="number">2</span>)=<span class="number">100</span></span><br><span class="line">scala&gt; arr1</span><br><span class="line">res89: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 用clone()就会出新的</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> arr2=arr1.clone()</span><br><span class="line">arr2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">scala&gt; arr2(<span class="number">1</span>)=<span class="number">44</span></span><br><span class="line">scala&gt; arr1</span><br><span class="line">res91: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">scala&gt; arr2</span><br><span class="line">res92: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">44</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>collect，内部为偏心函数<code>PartialFunction</code>，只要某些值 可对多种不同的if内部数据进行处理和输出。只处理部分</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 只要偶数，并且将偶数*10</span></span><br><span class="line">  scala&gt; arr1</span><br><span class="line">  res93: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.collect&#123;<span class="keyword">case</span> x <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)=&gt;x*<span class="number">10</span>&#125;</span><br><span class="line">  res94: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">20</span>, <span class="number">1000</span>, <span class="number">40</span>)</span><br><span class="line">  scala&gt; arr1.collect(&#123;<span class="keyword">case</span> x <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)=&gt;x*<span class="number">10</span>&#125;)</span><br><span class="line">  res95: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">20</span>, <span class="number">1000</span>, <span class="number">40</span>)</span><br><span class="line">  <span class="comment">// 使用偏心函数</span></span><br><span class="line">  scala&gt; <span class="keyword">val</span> pianxin:<span class="type">PartialFunction</span>[<span class="type">Int</span>,<span class="type">Int</span>]=&#123;</span><br><span class="line">       |  <span class="keyword">case</span> x <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>) =&gt; x*<span class="number">10</span></span><br><span class="line">       |  <span class="keyword">case</span> x=&gt;x+<span class="number">3</span></span><br><span class="line">       | &#125;</span><br><span class="line">  pianxin: <span class="type">PartialFunction</span>[<span class="type">Int</span>,<span class="type">Int</span>] = &lt;function1&gt;</span><br><span class="line">  scala&gt; arr1.collect(pianxin)</span><br><span class="line">  res96: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">4</span>, <span class="number">20</span>, <span class="number">1000</span>, <span class="number">40</span>, <span class="number">8</span>)</span><br><span class="line">  scala&gt; arr1.collect(&#123;<span class="keyword">case</span> x <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)=&gt;x*<span class="number">10</span> <span class="keyword">case</span> x <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">1</span>)=&gt;x*<span class="number">100000</span>&#125;)</span><br><span class="line">  res97: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">100000</span>, <span class="number">20</span>, <span class="number">1000</span>, <span class="number">40</span>, <span class="number">500000</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// combinations是将数据按照括号中的数字进行组合，这边是两两组合，出来是个迭代器</span></span><br><span class="line">  scala&gt; arr1.combinations(<span class="number">2</span>).foreach(x=&gt;println(x.mkString(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">  <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">  <span class="number">1</span>,<span class="number">100</span></span><br><span class="line">  <span class="number">1</span>,<span class="number">4</span></span><br><span class="line">  <span class="number">1</span>,<span class="number">5</span></span><br><span class="line">  <span class="number">2</span>,<span class="number">100</span></span><br><span class="line">  <span class="number">2</span>,<span class="number">4</span></span><br><span class="line">  <span class="number">2</span>,<span class="number">5</span></span><br><span class="line">  <span class="number">100</span>,<span class="number">4</span></span><br><span class="line">  <span class="number">100</span>,<span class="number">5</span></span><br><span class="line">  <span class="number">4</span>,<span class="number">5</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 是否在数组中</span></span><br><span class="line">  scala&gt; arr1.contains(<span class="number">100</span>)</span><br><span class="line">  res101: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  scala&gt; arr1.contains(<span class="number">101</span>)</span><br><span class="line">  res102: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 查找序列，而且必须连续，不可相反，必须一模一样</span></span><br><span class="line">  scala&gt; arr1</span><br><span class="line">  res103: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.containsSlice(<span class="type">List</span>(<span class="number">100</span>,<span class="number">2</span>))</span><br><span class="line">  res104: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">  scala&gt; arr1.containsSlice(<span class="type">List</span>(<span class="number">2</span>,<span class="number">100</span>))</span><br><span class="line">  res105: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 数组拷贝</span></span><br><span class="line">  scala&gt; arr1</span><br><span class="line">  res106: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; <span class="keyword">val</span> arr3=<span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">10</span>)</span><br><span class="line">  arr3: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  scala&gt; arr1.copyToArray(arr3,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  scala&gt; arr3</span><br><span class="line">  res108: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//copyToBuffer 拷贝到集合中</span></span><br><span class="line">  scala&gt; <span class="keyword">import</span> scala.collection.mutable.<span class="type">Buffer</span></span><br><span class="line">  <span class="keyword">import</span> scala.collection.mutable.<span class="type">Buffer</span></span><br><span class="line">  scala&gt; <span class="keyword">val</span> bf = <span class="type">Buffer</span>[<span class="type">Int</span>]()</span><br><span class="line">  bf: scala.collection.mutable.<span class="type">Buffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>()</span><br><span class="line">  scala&gt; arr1.copyToBuffer(bf)</span><br><span class="line">  scala&gt; bf</span><br><span class="line">  res113: scala.collection.mutable.<span class="type">Buffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//corresponds 相同数量序列元素一一对比大小，是否符合条件</span></span><br><span class="line">  scala&gt; arr1</span><br><span class="line">  res115: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr2</span><br><span class="line">  res116: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">44</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.corresponds(arr2)(_==_)</span><br><span class="line">  res117: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">  scala&gt; arr1.corresponds(arr2)(_&lt;=_)</span><br><span class="line">  res118: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//count 统计符合条件的总数</span></span><br><span class="line">  scala&gt; arr2.count(x=&gt;x%<span class="number">2</span>==<span class="number">0</span>) 	<span class="comment">// 偶数</span></span><br><span class="line">  res119: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line">  scala&gt; arr2.count(x=&gt;<span class="literal">true</span>)		<span class="comment">// 全部</span></span><br><span class="line">  res120: <span class="type">Int</span> = <span class="number">5</span></span><br><span class="line">  <span class="comment">// arr2.size也是统计整个长度</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//diff 计算当前数组与另一个数组的不同。将当前数组中没有在另一个数组中出现的元素返回</span></span><br><span class="line">  scala&gt; <span class="keyword">val</span> arr4=<span class="type">Array</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">99</span>)</span><br><span class="line">  arr4: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">100</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">99</span>)</span><br><span class="line">  scala&gt; arr1</span><br><span class="line">  res121: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.diff(arr4)</span><br><span class="line">  res122: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)		<span class="comment">// arr1中4没有的</span></span><br><span class="line">  scala&gt; arr1.diff(arr4) ++: arr4.diff(arr1)</span><br><span class="line">  res123: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">99</span>)<span class="comment">// 两张表中不同的部分</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//distinct 去重</span></span><br><span class="line">  scala&gt; <span class="keyword">val</span> arr5=<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">235</span>)</span><br><span class="line">  arr5: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">235</span>)</span><br><span class="line">  scala&gt; arr5.distinct</span><br><span class="line">  res125: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">235</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//drop 功能同 drop，去掉开头几个。dropRight去掉尾部的 n 个元素</span></span><br><span class="line">  scala&gt; arr1</span><br><span class="line">  res126: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.dropRight(<span class="number">2</span>)</span><br><span class="line">  res127: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//dropWhile 只删到第一个不满足条件的数据</span></span><br><span class="line">  arr1.dropWhile(x=&gt;x&lt;<span class="number">50</span>)</span><br><span class="line">  res128: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.dropWhile(x=&gt;x&lt;<span class="number">2</span>)</span><br><span class="line">  res129: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.dropWhile(x=&gt;x&lt;<span class="number">4</span>)</span><br><span class="line">  res130: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//endsWith 是否以某个序列结尾</span></span><br><span class="line">  scala&gt; arr1.endsWith(<span class="type">List</span>(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">  res131: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//exists 是否存在符合条件的</span></span><br><span class="line">  scala&gt; arr1</span><br><span class="line">  res126: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.exists(x=&gt;x&gt;<span class="number">100</span>)</span><br><span class="line">  res133: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">  scala&gt; arr1.exists(x=&gt;x&gt;<span class="number">50</span>)</span><br><span class="line">  res134: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//filter和filterNot 满足条件和不满足的</span></span><br><span class="line">  scala&gt; arr1</span><br><span class="line">  res126: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  scala&gt; arr1.filter(x=&gt;x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">  res135: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">100</span>, <span class="number">4</span>)</span><br><span class="line">  scala&gt; arr1.filterNot(x=&gt;x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">  res136: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//find 第一个满足条件的</span></span><br><span class="line">  scala&gt; arr1.find(x=&gt;x&gt;<span class="number">3</span>)</span><br><span class="line">  res137: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">100</span>)</span><br><span class="line">  scala&gt; arr1.find(x=&gt;x&gt;<span class="number">100</span>)</span><br><span class="line">  res140: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">None</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//flatten 多为数组降维</span></span><br><span class="line">  scala&gt; <span class="keyword">var</span> twoarr=<span class="type">Array</span>(<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="type">Array</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">  twoarr: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="type">Array</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">  scala&gt; twoarr.flatten</span><br><span class="line">  res141: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//flatMap 相当于map再flatten</span></span><br><span class="line">  scala&gt; <span class="keyword">val</span> words=<span class="type">Array</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="string">&quot;Hello spark&quot;</span>)</span><br><span class="line">  words: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="type">Hello</span> world, <span class="type">Hello</span> spark)</span><br><span class="line">  scala&gt; words.map(line=&gt;line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">  res143: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">String</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="type">Hello</span>, world), <span class="type">Array</span>(<span class="type">Hello</span>, spark))</span><br><span class="line">  scala&gt; words.map(line=&gt;line.split(<span class="string">&quot; &quot;</span>)).flatten</span><br><span class="line">  res144: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="type">Hello</span>, world, <span class="type">Hello</span>, spark)</span><br><span class="line">  scala&gt; words.flatMap(line=&gt;line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">res145: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="type">Hello</span>, world, <span class="type">Hello</span>, spark)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// scala中使用map，map中用Some包裹返回时返回None就没有返回</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分组统计单词 元组tuple用_1,_2来出数据，map后flatten</span></span><br><span class="line">  scala&gt; words.flatMap(line=&gt;line.split(<span class="string">&quot; &quot;</span>)).groupBy(x=&gt;x).foreach(x=&gt;println(x._1,x._2.size))</span><br><span class="line">  (spark,<span class="number">1</span>)</span><br><span class="line">(world,<span class="number">1</span>)</span><br><span class="line">  (<span class="type">Hello</span>,<span class="number">2</span>)</span><br><span class="line">  scala&gt; arr.groupBy(x=&gt;&#123;</span><br><span class="line">       |    <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">       |       <span class="string">&quot;even&quot;</span></span><br><span class="line">       |    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       |       <span class="string">&quot;odd&quot;</span></span><br><span class="line">       |    &#125;</span><br><span class="line">       | &#125;)</span><br><span class="line">  res0: scala.collection.immutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Map</span>(odd -&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">3435</span>, <span class="number">89</span>), even -&gt; <span class="type">Array</span>(<span class="number">22</span>, <span class="number">56</span>, <span class="number">8</span>))</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>match相当于Java 的switch，但是功能有增强。<code>_</code>相当于其他。</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; arr</span><br><span class="line">res6: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// groupBy加match</span></span><br><span class="line">scala&gt; arr.groupBy(x=&gt;&#123;</span><br><span class="line">     |   x <span class="keyword">match</span> &#123;</span><br><span class="line">     |     <span class="keyword">case</span> i <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span> =&gt; <span class="string">&quot;even&quot;</span></span><br><span class="line">     |     <span class="keyword">case</span> _ =&gt; <span class="string">&quot;odd&quot;</span></span><br><span class="line">     |   &#125;</span><br><span class="line">     | &#125;)</span><br><span class="line">res2: scala.collection.immutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Map</span>(odd -&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">3435</span>, <span class="number">89</span>), even -&gt; <span class="type">Array</span>(<span class="number">22</span>, <span class="number">56</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">scala&gt; arr.groupBy(x=&gt;x <span class="keyword">match</span>&#123;</span><br><span class="line">     |   <span class="keyword">case</span> i <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span> =&gt; <span class="string">&quot;even&quot;</span></span><br><span class="line">     |   <span class="keyword">case</span> _ =&gt; <span class="string">&quot;odd&quot;</span></span><br><span class="line">     | &#125;)</span><br><span class="line">res3: scala.collection.immutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Map</span>(odd -&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">3435</span>, <span class="number">89</span>), even -&gt; <span class="type">Array</span>(<span class="number">22</span>, <span class="number">56</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按几个元素分组</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res6: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.grouped(<span class="number">3</span>).foreach(x=&gt;println(x.mkString(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line"><span class="number">1</span>,<span class="number">22</span>,<span class="number">3435</span></span><br><span class="line"><span class="number">56</span>,<span class="number">8</span>,<span class="number">89</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否有界限，流是没有界限的</span></span><br><span class="line">scala&gt; arr.hasDefiniteSize</span><br><span class="line">res8: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 看第一个值</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res10: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.head</span><br><span class="line">res11: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> arr1=<span class="type">Array</span>()</span><br><span class="line">arr1: <span class="type">Array</span>[<span class="type">Nothing</span>] = <span class="type">Array</span>()</span><br><span class="line">scala&gt; arr1.head</span><br><span class="line">&lt;console&gt;:<span class="number">13</span>: error: value head is not a member of <span class="type">Array</span>[<span class="type">Nothing</span>]</span><br><span class="line">       arr1.head</span><br><span class="line"><span class="comment">// 无值会出错，因此应该先判断一下</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> arr1:<span class="type">Array</span>[<span class="type">Int</span>]=<span class="type">Array</span>[<span class="type">Int</span>]()</span><br><span class="line">arr1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>()</span><br><span class="line">scala&gt; arr1.headOption</span><br><span class="line">res16: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">None</span></span><br><span class="line"></span><br><span class="line">scala&gt; arr.headOption</span><br><span class="line">res18: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">1</span>)</span><br><span class="line">scala&gt; arr.headOption.get</span><br><span class="line">res19: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找数据位置</span></span><br><span class="line">scala&gt; arr.indexOf(<span class="number">3234</span>)</span><br><span class="line">res20: <span class="type">Int</span> = <span class="number">-1</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res21: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.indexOf(<span class="number">3435</span>)</span><br><span class="line">res22: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列所在位置</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res21: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.indexOfSlice(<span class="type">Array</span>(<span class="number">3435</span>,<span class="number">22</span>))</span><br><span class="line">res24: <span class="type">Int</span> = <span class="number">-1</span></span><br><span class="line">scala&gt; arr.indexOfSlice(<span class="type">Array</span>(<span class="number">22</span>,<span class="number">3435</span>))</span><br><span class="line">res25: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 满足条件的第一个值的下标</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res27: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.indexWhere(x=&gt;x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">res26: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找离0.25最近的点</span></span><br><span class="line">scala&gt; <span class="keyword">var</span> my=<span class="type">Array</span>(<span class="number">0.21169</span>,  <span class="number">0.61391</span>, <span class="number">0.6341</span>, <span class="number">0.0131</span>, <span class="number">0.16541</span>,  <span class="number">0.5645</span>,  <span class="number">0.5742</span>)</span><br><span class="line">my: <span class="type">Array</span>[<span class="type">Double</span>] = <span class="type">Array</span>(<span class="number">0.21169</span>, <span class="number">0.61391</span>, <span class="number">0.6341</span>, <span class="number">0.0131</span>, <span class="number">0.16541</span>, <span class="number">0.5645</span>, <span class="number">0.5742</span>)</span><br><span class="line">scala&gt; my.map(x=&gt;(x<span class="number">-0.52</span>).abs).min</span><br><span class="line">res32: <span class="type">Double</span> = <span class="number">0.044499999999999984</span></span><br><span class="line">scala&gt; my(res31.indexWhere(x=&gt;x==res32))</span><br><span class="line">res34: <span class="type">Double</span> = <span class="number">0.5645</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回下标</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res35: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.indices</span><br><span class="line">res36: scala.collection.immutable.<span class="type">Range</span> = <span class="type">Range</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉最后一个数</span></span><br><span class="line">scala&gt; my</span><br><span class="line">res37: <span class="type">Array</span>[<span class="type">Double</span>] = <span class="type">Array</span>(<span class="number">0.21169</span>, <span class="number">0.61391</span>, <span class="number">0.6341</span>, <span class="number">0.0131</span>, <span class="number">0.16541</span>, <span class="number">0.5645</span>, <span class="number">0.5742</span>)</span><br><span class="line">scala&gt; my.init</span><br><span class="line">res38: <span class="type">Array</span>[<span class="type">Double</span>] = <span class="type">Array</span>(<span class="number">0.21169</span>, <span class="number">0.61391</span>, <span class="number">0.6341</span>, <span class="number">0.0131</span>, <span class="number">0.16541</span>, <span class="number">0.5645</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次减一个</span></span><br><span class="line">scala&gt; arr.inits.foreach(x=&gt;println(x.mkString(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line"><span class="number">1</span>,<span class="number">22</span>,<span class="number">3435</span>,<span class="number">56</span>,<span class="number">8</span>,<span class="number">89</span></span><br><span class="line"><span class="number">1</span>,<span class="number">22</span>,<span class="number">3435</span>,<span class="number">56</span>,<span class="number">8</span></span><br><span class="line"><span class="number">1</span>,<span class="number">22</span>,<span class="number">3435</span>,<span class="number">56</span></span><br><span class="line"><span class="number">1</span>,<span class="number">22</span>,<span class="number">3435</span></span><br><span class="line"><span class="number">1</span>,<span class="number">22</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res47: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; <span class="keyword">val</span> arr3=<span class="type">Array</span>(<span class="number">1</span>,<span class="number">3435</span>,<span class="number">55</span>,<span class="number">68</span>,<span class="number">56</span>,<span class="number">1232</span>)</span><br><span class="line">arr3: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">3435</span>, <span class="number">55</span>, <span class="number">68</span>, <span class="number">56</span>, <span class="number">1232</span>)</span><br><span class="line">scala&gt; arr.intersect(arr3)</span><br><span class="line">res48: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">3435</span>, <span class="number">56</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否有该下标位置</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res50: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.isDefinedAt(<span class="number">7</span>)</span><br><span class="line">res51: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">scala&gt; arr.isDefinedAt(<span class="number">6</span>)</span><br><span class="line">res52: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">scala&gt; arr.isDefinedAt(<span class="number">5</span>)</span><br><span class="line">res53: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合是否为空</span></span><br><span class="line">scala&gt; arr1</span><br><span class="line">res54: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>()</span><br><span class="line">scala&gt; arr1.isEmpty</span><br><span class="line">res55: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否能反复遍历，iterator就不能</span></span><br><span class="line">scala&gt; arr1.isTraversableAgain</span><br><span class="line">res57: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照数组生成一个迭代器</span></span><br><span class="line">scala&gt; arr.iterator</span><br><span class="line">res58: <span class="type">Iterator</span>[<span class="type">Int</span>] = non-empty iterator</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取最后一个值</span></span><br><span class="line">scala&gt; arr.last</span><br><span class="line">res60: <span class="type">Int</span> = <span class="number">89</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否有最后一个值</span></span><br><span class="line">scala&gt; arr.lastOption</span><br><span class="line">res61: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">89</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; arr</span><br><span class="line">res63: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从右往左第一个该数</span></span><br><span class="line">scala&gt; arr.lastIndexOf(<span class="number">56</span>)</span><br><span class="line">res64: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line">lastIndexWhere <span class="comment">// 按要求从右往左搜索</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Scala中一样，再Java中size是有数据的</span></span><br><span class="line">scala&gt; arr.length</span><br><span class="line">res65: <span class="type">Int</span> = <span class="number">6</span></span><br><span class="line">scala&gt; arr.size</span><br><span class="line">res66: <span class="type">Int</span> = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组长度减去给的值，结果为差额</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res70: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.lengthCompare(<span class="number">6</span>)</span><br><span class="line">res71: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">scala&gt; arr.lengthCompare(<span class="number">7</span>)</span><br><span class="line">res72: <span class="type">Int</span> = <span class="number">-1</span></span><br><span class="line">scala&gt; arr.lengthCompare(<span class="number">3</span>)</span><br><span class="line">res73: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是不是不空</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res88: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.nonEmpty</span><br><span class="line">res89: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">scala&gt; arr1</span><br><span class="line">res90: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>()</span><br><span class="line">scala&gt; arr1.nonEmpty</span><br><span class="line">res91: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 右补齐</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res92: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.padTo(<span class="number">10</span>,<span class="number">0</span>)</span><br><span class="line">res93: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 左补齐</span></span><br><span class="line">scala&gt; arr.reverse.padTo(<span class="number">10</span>,<span class="number">0</span>).reverse</span><br><span class="line">res96: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; <span class="string">&quot;hello&quot;</span>.reverse.padTo(<span class="number">10</span>,<span class="number">0</span>).reverse.mkString(<span class="string">&quot;&quot;</span>)</span><br><span class="line">res97: <span class="type">String</span> = <span class="number">00000</span>hello</span><br><span class="line"><span class="comment">// 日期补0</span></span><br><span class="line">scala&gt; <span class="string">&quot;2017-1-15&quot;</span>.split(<span class="string">&quot;-&quot;</span>).map(x=&gt;x.reverse.padTo(<span class="number">2</span>,<span class="number">0</span>).reverse.mkString(<span class="string">&quot;&quot;</span>)).mkString(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">res106: <span class="type">String</span> = <span class="number">2017</span><span class="number">-01</span><span class="number">-15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分区，只能分两个</span></span><br><span class="line">scala&gt; arr.partition(x=&gt;x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">res108: (<span class="type">Array</span>[<span class="type">Int</span>], <span class="type">Array</span>[<span class="type">Int</span>]) = (<span class="type">Array</span>(<span class="number">22</span>, <span class="number">56</span>, <span class="number">8</span>),<span class="type">Array</span>(<span class="number">1</span>, <span class="number">3435</span>, <span class="number">89</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量替换，从第一个数字开始，往后多少个数的被替换成</span></span><br><span class="line">scala&gt; my</span><br><span class="line">res111: <span class="type">Array</span>[<span class="type">Double</span>] = <span class="type">Array</span>(<span class="number">0.21169</span>, <span class="number">0.61391</span>, <span class="number">0.6341</span>, <span class="number">0.0131</span>, <span class="number">0.16541</span>, <span class="number">0.5645</span>, <span class="number">0.5742</span>)</span><br><span class="line">scala&gt; arr</span><br><span class="line">res112: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.patch(<span class="number">1</span>,my,<span class="number">3</span>)</span><br><span class="line">res113: <span class="type">Array</span>[<span class="type">AnyVal</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">0.21169</span>, <span class="number">0.61391</span>, <span class="number">0.6341</span>, <span class="number">0.0131</span>, <span class="number">0.16541</span>, <span class="number">0.5645</span>, <span class="number">0.5742</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有数据的各种排列组合</span></span><br><span class="line">arr.permutations.toList.foreach(x=&gt;println(x.mkString(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得满足条件的前缀长度</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res117: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.prefixLength(x=&gt;x&lt;<span class="number">1000</span>)</span><br><span class="line">res118: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘积</span></span><br><span class="line">scala&gt; arr.product</span><br><span class="line">res119: <span class="type">Int</span> = <span class="number">-1281840256</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建左子树，且不需要初始值</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res120: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.reduce(_+_)</span><br><span class="line">res121: <span class="type">Int</span> = <span class="number">3611</span></span><br><span class="line"><span class="comment">// 构建右子树</span></span><br><span class="line">scala&gt; arr.reduceRight(_+_)</span><br><span class="line">res122: <span class="type">Int</span> = <span class="number">3611</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先做map再做reverse</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res124: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.reverseMap(x=&gt;x*<span class="number">10</span>)</span><br><span class="line">res125: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">890</span>, <span class="number">80</span>, <span class="number">560</span>, <span class="number">34350</span>, <span class="number">220</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否数组内容相同</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res126: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr4</span><br><span class="line">res127: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.sameElements(arr4)</span><br><span class="line">res128: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 顺序也得完全一样</span></span><br><span class="line">scala&gt; <span class="keyword">var</span> arr5=<span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">89</span>,<span class="number">8</span>)</span><br><span class="line">arr5: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">8</span>)</span><br><span class="line">scala&gt; arr</span><br><span class="line">res129: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.sameElements(arr5)</span><br><span class="line">res130: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始值一路加过去</span></span><br><span class="line">scala&gt; arr.scan(<span class="number">5</span>)(_+_)</span><br><span class="line">res136: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">5</span>, <span class="number">6</span>, <span class="number">28</span>, <span class="number">3463</span>, <span class="number">3519</span>, <span class="number">3527</span>, <span class="number">3616</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// segmentLength 从序列的 from 处开始向后查找，所有满足 p 的连续元素的长度</span></span><br><span class="line"><span class="keyword">val</span> a = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> b = a.segmentLength( &#123;x:<span class="type">Int</span> =&gt; x &lt; <span class="number">3</span>&#125;,<span class="number">3</span>)        <span class="comment">// 5</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> b = a.segmentLength( &#123;x:<span class="type">Int</span> =&gt; x &lt; <span class="number">3</span>&#125;,<span class="number">2</span>)</span><br><span class="line">b: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片 左包右不包</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res139: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.slice(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">res140: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">22</span>, <span class="number">3435</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗口滑动</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res142: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.sliding(<span class="number">3</span>).foreach(x=&gt;println(x.mkString(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line"><span class="number">1</span>,<span class="number">22</span>,<span class="number">3435</span></span><br><span class="line"><span class="number">22</span>,<span class="number">3435</span>,<span class="number">56</span></span><br><span class="line"><span class="number">3435</span>,<span class="number">56</span>,<span class="number">8</span></span><br><span class="line"><span class="number">56</span>,<span class="number">8</span>,<span class="number">89</span></span><br><span class="line"><span class="comment">// 步长为2的滑动</span></span><br><span class="line">scala&gt; arr.sliding(<span class="number">3</span>,<span class="number">2</span>).foreach(x=&gt;println(x.mkString(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line"><span class="number">1</span>,<span class="number">22</span>,<span class="number">3435</span></span><br><span class="line"><span class="number">3435</span>,<span class="number">56</span>,<span class="number">8</span></span><br><span class="line"><span class="number">8</span>,<span class="number">89</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序 升序和降序，注意：降序的-号要空一格</span></span><br><span class="line">scala&gt; arr.sortBy(x=&gt;x)</span><br><span class="line">res0: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">3435</span>)</span><br><span class="line">scala&gt; arr.sortBy(x=&gt; -x)</span><br><span class="line">res1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">3435</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 固定数组排序</span></span><br><span class="line">scala&gt; arr.sorted</span><br><span class="line">res2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">3435</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按第一个遇到不满足条件的分割</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res4: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.span(x=&gt;x&lt;<span class="number">1000</span>)</span><br><span class="line">res5: (<span class="type">Array</span>[<span class="type">Int</span>], <span class="type">Array</span>[<span class="type">Int</span>]) = (<span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>),<span class="type">Array</span>(<span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>))</span><br><span class="line">scala&gt; arr.span(_&lt;<span class="number">1000</span>)</span><br><span class="line">res6: (<span class="type">Array</span>[<span class="type">Int</span>], <span class="type">Array</span>[<span class="type">Int</span>]) = (<span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>),<span class="type">Array</span>(<span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从某个位置开始分割，分割的位置所在值在后面</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res8: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.splitAt(<span class="number">3</span>)</span><br><span class="line">res9: (<span class="type">Array</span>[<span class="type">Int</span>], <span class="type">Array</span>[<span class="type">Int</span>]) = (<span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>),<span class="type">Array</span>(<span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否以什么开头</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res11: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.startsWith(<span class="type">Array</span>(<span class="number">1</span>,<span class="number">22</span>))</span><br><span class="line">res12: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">scala&gt; arr.startsWith(<span class="type">Array</span>(<span class="number">22</span>))</span><br><span class="line">res13: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 可从某个位置开始判定</span></span><br><span class="line">scala&gt; arr.startsWith(<span class="type">Array</span>(<span class="number">22</span>),<span class="number">1</span>)</span><br><span class="line">res14: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了第一个</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res16: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.tail</span><br><span class="line">res17: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿左边几个</span></span><br><span class="line">scala&gt; arr.take(<span class="number">3</span>)</span><br><span class="line">res18: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿右边几个</span></span><br><span class="line">scala&gt; arr.takeRight(<span class="number">3</span>)</span><br><span class="line">res19: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; arr</span><br><span class="line">res21: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿数据直到不满足</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res21: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.takeWhile(_&lt;<span class="number">100</span>)</span><br><span class="line">res22: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型可以不断转换</span></span><br><span class="line">scala&gt; arr.toList</span><br><span class="line">res23: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.toBuffer</span><br><span class="line">res24: scala.collection.mutable.<span class="type">Buffer</span>[<span class="type">Int</span>] = <span class="type">ArrayBuffer</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.toBuffer.toArray</span><br><span class="line">res25: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// toMap要用数组里放元组的方式</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res28: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.toMap</span><br><span class="line">&lt;console&gt;:<span class="number">13</span>: error: <span class="type">Cannot</span> prove that <span class="type">Int</span> &lt;:&lt; (<span class="type">T</span>, <span class="type">U</span>).</span><br><span class="line">       arr.toMap</span><br><span class="line">           ^</span><br><span class="line">scala&gt; <span class="keyword">val</span> arr5=<span class="type">Array</span>((<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>),(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>))</span><br><span class="line">arr5: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">Array</span>((name,zhangsan), (age,<span class="number">20</span>))</span><br><span class="line">scala&gt; arr5.toMap</span><br><span class="line">res30: scala.collection.immutable.<span class="type">Map</span>[<span class="type">String</span>,<span class="type">String</span>] = <span class="type">Map</span>(name -&gt; zhangsan, age -&gt; <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵转置</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> arr5=<span class="type">Array</span>(<span class="type">Array</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>),<span class="type">Array</span>(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>))</span><br><span class="line">arr5: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">String</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(name, zhangsan), <span class="type">Array</span>(age, <span class="number">20</span>))</span><br><span class="line">scala&gt; arr5.transpose</span><br><span class="line">res34: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">String</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(name, age), <span class="type">Array</span>(zhangsan, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// union和++一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2行2列转置</span></span><br><span class="line">arr.unzip</span><br><span class="line"><span class="comment">// 3行3列转置</span></span><br><span class="line">arr.unzip3</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改某位的值</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res36: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3435</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.update(<span class="number">2</span>,<span class="number">345</span>)</span><br><span class="line">scala&gt; arr</span><br><span class="line">res38: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">345</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取，左包右不包</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res39: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">345</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; arr.view(<span class="number">1</span>,<span class="number">4</span>).toList</span><br><span class="line">res40: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">22</span>, <span class="number">345</span>, <span class="number">56</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应位置按对拿出，按短的算</span></span><br><span class="line">scala&gt; arr</span><br><span class="line">res42: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">22</span>, <span class="number">345</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">89</span>)</span><br><span class="line">scala&gt; <span class="keyword">val</span> arr2=<span class="type">Array</span>(<span class="number">33</span>,<span class="number">345</span>,<span class="number">5656</span>)</span><br><span class="line">arr2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">33</span>, <span class="number">345</span>, <span class="number">5656</span>)</span><br><span class="line">scala&gt; arr.zip(arr2)</span><br><span class="line">res43: <span class="type">Array</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((<span class="number">1</span>,<span class="number">33</span>), (<span class="number">22</span>,<span class="number">345</span>), (<span class="number">345</span>,<span class="number">5656</span>))</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h3 id="2-元组"><a href="#2-元组" class="headerlink" title="2.元组"></a>2.元组</h3><ul>
<li><p>特点</p>
<ul>
<li><p>可以包含不同类型的元素</p>
</li>
<li><p><strong>最多支持22个元素</strong></p>
</li>
<li><p>使用下划线<code>_</code>访问元素，<code>_1</code>是第一个元素</p>
</li>
<li><p>元组中<strong>值不可更改</strong></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> tup=(<span class="number">1</span>,<span class="string">&quot;zs&quot;</span>,<span class="number">20</span>,<span class="number">175.2</span>,<span class="string">&quot;1999-10-12&quot;</span>)</span><br><span class="line">tup: (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Double</span>, <span class="type">String</span>) = (<span class="number">1</span>,zs,<span class="number">20</span>,<span class="number">175.2</span>,<span class="number">1999</span><span class="number">-10</span><span class="number">-12</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; tup._1</span><br><span class="line">res44: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">scala&gt; tup._1=<span class="number">2</span></span><br><span class="line">&lt;console&gt;:<span class="number">12</span>: error: reassignment to <span class="keyword">val</span></span><br><span class="line">       tup._1=<span class="number">2</span></span><br><span class="line">             ^</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>主要就用<code>productIterator</code>变成迭代器来使用</p>
</li>
<li><p>奇怪语法</p>
<p><strong>一次性定义很多变量</strong></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> tup=(<span class="number">1</span>,<span class="string">&quot;zs&quot;</span>,<span class="number">20</span>,<span class="number">175.2</span>,<span class="string">&quot;1999-10-12&quot;</span>)</span><br><span class="line">tup: (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>, <span class="type">Double</span>, <span class="type">String</span>) = (<span class="number">1</span>,zs,<span class="number">20</span>,<span class="number">175.2</span>,<span class="number">1999</span><span class="number">-10</span><span class="number">-12</span>)</span><br><span class="line">scala&gt; <span class="keyword">val</span> (stuid,stuname,stuage,high,birthday)=tup</span><br><span class="line">stuid: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">stuname: <span class="type">String</span> = zs</span><br><span class="line">stuage: <span class="type">Int</span> = <span class="number">20</span></span><br><span class="line">high: <span class="type">Double</span> = <span class="number">175.2</span></span><br><span class="line">birthday: <span class="type">String</span> = <span class="number">1999</span><span class="number">-10</span><span class="number">-12</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h3 id="3-集合"><a href="#3-集合" class="headerlink" title="3.集合"></a>3.集合</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240724142148784.png"
                      alt="image-20240724142148784"
                ></p>
<h5 id="A-前期"><a href="#A-前期" class="headerlink" title="A.前期"></a>A.前期</h5><ul>
<li><p>Traversable是顶级集合类</p>
</li>
<li><p>集合类别</p>
<ul>
<li><p><strong>不可变集合</strong></p>
<ul>
<li><p><code>scala.collection.immutable</code>，默认Scala选择不可变集合</p>
</li>
<li><p>例子</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> aa=<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">aa: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; aa.getClass</span><br><span class="line">res47: <span class="type">Class</span>[_ &lt;: <span class="type">List</span>[<span class="type">Int</span>]] = <span class="class"><span class="keyword">class</span> <span class="title">scala</span>.<span class="title">collection</span>.<span class="title">immutable</span>.<span class="title">$colon$colon</span></span></span><br><span class="line"></span><br><span class="line">scala&gt; aa(<span class="number">1</span>)=<span class="number">111</span></span><br><span class="line">&lt;console&gt;:<span class="number">13</span>: error: value update is not a member of <span class="type">List</span>[<span class="type">Int</span>]</span><br><span class="line">       aa(<span class="number">1</span>)=<span class="number">111</span></span><br><span class="line">       ^</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240724143315963.png"
                      alt="image-20240724143315963"
                ></p>
<p>上面全是类 常用Set Seq Map HashMap</p>
</li>
</ul>
</li>
<li><p><strong>可变集合</strong>:可以修改、添加或移除一个集合的元素</p>
<ul>
<li><p><code>scala.colection.mutable</code></p>
</li>
<li><p>方法里带<code>=</code>的</p>
</li>
<li><p>例子</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> lb = scala.collection.mutable.<span class="type">ListBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">lb: scala.collection.mutable.<span class="type">ListBuffer</span>[<span class="type">Int</span>] = <span class="type">ListBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; lb += <span class="number">22</span></span><br><span class="line">res49: lb.<span class="keyword">type</span> = <span class="type">ListBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; lb.+=(<span class="number">22</span>)</span><br><span class="line">res50: lb.<span class="keyword">type</span> = <span class="type">ListBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240724143603145.png"
                      alt="image-20240724143603145"  
                >

<p>常用Map Seq Set ArrayBuffer ListBuffer HashMap StringBuffer</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="B-常用集合"><a href="#B-常用集合" class="headerlink" title="B.常用集合"></a>B.常用集合</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240724144009340.png"
                      alt="image-20240724144009340"
                ></p>
<h5 id="C-Map"><a href="#C-Map" class="headerlink" title="C.Map"></a>C.Map</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240724144243966.png"
                      alt="image-20240724144243966"
                ></p>
<ul>
<li>拿值要m(key)  或者 m.get(key).get</li>
</ul>
<h2 id="六-练习"><a href="#六-练习" class="headerlink" title="(六)练习"></a>(六)<a class="link"   href="https://blog.csdn.net/Helen_1997_1997/article/details/128222147" >练习<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><ul>
<li><p>工程文件为<code>scala/myexp</code></p>
</li>
<li><p>原始数据</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">// student</span><br><span class="line">01,赵雷,1990-01-01,男</span><br><span class="line">02,钱电,1990-12-21,男</span><br><span class="line">03,孙风,1990-05-20,男</span><br><span class="line">04,李云,1990-08-06,男</span><br><span class="line">05,周梅,1991-12-01,女</span><br><span class="line">06,吴兰,1992-03-01,女</span><br><span class="line">07,郑竹,1989-07-01,女</span><br><span class="line">08,王菊,1990-01-20,女</span><br><span class="line"></span><br><span class="line">// sc</span><br><span class="line">01,01,80</span><br><span class="line">01,02,90</span><br><span class="line">01,03,99</span><br><span class="line">02,01,70</span><br><span class="line">02,02,60</span><br><span class="line">02,03,80</span><br><span class="line">03,01,80</span><br><span class="line">03,02,80</span><br><span class="line">03,03,80</span><br><span class="line">04,01,50</span><br><span class="line">04,02,30</span><br><span class="line">04,03,20</span><br><span class="line">05,01,76</span><br><span class="line">05,02,87</span><br><span class="line">06,01,31</span><br><span class="line">06,03,34</span><br><span class="line">07,02,89</span><br><span class="line">07,03,98</span><br><span class="line"></span><br><span class="line">// Course</span><br><span class="line">01,语文,02</span><br><span class="line">02,数学,01</span><br><span class="line">03,英语,03</span><br><span class="line"></span><br><span class="line">// teacherp</span><br><span class="line">01,张三</span><br><span class="line">02,李四</span><br><span class="line">03,王五</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读数据，用专门的函数，以及实体类来存储</span></span><br><span class="line"><span class="comment">// 四个实体类</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span>(<span class="params">cid:<span class="type">String</span>,cname:<span class="type">String</span>,tid:<span class="type">String</span></span>)</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span>(<span class="params">sid:<span class="type">String</span>,cid:<span class="type">String</span>,score:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">sid:<span class="type">String</span>,name:<span class="type">String</span>,birthday:<span class="type">String</span>,gender:<span class="type">String</span></span>)</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">tid:<span class="type">String</span>,tname:<span class="type">String</span></span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TableEnum</span> <span class="keyword">extends</span> <span class="title">Enumeration</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">TableEnum</span> </span>= <span class="type">Value</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">SCORE</span>,<span class="type">STUDENT</span>,<span class="type">TEACHER</span>,<span class="type">COURSE</span>=<span class="type">Value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类中，相关函数和使用</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp1To5</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readTxtToBuffer</span></span>(path: <span class="type">String</span>,model:<span class="type">TableEnum</span>): <span class="type">ListBuffer</span>[<span class="type">Any</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> reader = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(path));</span><br><span class="line">    <span class="keyword">var</span> scData = <span class="type">ListBuffer</span>[<span class="type">Any</span>]();</span><br><span class="line">    <span class="keyword">var</span> line: <span class="type">String</span> = reader.readLine();</span><br><span class="line">    <span class="keyword">while</span> (line != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      model <span class="keyword">match</span>&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">SCORE</span>=&gt; scData+=<span class="type">Score</span>(infos(<span class="number">0</span>),infos(<span class="number">1</span>),infos(<span class="number">2</span>).toInt)</span><br><span class="line">            <span class="keyword">case</span> <span class="type">TEACHER</span>=&gt; scData+=<span class="type">Teacher</span>(infos(<span class="number">0</span>),infos(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">case</span> <span class="type">STUDENT</span> =&gt; scData+=<span class="type">Student</span>(infos(<span class="number">0</span>),infos(<span class="number">1</span>),infos(<span class="number">2</span>),infos(<span class="number">3</span>))</span><br><span class="line">            <span class="keyword">case</span> <span class="type">COURSE</span> =&gt; scData+=<span class="type">Course</span>(infos(<span class="number">0</span>),infos(<span class="number">1</span>),infos(<span class="number">2</span>))</span><br><span class="line">      &#125;</span><br><span class="line">      line = reader.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">    reader.close();</span><br><span class="line">    scData</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> lb = readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\sc.txt&quot;</span>,<span class="type">SCORE</span>);</span><br><span class="line">    lb.map(x =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> tuple = x.asInstanceOf[<span class="type">Score</span>]</span><br><span class="line">      tuple</span><br><span class="line">    &#125;).foreach(x=&gt;println(x))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h2 id="解释-枚举类要继承Enumeration"><a href="#解释-枚举类要继承Enumeration" class="headerlink" title="解释- 枚举类要继承Enumeration"></a>解释<br>- 枚举类要继承<code>Enumeration</code></h2></li>
</ul>
</li>
</ul>
<h4 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h4><p>查询”01”课程比”02”课程成绩高的学生的信息及课程分数</p>
<ul>
<li><p>法1</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 先查出所有01课程的学员及分数</span></span><br><span class="line"><span class="keyword">val</span> oneSc = scData.filter(x=&gt;x._2.equals(<span class="string">&quot;01&quot;</span>));</span><br><span class="line"><span class="keyword">val</span> twoSc = scData.filter(x=&gt;x._2.equals(<span class="string">&quot;02&quot;</span>));</span><br><span class="line">println(oneSc)</span><br><span class="line">println(twoSc)</span><br><span class="line"><span class="comment">// 2.使用偏函数遍历01课程集合 再02课程中进行搜索</span></span><br><span class="line"><span class="keyword">var</span> bb=oneSc.flatMap(tup=&gt;&#123;</span><br><span class="line">    twoSc.map(tup02=&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (tup._1.equals(tup02._1)) &#123;</span><br><span class="line">            <span class="type">Array</span>(tup._1,tup._3,tup02._3)</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">Array</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).filter(x=&gt;x.size!=<span class="number">0</span> &amp;&amp; x(<span class="number">1</span>).toString.toInt &gt; x(<span class="number">2</span>).toString.toInt).map(x=&gt;(x(<span class="number">0</span>),x(<span class="number">1</span>),x(<span class="number">2</span>)))</span><br><span class="line">println(bb)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>法2</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> bb = scData.filter(x =&gt; x._2.equals(<span class="string">&quot;01&quot;</span>) || x._2.equals(<span class="string">&quot;02&quot;</span>))</span><br><span class="line">.groupBy(x =&gt; x._1).map(x=&gt;x._2.sortBy(e=&gt;e._2))</span><br><span class="line">.filter(p=&gt;p.size==<span class="number">2</span> &amp;&amp; p(<span class="number">0</span>)._3&gt;p(<span class="number">1</span>)._3)</span><br><span class="line"></span><br><span class="line">println(bb)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h4><ul>
<li>第3题：查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> scorelb = readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\sc.txt&quot;</span>,<span class="type">SCORE</span>)</span><br><span class="line">.map(_.asInstanceOf[<span class="type">Score</span>]);</span><br><span class="line"><span class="keyword">val</span> stulb = readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\student.txt&quot;</span>,<span class="type">STUDENT</span>)</span><br><span class="line">.map(s=&gt;&#123;</span><br><span class="line">    <span class="keyword">val</span> stu = s.asInstanceOf[<span class="type">Student</span>];</span><br><span class="line">    (stu.sid,(stu.name,stu.gender,stu.birthday))</span><br><span class="line">&#125;).toMap</span><br><span class="line"><span class="comment">// 第3题：查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</span></span><br><span class="line"><span class="keyword">val</span> res = scorelb.groupBy(_.sid).mapValues(lb =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> cnt_score = <span class="number">0</span>;</span><br><span class="line">    lb.foreach(s =&gt; cnt_score += s.score)</span><br><span class="line">    cnt_score / lb.size</span><br><span class="line">&#125;).filter(x =&gt; x._2 &gt;= <span class="number">60</span>)</span><br><span class="line">.map(sc=&gt;&#123;</span><br><span class="line">    <span class="comment">// 获取学院的信息</span></span><br><span class="line">    <span class="keyword">val</span> stuinfo = stulb.get(sc._1);</span><br><span class="line">    (stuinfo.get,sc._2);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">println(res)</span><br></pre></td></tr></table></figure></div>

<h4 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h4><ul>
<li><p>第5题：查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</p>
</li>
<li><p>代码</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> scorelb = readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\sc.txt&quot;</span>,<span class="type">SCORE</span>)</span><br><span class="line">.map(_.asInstanceOf[<span class="type">Score</span>]);</span><br><span class="line"><span class="keyword">val</span> stulb = readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\student.txt&quot;</span>,<span class="type">STUDENT</span>)</span><br><span class="line">.map(s=&gt;&#123;</span><br><span class="line">    <span class="keyword">val</span> stu = s.asInstanceOf[<span class="type">Student</span>];</span><br><span class="line">    (stu.sid,stu)</span><br><span class="line">&#125;).toMap</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res = scorelb.groupBy(_.sid).map(lb=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> cnt_score = <span class="number">0</span>;</span><br><span class="line">    lb._2.foreach(s=&gt;cnt_score+=s.score)</span><br><span class="line">    (lb._1,(lb._2.size,cnt_score))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">val</span> res1 = stulb.map(x =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> findScore = res.getOrElse(x._1, (<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    (x._1,x._2.name, findScore._1,findScore._2)</span><br><span class="line">&#125;)</span><br><span class="line">println(res1)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>要进行一个外联，因为可能有人没有考，用<code>getOrElse</code>方式取值</p>
</li>
</ul>
<h4 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h4><ul>
<li><p>第7题：查询学过”张三”老师授课的同学的信息</p>
</li>
<li><p>代码</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第7题：查询学过&quot;张三&quot;老师授课的同学的信息</span></span><br><span class="line"><span class="type">val</span> <span class="variable">scorelb</span> <span class="operator">=</span> readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\sc.txt&quot;</span>,SCORE)</span><br><span class="line">    .map(_.asInstanceOf[Score]);</span><br><span class="line"><span class="type">val</span> <span class="variable">stulb</span> <span class="operator">=</span> readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\student.txt&quot;</span>,STUDENT)</span><br><span class="line">    .map(s=&gt;&#123;</span><br><span class="line">        <span class="type">val</span> <span class="variable">stu</span> <span class="operator">=</span> s.asInstanceOf[Student];</span><br><span class="line">        (stu.sid,stu)</span><br><span class="line">    &#125;).toMap</span><br><span class="line">    <span class="type">val</span> <span class="variable">tealb</span> <span class="operator">=</span> readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\teacher.txt&quot;</span>,TEACHER)</span><br><span class="line">    .map(_.asInstanceOf[Teacher]);</span><br><span class="line"><span class="type">val</span> <span class="variable">courselb</span> <span class="operator">=</span> readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\course.txt&quot;</span>,COURSE)</span><br><span class="line">    .map(_.asInstanceOf[Course]);</span><br><span class="line"><span class="type">val</span> <span class="variable">teacher</span> <span class="operator">=</span> tealb.filter(x =&gt; x.tname.equals(<span class="string">&quot;张三&quot;</span>))(<span class="number">0</span>)</span><br><span class="line">    <span class="type">val</span> <span class="variable">courses</span> <span class="operator">=</span> courselb.filter(x =&gt; x.tid.equals(teacher.tid))</span><br><span class="line">    .map(x=&gt;(x.cid,x.cname)).toMap</span><br><span class="line"></span><br><span class="line">    <span class="title function_">println</span><span class="params">(courses)</span></span><br><span class="line">    <span class="type">val</span> <span class="variable">scc</span> <span class="operator">=</span> scorelb.collect(&#123;</span><br><span class="line">        <span class="keyword">case</span> x <span class="title function_">if</span> <span class="params">(courses.get(x.cid)</span> != None) =&gt; x.sid</span><br><span class="line">            &#125;).distinct.map(stuid=&gt;stulb.get(stuid).get)</span><br><span class="line">    println(scc)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h2 id="七-其他语法"><a href="#七-其他语法" class="headerlink" title="(七)其他语法"></a>(七)其他语法</h2><ul>
<li><p><code>map(_.asInstanceOf[类型])</code>强转，对集合中每个值墙砖</p>
</li>
<li><p>类型Any相当于Java中的Object</p>
</li>
<li><p>二元组和Map可以相互转化</p>
</li>
<li><p>如果lambda只有一条语句，<strong>省略</strong><code>&#123;&#125;</code>，可从<code>x=&gt;&#123;x&lt;100&#125;</code>变为<code>x=&gt;x&lt;100</code></p>
<p>如果参数只用一次可从<code>x=&gt;x&lt;100</code>变为<code>_&lt;100</code></p>
</li>
<li><p>每个单词开头大写</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toTitle</span></span>(str:<span class="type">String</span>): <span class="type">String</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> pattern = <span class="string">&quot;([a-zA-Z&#x27;]*[^a-z|A-Z|&#x27;]+)|[a-zA-Z&#x27;]+&quot;</span>.r;</span><br><span class="line">    <span class="keyword">val</span> li = pattern.findAllIn(str)</span><br><span class="line">    .map(x=&gt;x(<span class="number">0</span>).toUpper+x.toLowerCase.substring(<span class="number">1</span>)).mkString;</span><br><span class="line">    li;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(toTitle(<span class="string">&quot;what do you want to do?let&#x27;s go&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出What Do You Want To Do?Let&#x27;s Go</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="八-面向对象编程"><a href="#八-面向对象编程" class="headerlink" title="(八)面向对象编程"></a>(八)面向对象编程</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240725161121279.png"
                      alt="image-20240725161121279" style="zoom:50%;" 
                ></li>
</ul>
<h3 id="1-类"><a href="#1-类" class="headerlink" title="1.类"></a>1.类</h3><ul>
<li>初步<ul>
<li>类通过class关键字定义</li>
<li>类通过new关键字创建实例</li>
<li>类拥有成员变量和方法</li>
<li>类的成员默认为public，也支持private、protected</li>
<li><strong>类中无法定义静态成员变量和方法</strong></li>
<li><strong>类无需明确定义构造方法，通过构造参数列表声明为类的一部分</strong></li>
</ul>
</li>
</ul>
<h4 id="A-类访问修饰符"><a href="#A-类访问修饰符" class="headerlink" title="A.类访问修饰符"></a>A.类访问修饰符</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240725161406346.png"
                      alt="image-20240725161406346"
                ></p>
<h4 id="B-类的定义"><a href="#B-类的定义" class="headerlink" title="B.类的定义"></a>B.类的定义</h4><ul>
<li><p>主构造器，辅助构造器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240725161512466.png"
                      alt="image-20240725161512466"
                ></p>
</li>
<li><p>参数构造直接在后面用括号</p>
</li>
<li><p>class中不允许有静态方法，要在object中new</p>
</li>
<li><p>例子</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstClazz</span>(<span class="params">name:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">val</span> username=name;</span><br><span class="line">  <span class="keyword">val</span> userage=age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>()=&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">&quot;zs&quot;</span>,<span class="number">20</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(num1:<span class="type">Int</span>,num2:<span class="type">Int</span>)=&#123;</span><br><span class="line">    <span class="string">s&quot;<span class="subst">$&#123;num1&#125;</span>+<span class="subst">$&#123;num2&#125;</span>=<span class="subst">$&#123;num1+num2&#125;</span>,<span class="subst">$&#123;username&#125;</span>,<span class="subst">$&#123;userage&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyMain</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> fc = <span class="keyword">new</span> <span class="type">FirstClazz</span>()</span><br><span class="line">    println(fc.add(<span class="number">10</span>, <span class="number">34</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10+34=44,zs,20</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-抽象类"><a href="#2-抽象类" class="headerlink" title="2.抽象类"></a>2.抽象类</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240725163528056.png"
                      alt="image-20240725163528056" style="zoom:80%;" 
                >

<h3 id="3-单例对象"><a href="#3-单例对象" class="headerlink" title="3.单例对象"></a>3.单例对象</h3><ul>
<li>Scala的类中无法定义静态成员，像Java一样表达类的静态成员变量、成员方法与静态代码块?</li>
<li>Scala解决方案:单例对象<ul>
<li>使用“object”关键字声明，可包含变量、方法与代码定义</li>
<li>单例对象中的成员变量、成员方法<strong>通过单例对象名直接调用</strong></li>
<li>单例对象第一次被访问时初始化，并执行全部代码块</li>
<li><strong>单例对象不能new，且无构造参数</strong></li>
<li><strong>程序入口main()方法必须定义在单例对象中</strong></li>
<li>单例对象与同名类定义在同一文件中时形成绑定关系</li>
</ul>
</li>
</ul>
<h4 id="A-伴生对象"><a href="#A-伴生对象" class="headerlink" title="A.伴生对象"></a>A.伴生对象</h4><ul>
<li><p>伴生类和伴生对象，名字要相同，要在同一个文件中</p>
</li>
<li><p>apply是直接弹出来的</p>
</li>
<li><p>例子</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.njupt.myexp.<span class="type">MyClassObject</span>.uname</span><br><span class="line"><span class="comment">// 伴生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassObject</span>(<span class="params">name:<span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> username=name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printName</span></span>()=&#123;</span><br><span class="line">    print(<span class="string">s&quot;Hello,<span class="subst">$&#123;username&#125;</span>,<span class="subst">$&#123;uname&#125;</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 伴生对象</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyClassObject</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">uname=</span>&quot;<span class="title">ls</span>&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name: <span class="type">String</span>): <span class="type">MyClassObject</span> = <span class="keyword">new</span> <span class="type">MyClassObject</span>(name)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(arg: <span class="type">MyClassObject</span>): <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">Some</span>(uname) <span class="comment">// 只能拿到这边对象的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他文件中 两种方法都可以使用</span></span><br><span class="line"><span class="comment">// val za = new MyClassObject(&quot;za&quot;)</span></span><br><span class="line"><span class="keyword">val</span> za = <span class="type">MyClassObject</span>(<span class="string">&quot;za&quot;</span>)</span><br><span class="line">za.printName()</span><br><span class="line"><span class="comment">// 输出Hello,za,ls</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>解释</p>
<ul>
<li><p>类可以输出对象中的方法</p>
<p>方法不能直接调用类中的东西</p>
<p>上面那个uname</p>
</li>
<li><p>apply是相当于在外部不要new</p>
</li>
<li><p>unapply相当于是toString</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-隐式类"><a href="#4-隐式类" class="headerlink" title="4.隐式类"></a>4.隐式类</h3><ul>
<li><p>可以增强功能，但是不用改原本的类</p>
</li>
<li><p>可以看到ImClazz原本没有xxx()但是可用，在上面隐式类中参数要是相应类</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImClazz</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>()=&#123;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyMain</span> </span>&#123;</span><br><span class="line">  <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">AddFunc</span>(<span class="params">xx:<span class="type">ImClazz</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xxx</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">      println(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> ic = <span class="keyword">new</span> <span class="type">ImClazz</span>();</span><br><span class="line">    ic.sayHello();</span><br><span class="line">    ic.xxx();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="5-特质trait"><a href="#5-特质trait" class="headerlink" title="5.特质trait"></a>5.特质trait</h3><h5 id="A-概述与概念"><a href="#A-概述与概念" class="headerlink" title="A.概述与概念"></a>A.概述与概念</h5><ul>
<li>Scala中没有接口(interface)的概念</li>
<li>特质用于在类之间共享程序接口和字段，类似Java接口</li>
<li>特质<strong>是字段和方法的集合，可以提供字段和方法实现</strong></li>
<li>类和单例对象都可以扩展特质(extends)</li>
<li>特质不能被实例化，因此没有构造参数，类似Java接口</li>
<li>特质使用”trait”关键字定义</li>
<li>实现特质中的方法使用”override”</li>
<li>可实现动态混入特质</li>
</ul>
<h5 id="B-混入特质"><a href="#B-混入特质" class="headerlink" title="B.混入特质"></a>B.混入特质</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726093825303.png"
                      alt="image-20240726093825303"
                ></p>
<p><strong>类能继承它，它也能继承普通类</strong></p>
<h5 id="C-动态混入特质"><a href="#C-动态混入特质" class="headerlink" title="C.动态混入特质"></a>C.动态混入特质</h5><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726102123617.png"
                      alt="image-20240726102123617"
                ></p>
<p><strong>类似于接口</strong></p>
<p><strong>动态混入，一个类中只能一个，而且，但是可以让多个trait互相继承，一次性导入</strong></p>
</li>
<li><p>代码样例，重写前面练习中的读入文件内容</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">DataChangeTrait</span> [<span class="type">T</span>]</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span>(line:<span class="type">String</span>):<span class="type">T</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">ScoreChangeTrait</span> <span class="keyword">extends</span> <span class="title">DataChangeTrait</span>[<span class="type">Score</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">change</span></span>(line: <span class="type">String</span>): <span class="type">Score</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="type">Score</span>(infos(<span class="number">0</span>),infos(<span class="number">1</span>),infos(<span class="number">2</span>).toInt)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">StudentChangeTrait</span> <span class="keyword">extends</span> <span class="title">DataChangeTrait</span>[<span class="type">Student</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">change</span></span>(line: <span class="type">String</span>): <span class="type">Student</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="type">Student</span>(infos(<span class="number">0</span>),infos(<span class="number">1</span>),infos(<span class="number">2</span>),infos(<span class="number">3</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataChangeTool</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  self:<span class="type">DataChangeTrait</span>[<span class="type">T</span>] =&gt;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readTxtToBuffer</span></span>(path: <span class="type">String</span>): <span class="type">ListBuffer</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> reader = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(path));</span><br><span class="line">    <span class="keyword">val</span> scData = <span class="type">ListBuffer</span>[<span class="type">T</span>]();</span><br><span class="line">    <span class="keyword">var</span> line: <span class="type">String</span> = reader.readLine();</span><br><span class="line">    <span class="keyword">while</span> (line != <span class="literal">null</span>) &#123;</span><br><span class="line">      scData += change(line);</span><br><span class="line">      line = reader.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">    reader.close();</span><br><span class="line">    scData</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> scores = (<span class="keyword">new</span> <span class="type">DataChangeTool</span>[<span class="type">Score</span>]() <span class="keyword">with</span> <span class="type">ScoreChangeTrait</span>).readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\sc.txt&quot;</span>)</span><br><span class="line">    println(scores)</span><br><span class="line">    <span class="keyword">val</span> stus = (<span class="keyword">new</span> <span class="type">DataChangeTool</span>[<span class="type">Student</span>]() <span class="keyword">with</span> <span class="type">StudentChangeTrait</span>).readTxtToBuffer(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaexp\\student.txt&quot;</span>)</span><br><span class="line">    println(stus)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数据到这儿把两个文件的读出，后续只要多加一个特质，继承需要混入的特质</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="6-样例类"><a href="#6-样例类" class="headerlink" title="6.样例类"></a>6.样例类</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726110409580.png"
                      alt="image-20240726110409580"
                ></p>
<ul>
<li>相当于实体类，<strong>但是出来默认是val，是不可变的</strong></li>
</ul>
<h3 id="7-枚举类"><a href="#7-枚举类" class="headerlink" title="7.枚举类"></a>7.枚举类</h3><ul>
<li><p>要继承<code>Enumeration</code></p>
</li>
<li><pre><code class="scala">object TableEnum extends Enumeration &#123;
  type TableEnum = Value  // 把枚举类暴露出去
  val SCORE,STUDENT,TEACHER,COURSE=Value
&#125;
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 8.泛型类</span><br><span class="line"></span><br><span class="line">![image-20240726110614451](https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726110614451.png)</span><br><span class="line"></span><br><span class="line">- 例子</span><br><span class="line"></span><br><span class="line">  压栈，输出新的List</span><br><span class="line"></span><br><span class="line">  ```scala</span><br><span class="line">  scala&gt; val lst=List[Int]()</span><br><span class="line">  lst: List[Int] = List()</span><br><span class="line">  </span><br><span class="line">  scala&gt; 10 :: lst</span><br><span class="line">  res0: List[Int] = List(10)</span><br><span class="line">  </span><br><span class="line">  scala&gt; 20 :: (10 :: lst)</span><br><span class="line">  res1: List[Int] = List(20, 10)</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ul>
<h3 id="9-类型边界"><a href="#9-类型边界" class="headerlink" title="9.类型边界"></a>9.类型边界</h3><ul>
<li>在Scala中，类型参数可以有一个类型边界约束</li>
<li><strong>类型上界</strong>:将类型限制为另一种类型的子类<ul>
<li>T&lt;:A 表示类型变量T应该是类型A的子类</li>
<li>A是具体类型，T是泛型</li>
</ul>
</li>
<li><strong>类型下界</strong>:将类型声明为另一种类型的超类<ul>
<li>T&gt;:A 表示类型变量T应该是类型A的超类</li>
<li>A是具体类型，T是泛型</li>
</ul>
</li>
</ul>
<h2 id="九-进阶学习"><a href="#九-进阶学习" class="headerlink" title="(九)进阶学习"></a>(九)进阶学习</h2><h3 id="1-Scala正则表达"><a href="#1-Scala正则表达" class="headerlink" title="1.Scala正则表达"></a>1.Scala正则表达</h3><ul>
<li>分割 匹配 替换 提取</li>
</ul>
<h5 id="A-初步"><a href="#A-初步" class="headerlink" title="A.初步"></a>A.初步</h5><ul>
<li><p><strong>一旦使用<code>\</code>就用<code>&quot;&quot;&quot;regex&quot;&quot;&quot;.r</code></strong></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726113531226.png"
                      alt="image-20240726113531226"
                ></p>
</li>
<li><p>例1 match提取方式</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;1234566 1999-10-12T12:34:56 buy http://www.taobao.com/computer/1&quot;</span></span><br><span class="line"><span class="keyword">val</span> pattern = <span class="string">&quot;([0-9]+) ([0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;T[0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;) ([a-z]+) .*&quot;</span>.r</span><br><span class="line">str <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> pattern(userid,times,action)=&gt;println(<span class="string">s&quot;<span class="subst">$&#123;userid&#125;</span>,<span class="subst">$&#123;times&#125;</span>,<span class="subst">$&#123;action&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1234566,1999-10-12T12:34:56,buy</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="B-字符串匹配"><a href="#B-字符串匹配" class="headerlink" title="B.字符串匹配"></a>B.字符串匹配</h5><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726115042787.png"
                      alt="image-20240726115042787"  
                >
</li>
<li><p>例1</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;1234566 1999-10-12T12:34:56 buy http://www.taobao.com/computer/1 1999-10-12T12:34:56&quot;</span></span><br><span class="line"><span class="keyword">val</span> pattern = <span class="string">&quot;[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;T[0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;&quot;</span>.r</span><br><span class="line"><span class="keyword">val</span> matches = pattern.findAllMatchIn(str).toList</span><br><span class="line">println(matches)</span><br><span class="line"><span class="comment">// List(1999-10-12T12:34:56, 1999-10-12T12:34:56)</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>findFirstMatchIn() 出Some和None</p>
</li>
<li><p>findAllMatchIn() 出Iterator</p>
</li>
<li><p>例2 利用偏心函数对每一条获取值并输出</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> lst = <span class="type">List</span>[<span class="type">String</span>](</span><br><span class="line">    <span class="string">&quot;INFO 2017-12-29 requestURL:/c?abc=123&amp;cde=456&quot;</span>,</span><br><span class="line">    <span class="string">&quot;INFO 2017-12-30 requestURL:/c?abc=123&amp;cde=789&quot;</span>,</span><br><span class="line">    <span class="string">&quot;INFO 2017-12-30 requestURL:/c?abc=123&amp;cde=346&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">val</span> pattern = <span class="string">&quot;&quot;&quot;([A-Z]+) ([0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;) requestURL:(/.*)&quot;&quot;&quot;</span>.r</span><br><span class="line"></span><br><span class="line">lst.collect(&#123;</span><br><span class="line">    <span class="keyword">case</span> pattern(level,times,addr)=&gt;(level,times,addr)</span><br><span class="line">&#125;).foreach(println)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="C-字符串替换"><a href="#C-字符串替换" class="headerlink" title="C.字符串替换"></a>C.字符串替换</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726115305237.png"
                      alt="image-20240726115305237"
                ></p>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据学习笔记4-Spark</title>
    <url>/2025/07/08/technology/bigdata/Hadoop4-Spark/</url>
    <content><![CDATA[<p>Hadoop4</p>
<h1 id="十-Spark"><a href="#十-Spark" class="headerlink" title="十.Spark"></a>十.Spark</h1><p>这边用2.3.4</p>
<h2 id="一-前期"><a href="#一-前期" class="headerlink" title="(一)前期"></a>(一)前期</h2><ul>
<li>MapReduce速度慢，因此用Spark速度比MapRduce快100倍，实际上10倍差不多</li>
<li>计算引擎，不启动Hadoop也能干活</li>
<li>分布式计算引擎</li>
<li>离线数据分析</li>
</ul>
<h3 id="1-使用原因"><a href="#1-使用原因" class="headerlink" title="1.使用原因"></a>1.使用原因</h3><ul>
<li>MapReduce编程模型的局限性<ul>
<li>繁杂<ul>
<li>只有Map和Reduce两个操作，复杂的逻辑需要大量的样板代码</li>
</ul>
</li>
<li>处理效率低:、<ul>
<li>Map中间结果写磁盘，Reduce写HDFS，多个Map通过HDFS交换数据</li>
<li>任务调度与启动开销大</li>
</ul>
</li>
<li>不适合迭代处理、交互式处理和流式处理</li>
</ul>
</li>
<li><strong>Spark是类Hadoop MapReduce的通用并行框架</strong><ul>
<li>Job中间输出结果可以保存在内存，不再需要读写HDFS，优先占内存</li>
<li>比MapReduce平均快10倍以上</li>
</ul>
</li>
</ul>
<h3 id="2-Spark简介"><a href="#2-Spark简介" class="headerlink" title="2.Spark简介"></a>2.Spark简介</h3><ul>
<li>加州大学伯克利分校AMP实验室，基于<strong>内存的分布式计算框架</strong></li>
<li>发展<ul>
<li>2014.5正式Spark 1.0</li>
<li>2016 1.6、2.x版本</li>
</ul>
</li>
</ul>
<h3 id="3-Spark优势"><a href="#3-Spark优势" class="headerlink" title="3.Spark优势"></a>3.Spark优势</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726135746868.png"
                      alt="image-20240726135746868"
                ></p>
<ul>
<li>spark streaming伪实时流，不怎么用</li>
<li>三种提交方式<ul>
<li>本地提交</li>
<li>YARN提交：中间还有两种</li>
</ul>
</li>
</ul>
<h3 id="4-Spark技术栈"><a href="#4-Spark技术栈" class="headerlink" title="4.Spark技术栈"></a>4.Spark技术栈</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726140808334.png"
                      alt="image-20240726140808334"
                ></p>
<h2 id="二-内容介绍"><a href="#二-内容介绍" class="headerlink" title="(二)内容介绍"></a>(二)内容介绍</h2><h3 id="1-Spark运行架构"><a href="#1-Spark运行架构" class="headerlink" title="1.Spark运行架构"></a>1.<a class="link"   href="https://zhuanlan.zhihu.com/p/636284371?page=20" >Spark运行架构<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726145529956.png"
                      alt="image-20240726145529956"
                ></p>
<ul>
<li><p>在Spark的Driver节点中，主要运行我们提交的程序，程序的入口就是SparkContext。Driver节点会加载Spark的执行环境SparkEnv, 统计Spark执行过程信息，向Cluster Manager 申请Task需要的资源节点等。Driver在执行提交的程序时，会根据Action算子提交Job。 一个Action算子提交一个Job，并将其交给DAGScheduler, DAGScheduler在submitJob时会从后向前根据血缘关系遍历，如果一个RDD是ShuffleRDD, 会将其前后分为两个Stage。之后，会将TaskSets提交给TaskScheduler, 并封装为TaskManager。最后在Worker节点上启动Executor进程，并将Task分发给Worker节点执行。</p>
<p>程序的提交执行，为一个Application, 其会通过Driver节点向Cluster Manager申请资源，然后在Worker节点启动一批Executor。每一个Executor是一个进程，其只服务于当前申请的Application。一个Worker节点上会存在多个Application申请的Executor进程，它们之间资源是相互隔离的。当分区Task（执行逻辑）分发到当前Worker的Executor上，则会在其上启动一个线程进行执行Task任务。Executor中包含一个blockManager,由于迭代计算会产生很多中间结果，可以将其存储在这个模块中，减少io操作，提高性能。</p>
</li>
<li><p>client端不一定和Driver在一起</p>
</li>
<li><p>Driver是将来运行提交代码的那台服务器</p>
</li>
<li><p>SparkContext作为核心，一个集群里只有一个，是程序的入口</p>
</li>
<li><p>每台机器每个节点相当于Worker Node。一个节点默认一个Executor</p>
</li>
<li><p>Executor是自动开辟的空间，有核有内存</p>
</li>
<li><p>Task的数量由分配给Executor的内核数量决定。是众算子分出来的一个个小任务</p>
</li>
<li><p>算子交付给每一个Executor，方法分配到Task上执行，算子给有数据的机器</p>
</li>
<li><p>MapReduce在Shuffle阶段是Reduce把Mapper拉取过来，影响效率。因此就把算子复制传到节点上并赋予编号，减少数据的传输。通过Yarn来交付，是把程序发过去。过程尽量放内存不落盘。</p>
</li>
<li><p>每一个算子都是一个Task，甚至多个Task。一个Executor可以处理一段算子</p>
</li>
<li><p>Cache是节点间用来传输少量的数据</p>
</li>
<li><p>通过repartition改分区数量。一个Task对应一个RDD分区。假设三台服务器，每台服务器2核。那么repartition(6)就会占用各两个核，超过的话会等某个结束计算后，再让它计算。</p>
</li>
</ul>
<h3 id="2-Spark架构核心组件"><a href="#2-Spark架构核心组件" class="headerlink" title="2.Spark架构核心组件"></a>2.Spark架构核心组件</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726151437724.png"
                      alt="image-20240726151437724"
                ></p>
<ul>
<li><p>Spark一般部署再Hadoop服务器上，方便找Yarn，也方便找数据。Master最好不要放在集群上，防止崩溃</p>
</li>
<li><p>如一个map算子可能会在多节点查数据，所以可能会出现多个Task</p>
</li>
<li><p>一个Job代表一串算子</p>
</li>
<li><p>一个Job分成多组Task，称为Stage。即从一串转换算子到一个行动算子就是一个Stage</p>
</li>
<li><p>一个分区要占用一个核</p>
</li>
<li><p>网上解释</p>
<ol>
<li><strong>Job</strong>：<ul>
<li>一个Job是由Spark应用程序中的一个行动（Action）触发的。行动是那些返回数据并触发计算的操作，如<code>count()</code>、<code>collect()</code>、<code>save()</code>等。</li>
<li>一个Job可以包含一个或多个Stage。</li>
</ul>
</li>
<li><strong>Stage</strong>：<ul>
<li>Stage是Job的一个阶段，代表了一组可以并行执行的任务集合。</li>
<li>Stage之间存在依赖关系，通常分为两类：窄依赖（Narrow Dependency）和宽依赖（Wide Dependency）。</li>
<li>窄依赖意味着子RDD的每个分区只依赖于父RDD的一个或少数几个分区，不需要进行数据的shuffle操作。</li>
<li>宽依赖则意味着子RDD的每个分区可能依赖于父RDD的所有分区，需要进行数据的shuffle操作。</li>
<li>一个Job从逻辑上被划分为多个Stage，每个Stage的结束标志着一个依赖的完成。</li>
<li>需要传数据了就是一个阶段</li>
</ul>
</li>
<li><strong>Task</strong>：<ul>
<li>Task是Stage中的基本执行单元，每个Task负责处理数据的一个分区。</li>
<li>Stage中的所有Task都是并行执行的，每个Task对应RDD的一个分区。</li>
<li>Task的执行是实际的计算工作，它们读取数据、执行转换操作，并产生结果。</li>
</ul>
</li>
</ol>
<p>这三个概念之间的关系可以用以下方式描述：</p>
<ul>
<li>当Spark应用程序执行一个行动操作时，它首先触发一个Job。</li>
<li>Spark的DAG（Directed Acyclic Graph，有向无环图）调度器会根据RDD之间的依赖关系将Job分解为一个或多个Stage。</li>
<li>每个Stage进一步被分解为多个Task，这些Task在集群中的不同节点上并行执行。</li>
<li><strong>窄依赖</strong>：在窄依赖的情况下，子RDD的每个分区只依赖于父RDD的一个或少数几个分区。这种情况下，一个Task确实对应处理一个分区的数据。</li>
<li><strong>宽依赖</strong>：在宽依赖的情况下，子RDD的每个分区可能依赖于父RDD的所有分区，需要进行数据的shuffle操作。在这种情况下，一个Task可能需要处理来自多个分区的数据。</li>
<li>父RDD中的一个Task就是一个分区</li>
</ul>
</li>
</ul>
<h3 id="3-Spark-API"><a href="#3-Spark-API" class="headerlink" title="3.Spark API"></a>3.Spark API</h3><ul>
<li><em><strong>RDD</strong></em><ul>
<li>Spark核心，主要数据抽象</li>
<li>类似数组</li>
<li>弹性分布式数据集</li>
<li>存储的是算子，相当于高级方法</li>
</ul>
</li>
<li><em><strong>Dataset</strong></em><ul>
<li>从Spark1.6开始引入的新的抽象，特定<strong>领域对象</strong>中的强类型集合，它可以使用函数或者相关操作并行地进行转换等操作</li>
<li>类似对象数组</li>
</ul>
</li>
<li><em><strong>DataFrame</strong></em><ul>
<li>DataFrame是特殊的Dataset</li>
<li>结构化的RDD</li>
<li>长的像表</li>
</ul>
</li>
</ul>
<h3 id="4-RDD"><a href="#4-RDD" class="headerlink" title="4.RDD"></a>4.RDD</h3><h4 id="A-解释"><a href="#A-解释" class="headerlink" title="A.解释"></a>A.解释</h4><ul>
<li>简单的解释<ul>
<li>RDD是将数据项拆分为多个分区的集合，存储在集群的工作节点上的内存和磁盘中，并执行正确的操作</li>
</ul>
</li>
<li>复杂的解释<ul>
<li>RDD是用于数据转换的接口</li>
<li>RDD指向了存储在HDFS、Cassandra、HBase等、或缓存(内存、内存+磁盘、仅磁盘等)，或在故障或缓存收回时重新计算其他RDD分区中的数据</li>
</ul>
</li>
<li><strong>RDD中是<em>没有数据</em>的，里面只有算子和指引对象(数据地址)，是分区集合</strong></li>
<li>是spark核心</li>
</ul>
<h4 id="B-完整解释-重要"><a href="#B-完整解释-重要" class="headerlink" title="B.完整解释(重要)"></a>B.完整解释(重要)</h4><ul>
<li><strong>RDD是弹性分布式数据集(Resilient Distributed Datasets)</strong><ul>
<li>分布式数据集<ul>
<li>RDD是<strong>只读的</strong>、分区记录的集合，每个分区分布在集群的不同节点上</li>
<li>RDD并<strong>不存储</strong>真正的数据，只是对数据和操作的描述</li>
</ul>
</li>
<li>弹性<ul>
<li>RDD<strong>默认存放</strong>在内存中，当内存不足，Spark自动将RDD写入磁盘</li>
</ul>
</li>
<li>容错性<ul>
<li>根据数据血统(设置检查点ckeckpoint)，可以<strong>自动</strong>从节点失败中恢复分区</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="C-DAG"><a href="#C-DAG" class="headerlink" title="C.DAG"></a>C.DAG</h4><ul>
<li>有向无环图，算子是不能成环的</li>
</ul>
<h4 id="D-特性"><a href="#D-特性" class="headerlink" title="D.特性"></a>D.特性</h4><ul>
<li>一系列的**分区(分片)**信息，每个任务处理一个分区</li>
<li>每个分区上都有<strong>compute函数</strong>，计算该分区中的数据</li>
<li>RDD之间有一系列的<strong>依赖</strong></li>
<li><strong>分区器</strong>决定数据(key-value)分配至哪个分区</li>
<li><strong>优先位置列表</strong>，将计算任务分派到其所在处理数据块的存储位置</li>
</ul>
<h4 id="E-RDD的使用"><a href="#E-RDD的使用" class="headerlink" title="E.RDD的使用"></a>E.RDD的使用</h4><h5 id="a-使用集合创建"><a href="#a-使用集合创建" class="headerlink" title="a.使用集合创建"></a>a.使用集合创建</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/13a5ff67-ed29-4a8f-ac9f-27a4fafe04a5.png"
                      alt="13a5ff67-ed29-4a8f-ac9f-27a4fafe04a5"
                ></p>
<p><code>parallelize</code>是用于变成RDD的</p>
<p><code>makeRDD</code></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyPartition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;part&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="type">SparkContext</span>.getOrCreate(conf)</span><br><span class="line">    <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line">    <span class="keyword">val</span> size = rdd.partitions.size</span><br><span class="line">    println(size)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我的电脑16，因为16核，*改多少最后就会输出多少，也可以在parallelized最后多加一个数字</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>查看实际的分区</p>
<p><code>mapPartitionsWithIndex</code></p>
</li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyPartition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;part&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="type">SparkContext</span>.getOrCreate(conf)</span><br><span class="line">    <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>),<span class="number">4</span>)</span><br><span class="line">      .mapPartitionsWithIndex((x,iter)=&gt;&#123;</span><br><span class="line">        <span class="keyword">val</span> str=iter.toIterator.toList.mkString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="type">List</span>(<span class="string">s&quot;分区号:<span class="subst">$&#123;x&#125;</span>,分区数据:<span class="subst">$&#123;str&#125;</span>&quot;</span>).toIterator</span><br><span class="line">      &#125;).foreach(println);</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">分区号:<span class="number">1</span>,分区数据:<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">分区号:<span class="number">3</span>,分区数据:<span class="number">6</span>,<span class="number">7</span></span><br><span class="line">分区号:<span class="number">2</span>,分区数据:<span class="number">4</span>,<span class="number">5</span></span><br><span class="line">分区号:<span class="number">0</span>,分区数据:<span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>自己来进行分区，<strong>分区一定要用键值对，要重写分区的方法</strong></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyPartition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;part&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="type">SparkContext</span>.getOrCreate(conf)</span><br><span class="line">    <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Seq</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>),<span class="number">4</span>)</span><br><span class="line">      .map(x=&gt;(x,x))</span><br><span class="line">      .partitionBy(<span class="keyword">new</span> <span class="type">MyPart</span>(<span class="number">4</span>))</span><br><span class="line">      .mapPartitionsWithIndex((x,iter)=&gt;&#123;</span><br><span class="line">        <span class="keyword">val</span> str=iter.toIterator.toList.mkString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="type">List</span>(<span class="string">s&quot;分区号:<span class="subst">$&#123;x&#125;</span>,分区数据:<span class="subst">$&#123;str&#125;</span>&quot;</span>).toIterator</span><br><span class="line">      &#125;).foreach(println);</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPart</span>(<span class="params">n:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Partitioner</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">numPartitions</span></span>: <span class="type">Int</span> = n</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartition</span></span>(key: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> keyNum = key.toString.toInt</span><br><span class="line">    keyNum%numPartitions</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="b-通过加载文件产生RDD"><a href="#b-通过加载文件产生RDD" class="headerlink" title="b.通过加载文件产生RDD"></a>b.通过加载文件产生RDD</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726173911665.png"
                      alt="image-20240726173911665"
                ></p>
<h5 id="c-RDD操作-重要"><a href="#c-RDD操作-重要" class="headerlink" title="c.RDD操作(重要)"></a>c.RDD操作(重要)</h5><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/b7debef9-c276-4998-a8f6-b4f0338d9996.png"
                      alt="b7debef9-c276-4998-a8f6-b4f0338d9996"
                ></p>
</li>
<li><p>转换算子一开始都不干活，直到遇到一个行动算子</p>
</li>
<li><p>简而言之，如果你在Spark程序中看到一个操作返回一个新的RDD，那么它很可能是一个转换算子。如果一个操作返回一个值（如整数、列表等），那么它很可能是一个行动算子。</p>
</li>
<li><p><strong>转换算子</strong></p>
<ul>
<li><p><code>map</code></p>
</li>
<li><p><code>filter</code></p>
</li>
<li><p><code>mapValues</code></p>
<p>原RDD中的Key保持不变，与新的Value一起组成新的RDD中的元素，仅适用于PairRDD</p>
</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240727100517510.png"
                      alt="image-20240727100517510" style="zoom:33%;" 
                >
</li>
<li><p><code>makeRDD</code></p>
</li>
<li><p><code>cache</code></p>
</li>
<li><p><code>persist</code></p>
</li>
</ul>
</li>
<li><p><strong>动作算子</strong></p>
<ul>
<li><p><code>count</code></p>
</li>
<li><p><code>collect</code></p>
<p>但是这个collect不是scala那个。是以Array形式返回RDD所有数据，十分危险，要消耗大量内存。<code>collect</code>可以从RDD变为Array</p>
</li>
<li><p><code>take</code></p>
<p>take后的是Array不是RDD，可再用<code>parallelize</code>转为RDD就可以继续了，也可以用makeRDD</p>
</li>
<li><p><code>reduce</code></p>
</li>
<li><p><code>foreach</code></p>
</li>
<li><p><code>lookup</code></p>
<p>用于PairRDD，返回K对应的所有V值</p>
</li>
<li><p><code>最值</code></p>
</li>
<li><p><code>saveAsTextFile</code></p>
<p>单反是save都是行动算子，RDD有。落盘文件数量按分区来。如果放在一个文件中，那么就用makeRDD(arr,1)或者使用repartition来设置一个分区</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.textFile(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\customers.csv&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> arr = rdd.map(line =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">  <span class="comment">//      (infos(2),infos(1))</span></span><br><span class="line">  (infos(<span class="number">1</span>), infos(<span class="number">2</span>))</span><br><span class="line">&#125;).groupByKey().mapValues(_.toList.size)</span><br><span class="line">  .repartition(<span class="number">1</span>).sortBy(-_._2).take(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">sc.makeRDD(arr,<span class="number">1</span>).saveAsTextFile(<span class="string">&quot;e:/Temp/ttt&quot;</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h4 id="F-RDD持久化"><a href="#F-RDD持久化" class="headerlink" title="F.RDD持久化"></a>F.RDD持久化</h4><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><ul>
<li><p><strong>cache和persist是减少重复计算</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/d406eadf-0eb6-4bcd-bbd7-294dd14ea5cc.png"
                      alt="d406eadf-0eb6-4bcd-bbd7-294dd14ea5cc"
                ></p>
</li>
<li><p>姓名全部排序输出，用cache()把转换算子的结果放入<code>cache()</code>来提高效率，重复用的变量尽量都要cache().也得碰到行动算子才会运行</p>
</li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp01</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;exp01&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="type">SparkContext</span>.getOrCreate(conf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.textFile(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\customers.csv&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> arr = rdd.map(line =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      (infos(<span class="number">1</span>), infos(<span class="number">2</span>))</span><br><span class="line">    &#125;).cache()</span><br><span class="line">    <span class="keyword">val</span> arr1 = arr.map(x=&gt;(x._2,x._1))</span><br><span class="line">    countRes(arr)</span><br><span class="line">    countRes(arr1)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">countRes</span></span>(rdd:<span class="type">RDD</span>[(<span class="type">String</span>,<span class="type">String</span>)])=&#123;</span><br><span class="line">    rdd.groupByKey().mapValues(_.toList.size)</span><br><span class="line">      .repartition(<span class="number">1</span>).sortBy(-_._2).take(<span class="number">10</span>).foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>但是内存很有可能没这么打，用<code>persist</code>，自动cache内存不够自动落盘</p>
<ul>
<li><h4 id="persist中写缓存策略"><a href="#persist中写缓存策略" class="headerlink" title="persist中写缓存策略"></a>persist中写缓存策略</h4><ul>
<li><code>MEMORY_ONLY</code>只放内存</li>
<li><code>DISK_ONLY</code>只存硬盘</li>
<li><code>MEMORY_AND_DISK</code>先内存再硬盘</li>
<li><code>MEMORY_AND_DISK_SER</code>序列化存储，提高效率</li>
<li><code>MEMORY_AND_DISK_2</code> 内存和落盘都有两个副本（吃内存，不推荐）</li>
</ul>
</li>
<li><p>改为</p>
</li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> arr = rdd.map(line =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    (infos(<span class="number">1</span>), infos(<span class="number">2</span>))</span><br><span class="line">&#125;).persist(<span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="检查点"><a href="#检查点" class="headerlink" title="检查点"></a>检查点</h5><ul>
<li><p><strong>检查点</strong> 使用来保存相关配置，用于崩溃重启读取处理。一般放在大型计算之前做检查点</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240727115041305.png"
                      alt="image-20240727115041305"
                ></p>
</li>
<li><p>改为 不管血统，只保留结果数据。碰到行动算子才会干活</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置检查点目录</span></span><br><span class="line">sc.setCheckpointDir(<span class="string">&quot;e:/Temp/ckpt&quot;</span>) <span class="comment">// 检查点文件</span></span><br><span class="line"><span class="keyword">val</span> rdd = sc.textFile(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\customers.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> arr = rdd.map(line =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">  (infos(<span class="number">1</span>), infos(<span class="number">2</span>))</span><br><span class="line">&#125;)</span><br><span class="line">arr.checkpoint() <span class="comment">// 做个检查点</span></span><br><span class="line">arr</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="G-RDD共享变量"><a href="#G-RDD共享变量" class="headerlink" title="G.RDD共享变量"></a>G.RDD共享变量</h4><h5 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h5><ul>
<li><p><strong>广播变量</strong>:允许开发者将一个只读变量(Driver端)缓存到每个节点(Executor)上，而不是每个任务传递一个副本</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240727151925528.png"
                      alt="image-20240727151925528"
                ></p>
<p><strong>只能针对于能够序列化的对象</strong></p>
</li>
<li><p>广播变量，只读不改</p>
</li>
<li><p>设备温度监控</p>
<ol>
<li><p><strong>普通</strong></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TemperatureWatch</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;tw&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="type">SparkContext</span>.getOrCreate(conf)</span><br><span class="line">    <span class="comment">// 读阈值文件 某台节点上</span></span><br><span class="line">    <span class="keyword">val</span> threshold = sc.textFile(<span class="string">&quot;e:/Temp/thread.txt&quot;</span>).cache()</span><br><span class="line">    <span class="comment">// 读设备温度监控数据 某几个节点上</span></span><br><span class="line">    <span class="keyword">val</span> macdata = sc.textFile(<span class="string">&quot;e:/Temp/mactemp.csv&quot;</span>).cache()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将阈值文件转为Map(机器部位编号,(最低温度，最高温度))</span></span><br><span class="line">    <span class="keyword">val</span> thresholdMap:<span class="type">Map</span>[<span class="type">String</span>,(<span class="type">Int</span>,<span class="type">Int</span>)] = threshold.map(line =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      (infos(<span class="number">0</span>), (infos(<span class="number">1</span>).toInt, infos(<span class="number">2</span>).toInt))</span><br><span class="line">    &#125;).collect().toMap</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据设备监控数据和阈值文件将超过阈值的数据过滤出来</span></span><br><span class="line">    macdata.map(line=&gt;&#123;</span><br><span class="line">      <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      <span class="comment">// 根据阈值Map找到机器对应部位的最高最低温度</span></span><br><span class="line">      <span class="keyword">val</span> (minTemp,maxTemp):(<span class="type">Int</span>,<span class="type">Int</span>)=thresholdMap.get(infos(<span class="number">0</span>)).get</span><br><span class="line">      <span class="keyword">if</span>(infos(<span class="number">1</span>).toInt&lt;minTemp || infos(<span class="number">1</span>).toInt&gt;maxTemp) &#123;</span><br><span class="line">        (infos(<span class="number">0</span>),infos(<span class="number">1</span>).toInt,infos(<span class="number">2</span>),<span class="string">&quot;温度异常&quot;</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        (infos(<span class="number">0</span>),infos(<span class="number">1</span>).toInt,infos(<span class="number">2</span>),<span class="string">&quot;温度正常&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).foreach(println)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们会发现阈值文件特别小，就要放进内存，但是本来就是放到内存中的。但是，Spark是把算子交给有数据的节点，读进内存只是当前的节点。而执行<code>val (minTemp,maxTemp):(Int,Int)=thresholdMap.get(infos(0)).get</code>这条语句的时候要拉取该节点内存数据，大文件节点拉小文件没问题，但要是是小文件拉大文件，资源消耗太大，要让小文件存到大文件所在的节点中。因此用2的方法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240727151524247.png"
                      alt="image-20240727151524247"
                ></p>
</li>
<li><p><strong>广播变量方式</strong></p>
<p><strong>共享变量</strong>，把小的数据发送到每一个要用的节点中。这句加在取值后</p>
<p>读取的时候一定要先用<code>.value</code>读出来</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">     <span class="comment">// 将阈值Map存放到共享变量中</span></span><br><span class="line"><span class="keyword">val</span> tm = sc.broadcast(thresholdMap)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> thresholdMap:<span class="type">Map</span>[<span class="type">String</span>,(<span class="type">Int</span>,<span class="type">Int</span>)] = threshold.map(line =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    (infos(<span class="number">0</span>), (infos(<span class="number">1</span>).toInt, infos(<span class="number">2</span>).toInt))</span><br><span class="line">&#125;).collect().toMap</span><br><span class="line"><span class="comment">// 将阈值Map存放到共享变量中</span></span><br><span class="line"><span class="keyword">val</span> tm = sc.broadcast(thresholdMap) <span class="comment">// ------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据设备监控数据和阈值文件将超过阈值的数据过滤出来</span></span><br><span class="line">macdata.map(line=&gt;&#123;</span><br><span class="line">    <span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="comment">// 通过共享变量获取map</span></span><br><span class="line">    <span class="keyword">val</span> tmap = tm.value <span class="comment">// ------------------</span></span><br><span class="line">    <span class="comment">// 根据阈值Map找到机器对应部位的最高最低温度</span></span><br><span class="line">    <span class="keyword">val</span> (minTemp,maxTemp):(<span class="type">Int</span>,<span class="type">Int</span>)=tmap.get(infos(<span class="number">0</span>)).get <span class="comment">// ---------</span></span><br><span class="line">    <span class="keyword">if</span>(infos(<span class="number">1</span>).toInt&lt;minTemp || infos(<span class="number">1</span>).toInt&gt;maxTemp) &#123;</span><br><span class="line">        (infos(<span class="number">0</span>),infos(<span class="number">1</span>).toInt,infos(<span class="number">2</span>),<span class="string">&quot;温度异常&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        (infos(<span class="number">0</span>),infos(<span class="number">1</span>).toInt,infos(<span class="number">2</span>),<span class="string">&quot;温度正常&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).foreach(println)</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ul>
<h5 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h5><ul>
<li><p>只允许added操作，常用于实现计数</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240727155526138.png"
                      alt="image-20240727155526138" style="zoom:50%;" 
                >
</li>
<li><p>类似于一种原子的操作</p>
</li>
<li><p>例子</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;part&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> sc = <span class="type">SparkContext</span>.getOrCreate(conf)</span><br><span class="line"><span class="comment">//    var cnt=0</span></span><br><span class="line"><span class="keyword">var</span> cnt=sc.accumulator(<span class="number">0</span>,<span class="string">&quot;cnt&quot;</span>)</span><br><span class="line">sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)).foreach(n=&gt;cnt+=n)</span><br><span class="line">println(cnt.value)</span><br><span class="line"></span><br><span class="line">sc.stop()</span><br><span class="line"><span class="comment">// 输出55，用ctn=0的方式就不行，出0。因为RDD的操作是在服务器上的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在都这么用</span></span><br><span class="line"><span class="keyword">val</span> res = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)).reduce(_ + _)</span><br><span class="line">println(res)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="H-RDD分区设计"><a href="#H-RDD分区设计" class="headerlink" title="H.RDD分区设计"></a>H.RDD分区设计</h4><ul>
<li>分区大小限制为2GB</li>
<li>分区太少<ul>
<li>不利于并发</li>
<li>更容易受数据倾斜影响</li>
<li>groupBy,reduceByKey,sortByKey等内存压力增大</li>
</ul>
</li>
<li>分区过多<ul>
<li>Shuffle开销越大</li>
<li>创建任务开销越大</li>
</ul>
</li>
<li>经验<ul>
<li>每个分区大约128MB</li>
<li>如果分区小于但接近2000，则设置为大于2000</li>
</ul>
</li>
</ul>
<h3 id="5-Spark-WordCount运行原理"><a href="#5-Spark-WordCount运行原理" class="headerlink" title="5.Spark WordCount运行原理"></a>5.Spark WordCount运行原理</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240727104815941.png"
                      alt="image-20240727104815941"
                ></li>
<li>一旦出现shuffle就分stage(阶段)，往往是有By操作时</li>
</ul>
<h4 id="A-划分stage原因"><a href="#A-划分stage原因" class="headerlink" title="A.划分stage原因"></a>A.划分stage原因</h4><ul>
<li>数据本地化<ul>
<li>移动计算，而不是移动数据</li>
<li>保证一个Stage内不会发生数据移动</li>
</ul>
</li>
</ul>
<h4 id="B-Spark-Shuffle过程"><a href="#B-Spark-Shuffle过程" class="headerlink" title="B.Spark Shuffle过程"></a>B.Spark Shuffle过程</h4><ul>
<li>宽依赖就要shuffle</li>
<li>数据在shuffle中很有可能落盘</li>
<li>在分区之间重新分配数据<ul>
<li>父RDD中同一分区中的数据按照算子要求重新进入子RDD的不同分区中</li>
<li><strong>中间结果写入磁盘</strong></li>
<li>由<strong>子RDD拉取数据，而不是由父RDD推送</strong></li>
<li>默认情况下，Shuffle不会改变分区数量</li>
</ul>
</li>
</ul>
<h4 id="C-依赖关系"><a href="#C-依赖关系" class="headerlink" title="C.依赖关系"></a>C.依赖关系</h4><ul>
<li><strong>Lineage：血统、遗传</strong></li>
<li>记录了RDD之前的转换操作和依赖关系</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240727105552098.png"
                      alt="image-20240727105552098"
                ></li>
<li>需要shuffle的都是<strong>宽依赖</strong>，<strong>带By的都是宽</strong>，join有可能宽有可能窄，distinct宽但有可能不是，要让内部的By不运行</li>
<li>要自己去改算子的先后以及其他方式提高效率。窄依赖的效率高</li>
<li>血统信息包括转换操作，依赖关系，数据流，执行计划，内存和磁盘的使用</li>
</ul>
<h3 id="6-数据倾斜"><a href="#6-数据倾斜" class="headerlink" title="6.数据倾斜"></a>6.数据倾斜</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240727161815648.png"
                      alt="image-20240727161815648"
                ></p>
<p>加盐加在前面，否则按照字典排序还是分不开</p>
<h2 id="三-安装"><a href="#三-安装" class="headerlink" title="(三)安装"></a>(三)安装</h2><p><a class="link"   href="https://github.com/Sabthever/Pictures1/blob/main/Download_Resources/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%85%AB%E4%B9%8BSpark%E5%AE%89%E8%A3%85.docx" >服务器安装<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="1-服务器安装（单机版）"><a href="#1-服务器安装（单机版）" class="headerlink" title="1.服务器安装（单机版）"></a>1.服务器安装（单机版）</h3><ul>
<li>该例子中所用的spark版本为<code>spark-2.3.4-bin-hadoop2.6.tgz</code></li>
</ul>
<ol>
<li><p>把相应包放到<code>/opt</code>中</p>
</li>
<li><p>命令执行</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxf spark-2.3.4-bin-hadoop2.6.tgz</span><br><span class="line"><span class="built_in">mv</span> spark-2.3.4-bin-hadoop2.6 soft/spark234</span><br><span class="line"><span class="built_in">cd</span> soft/spark234/conf</span><br><span class="line"><span class="built_in">cp</span> slaves.template slaves</span><br><span class="line"><span class="built_in">cp</span> spark-env.sh.template spark-env.sh</span><br></pre></td></tr></table></figure></div>

<p><code>vim spark-env.sh</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SPARK_MASTER_HOST=192.168.179.139</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_PORT=7077</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_CORES=2</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_MEMORY=3g</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_WEBUI_PORT=8888</span><br></pre></td></tr></table></figure></div>

<p><code>vim ../sbin/spark-config.sh</code>最后加</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/soft/jdk180</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在<code>/opt/soft/spark234/sbin</code>中有启动的脚本，和Hadoop的脚本名重复</p>
</li>
<li><p>启动与关闭</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/soft/spark234/sbin</span><br><span class="line">./start-all.sh</span><br><span class="line"><span class="comment"># 多出了Master和Worker</span></span><br><span class="line">./stop-all.sh</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="四-使用"><a href="#四-使用" class="headerlink" title="(四)使用"></a>(四)使用</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240726141101384.png"
                      alt="image-20240726141101384"
                ></p>
<h3 id="1-第一次使用-idea-无环境"><a href="#1-第一次使用-idea-无环境" class="headerlink" title="1.第一次使用(idea&#x2F;无环境)"></a>1.第一次使用(idea&#x2F;无环境)</h3><h4 id="A-导入包"><a href="#A-导入包" class="headerlink" title="A.导入包"></a>A.导入包</h4><div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="B-导入scala的库"><a href="#B-导入scala的库" class="headerlink" title="B.导入scala的库"></a>B.导入scala的库</h4><ul>
<li><p>可以用之前的方法导入</p>
</li>
<li><p>也可以用这种方法</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>这边用原本的方法</p>
</li>
</ul>
<h4 id="C-使用Scala统计字数"><a href="#C-使用Scala统计字数" class="headerlink" title="C.使用Scala统计字数"></a>C.使用Scala统计字数</h4><ul>
<li>正式写代码，最好使用.getOrCreate来建立，<code>val sc = SparkContext.getOrCreate(conf)</code></li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 1.开启Spark配置</span></span><br><span class="line">    <span class="comment">// Master设置模式(Yarn/K8S)(管内存的是谁)</span></span><br><span class="line">    <span class="comment">// *代表利用计算机上所有的资源 数字就是调用多少核</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;wc&quot;</span>)</span><br><span class="line">    <span class="comment">// 2.获取核心对象</span></span><br><span class="line">    <span class="comment">// 由谁来指挥</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="comment">// 3.读文件进行单词统计</span></span><br><span class="line">    sc.textFile(<span class="string">&quot;e:/Temp/word.txt&quot;</span>)</span><br><span class="line">      .flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_,<span class="number">1</span>))</span><br><span class="line">      .reduceByKey(_+_).foreach(println)</span><br><span class="line">      <span class="comment">// 上面那个函数按键分组，按值相加</span></span><br><span class="line">    <span class="comment">// 4.关闭核心</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="D-使用Java统计字数"><a href="#D-使用Java统计字数" class="headerlink" title="D.使用Java统计字数"></a>D.使用Java统计字数</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaSparkContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWordCount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SparkConf</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SparkConf</span>().setAppName(<span class="string">&quot;wc&quot;</span>)</span><br><span class="line">                .setMaster(<span class="string">&quot;local[*]&quot;</span>);</span><br><span class="line">        <span class="type">JavaSparkContext</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaSparkContext</span>(conf);</span><br><span class="line">        JavaRDD&lt;String&gt; words = sc.textFile(<span class="string">&quot;e:/Temp/word.txt&quot;</span>);</span><br><span class="line">         <span class="comment">// 只接受迭代器</span></span><br><span class="line">        words.flatMap(line-&gt; Arrays.asList(line.split(<span class="string">&quot; &quot;</span>)).iterator())</span><br><span class="line">                .groupBy(x-&gt;x)</span><br><span class="line">                .mapValues(iter-&gt;&#123; <span class="comment">// 这里面是个迭代器没有size</span></span><br><span class="line">                    Iterator&lt;String&gt; itor = iter.iterator();</span><br><span class="line">                    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(;itor.hasNext();itor.next())&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> count;</span><br><span class="line">                &#125;)</span><br><span class="line">                .foreach(x-&gt; System.out.println(x));</span><br><span class="line">        sc.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>核心的那条语句可以改成</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">words.flatMap(line-&gt; Arrays.asList(line.split(<span class="string">&quot; &quot;</span>)).iterator())</span><br><span class="line">    .mapToPair(word-&gt;<span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;String,Integer&gt;(word,<span class="number">1</span>))</span><br><span class="line">    .reduceByKey((x,y)-&gt;x+y)</span><br><span class="line">    .foreach(x-&gt; System.out.println(x));</span><br></pre></td></tr></table></figure></div>

<p>其中mapToPair可以告诉JVM我出了元组</p>
<h3 id="2-程序提交服务器-发布"><a href="#2-程序提交服务器-发布" class="headerlink" title="2.程序提交服务器(发布)"></a>2.程序提交服务器(发布)</h3><ul>
<li><p><a class="link"   href="https://blog.csdn.net/weixin_42326851/article/details/140298182" >提交参数详解<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>两种模式</p>
<ol>
<li>Standalone</li>
<li>yarn提交</li>
</ol>
</li>
</ul>
<h4 id="A-Standalone"><a href="#A-Standalone" class="headerlink" title="A.Standalone"></a>A.Standalone</h4><ul>
<li><p>Standalone ： 无yarn操作</p>
<ol>
<li>Client通知Master提交任务</li>
<li>Master将work资源推荐给Client</li>
<li>Client找到WorkNode节点</li>
<li>WorkNode开启一个Executor</li>
<li>资源不足则WorkNode会通知Client再找Master要新的资源</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240730134342873.png"
                      alt="image-20240730134342873"
                ></p>
</li>
<li><p>操作</p>
<ol>
<li><p>建立相关Scala相关工程，写好相关代码</p>
<p>(不全的)</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.3.4<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>再pom.xml中build里面的全删了，在里面加入，这是用来打包瘦包的 </p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-scala-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>或者 用来打胖包的</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单词统计</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWords</span>(<span class="params">line:<span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>).appName(<span class="string">&quot;mytest&quot;</span>).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="keyword">val</span> df = spark.createDataFrame(<span class="type">List</span>(</span><br><span class="line">      <span class="type">MyWords</span>(<span class="string">&quot;Hello World&quot;</span>),</span><br><span class="line">      <span class="type">MyWords</span>(<span class="string">&quot;Hello Spark&quot;</span>)</span><br><span class="line">    )).select(explode(split($<span class="string">&quot;line&quot;</span>,<span class="string">&quot; &quot;</span>)).as(<span class="string">&quot;word&quot;</span>))</span><br><span class="line">      .groupBy(<span class="string">&quot;word&quot;</span>).agg(count($<span class="string">&quot;word&quot;</span>).as(<span class="string">&quot;word_num&quot;</span>))</span><br><span class="line">    df.show()</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Maven-&gt;clean-&gt;package</p>
<p>把打包的<code>mypacket-1.0-SNAPSHOT.jar</code>拿出放入服务器中，在服务器上打开Hadoop、yarn和Spark。</p>
</li>
<li><p>Master服务器提交</p>
<p>两种提交方式，一种为cluster一种是client，cluster会把把算子到各个节点，client会汇总到客户端</p>
<p><a href="https://www.baidu.com/link?url=TqeEtqOZe2F8Q1sibqQ_ctTIaw5L4w3EX1REXbAmtjIp85JYdxq9qqc3WN4xzhiBA7ubJZqnDe6Nbm7BBYPn5XhOXtkfDY_aLR_eQ_tiT2_&wd=&eqid=aa4eb0da010216a20000000566c99d3f"><em>spark提交</em>任务的几种<em>方式</em>_spark 提交模式-CSDN博客</a></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">   <span class="built_in">cd</span> /opt/soft/spark234/bin/</span><br><span class="line">   ./spark-submit \</span><br><span class="line">   --class com.njupt.mypackage.App \</span><br><span class="line">   --master spark://192.168.179.139:7077 \</span><br><span class="line">   --executor-memory 3G \</span><br><span class="line">--total-executor-cores 4 \</span><br><span class="line">   --deploy-mode cluster \</span><br><span class="line">   /opt/mypacket-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">   ./spark-submit \</span><br><span class="line">   --class com.njupt.mypackage.App \			<span class="comment"># 程序包路径</span></span><br><span class="line">   --master spark://192.168.179.139:7077 \		<span class="comment"># Master地址</span></span><br><span class="line">   --executor-memory 3G \						<span class="comment"># 单个executor内存</span></span><br><span class="line">--total-executor-cores 4 \					<span class="comment"># 总核数3个</span></span><br><span class="line">   --deploy-mode cluster \						<span class="comment"># 使用--deploy-mode cluster参数提交作业时，意味着你希望Spark作业的驱动程序在集群中运行，而不是在提交作业的客户端机器上运行。这边结果给client，信息最后一定是在driver上看到的</span></span><br><span class="line">   /opt/mypacket-1.0-SNAPSHOT.jar				<span class="comment"># 包的主机中路径，后面可以跟参数</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ul>
<h4 id="B-yarn服务器提交"><a href="#B-yarn服务器提交" class="headerlink" title="B.yarn服务器提交"></a>B.yarn服务器提交</h4><ol>
<li><p>先配yarn环境</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">在/etc/profile中(要现有)YARN_HOME</span><br><span class="line">上面已经有</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/soft/hadoop260</span><br><span class="line"><span class="built_in">export</span> YARN_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"></span><br><span class="line">下面要写</span><br><span class="line"><span class="comment">#Yarn Env</span></span><br><span class="line"><span class="built_in">export</span> YARN_CONF_DIR=<span class="variable">$YARN_HOME</span>/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">查看一下</span><br><span class="line"><span class="comment"># echo $YARN_CONF_DIR</span></span><br><span class="line">/opt/soft/hadoop260/etc/hadoop</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>代码注释掉<code>.master(&quot;local[*]&quot;)</code>重打包，覆盖原本包</p>
</li>
<li><p>命令</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/soft/spark234/bin/</span><br><span class="line">./spark-submit \</span><br><span class="line">--class com.njupt.mypackage.App \</span><br><span class="line">--master yarn \		<span class="comment"># 改了这个</span></span><br><span class="line">--executor-memory 3G \</span><br><span class="line">--total-executor-cores 4 \</span><br><span class="line">--deploy-mode client \ <span class="comment">#改了这个 发布的时候还是要用cluster</span></span><br><span class="line">/opt/mypacket-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="五-基础学习"><a href="#五-基础学习" class="headerlink" title="(五)基础学习"></a>(五)基础学习</h2><ul>
<li><p>repartition设置分区个数</p>
</li>
<li><p>做全体排序的时候，要设置分区为1</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> infos = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">(infos(<span class="number">2</span>),infos(<span class="number">1</span>))</span><br><span class="line">&#125;).groupByKey().mapValues(_.toList.size)</span><br><span class="line">.repartition(<span class="number">1</span>).sortBy(-_._2).take(<span class="number">5</span>)</span><br><span class="line">.foreach(println)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-SparkSession"><a href="#1-SparkSession" class="headerlink" title="1.SparkSession"></a>1.SparkSession</h3><ul>
<li><p><strong><code>SparkSession</code>的使用</strong></p>
</li>
<li><p>算子要有顺序，比如要先分组才能找到相应的聚合项</p>
</li>
<li><p><strong>装载CSV数据源</strong>可用sql的语句，可以展示表</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//    val conf = new SparkConf().setAppName(&quot;exp03&quot;).setMaster(&quot;local[*]&quot;)</span></span><br><span class="line">    <span class="comment">//    val sc = SparkContext.getOrCreate(conf)</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//    val rdd = sc.textFile(&quot;E:\\ProgramFile\\BigDataStudy\\data\\customer_details.csv&quot;)</span></span><br><span class="line">    <span class="comment">//    // 获取首行信息</span></span><br><span class="line">    <span class="comment">//    val first = rdd.first()</span></span><br><span class="line">    <span class="comment">//    // 通过过滤器去除首行</span></span><br><span class="line">    <span class="comment">//    rdd.filter(line =&gt; !line.equals(first)).take(5).foreach(println)</span></span><br><span class="line">    <span class="comment">//    sc.stop()</span></span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    .appName(<span class="string">&quot;exp03&quot;</span>).getOrCreate();</span><br><span class="line">    <span class="comment">// 读有表头的文件</span></span><br><span class="line">    <span class="keyword">val</span> df = spark.read.option(<span class="string">&quot;header&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">    .csv(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\customer_details.csv&quot;</span>);</span><br><span class="line">    <span class="comment">//    df.show();</span></span><br><span class="line">    <span class="comment">// 给df起个名字</span></span><br><span class="line">    df.createTempView(<span class="string">&quot;customer&quot;</span>)</span><br><span class="line">    <span class="comment">// 尽心查询</span></span><br><span class="line">    spark.sql(</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select count(*) s_name from customer where first_name like &#x27;S%&#x27;</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).show();</span><br><span class="line">    spark.stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><a class="link"   href="https://blog.csdn.net/Helen_1997_1997/article/details/128222147" >sql经典50题<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>sql中的函数通过<code>import org.apache.spark.sql.functions._</code>导入，要用<code>spark.implicits._</code>要先导入前面的包，这个spark不是绝对的，而是前面开启配置时的对象</p>
</li>
<li><p>SparkSession后的算子</p>
<ul>
<li><p><code>show(5,false)</code>显示5行不剪切</p>
</li>
<li><p><code>withColumn</code>多加一列</p>
<p>这儿是把这两列用空格的方式相连生成新一列</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">df.withColumn(<span class="string">&quot;name&quot;</span>,concat_ws(<span class="string">&quot; &quot;</span>,</span><br><span class="line">  col(<span class="string">&quot;first_name&quot;</span>),col(<span class="string">&quot;last_name&quot;</span>))).show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>withColumnRenamed</code>改列名</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">df.withColumnRenamed(<span class="string">&quot;first_name&quot;</span>,<span class="string">&quot;fname&quot;</span>).show();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>toDF</code>变为DataFrame，起列名</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> df1 = spark.read.csv(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\customers.csv&quot;</span>)</span><br><span class="line">.toDF(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;fname&quot;</span>,<span class="string">&quot;lname&quot;</span>,<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;xxx1&quot;</span>,<span class="string">&quot;address&quot;</span>,<span class="string">&quot;area&quot;</span>,<span class="string">&quot;ar&quot;</span>,<span class="string">&quot;num&quot;</span>)</span><br><span class="line">.show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>RDD转DataFrame</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须紧跟在toDF上</span></span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line">spark.sparkContext.parallelize(<span class="type">Seq</span>((<span class="number">1</span>,<span class="string">&quot;zs&quot;</span>),(<span class="number">2</span>,<span class="string">&quot;ls&quot;</span>))).toDF(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>).show()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>orderBy</code>排序</p>
<p>倒叙前5</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">df.orderBy(col(<span class="string">&quot;customer_id&quot;</span>).desc).show(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>where</code>和<code>like</code></p>
<p>三种方法</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">df.where(<span class="string">&quot;first_name like &#x27;Z%&#x27;&quot;</span>).show()</span><br><span class="line">df.where(col(<span class="string">&quot;first_name&quot;</span>).like(<span class="string">&quot;Z%&quot;</span>)).show(<span class="number">5</span>) <span class="comment">// 效果相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 效果也相同</span></span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line">df.where($<span class="string">&quot;first_name&quot;</span>.like(<span class="string">&quot;Z%&quot;</span>)).show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>lit</code>相当于做了一个小表一行一列</p>
</li>
<li><p><code>===</code>是等于</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line">df.where($<span class="string">&quot;first_name&quot;</span>===lit(<span class="string">&quot;Zachariah&quot;</span>)).show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>and</code>条件相连</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">df.where($<span class="string">&quot;first_name&quot;</span>.like(<span class="string">&quot;Z%&quot;</span>) and $<span class="string">&quot;gender&quot;</span>===lit(<span class="string">&quot;Female&quot;</span>)).show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>select</code>选择投影</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">df.select($<span class="string">&quot;first_name&quot;</span>.as(<span class="string">&quot;fanme&quot;</span>),$<span class="string">&quot;last_name&quot;</span>.as(<span class="string">&quot;lname&quot;</span>),$<span class="string">&quot;email&quot;</span>).show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>as</code>改别名</p>
</li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">df.select($<span class="string">&quot;first_name&quot;</span>.as(<span class="string">&quot;fanme&quot;</span>),$<span class="string">&quot;last_name&quot;</span>.as(<span class="string">&quot;lname&quot;</span>),$<span class="string">&quot;email&quot;</span>).show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><code>join</code> inner join，要左右外联，只要把<code>inner</code>改<code>left</code>或right</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">custdf.join(transdf,custdf(<span class="string">&quot;customer_id&quot;</span>)===transdf(<span class="string">&quot;customer_id&quot;</span>),<span class="string">&quot;inner&quot;</span>)</span><br><span class="line">  <span class="comment">// 列名一样可以用一下的方式相关联</span></span><br><span class="line">custdf.join(transdf,<span class="type">Seq</span>(<span class="string">&quot;customer_id&quot;</span>),<span class="string">&quot;inner&quot;</span>).show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>crossJoin</code>笛卡尔集</p>
</li>
<li><p><code>groupBy</code>分组，聚合函数</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">transdf.groupBy($<span class="string">&quot;customer_id&quot;</span>).agg(sum($<span class="string">&quot;price&quot;</span>).as(<span class="string">&quot;totalprice&quot;</span>),count($<span class="string">&quot;product&quot;</span>).as(<span class="string">&quot;paynum&quot;</span>)).show(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Windows.partitionedby</p>
<p>Windows窗口函数</p>
<p><code>rank().over(Window.orderBy(desc(&quot;event_num&quot;)))</code></p>
</li>
<li><p>但凡有null的地方补为0</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.na.fill(0)</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h3 id="2-装载JSON"><a href="#2-装载JSON" class="headerlink" title="2.装载JSON"></a>2.装载JSON</h3><h3 id="3-Spark-SQL架构"><a href="#3-Spark-SQL架构" class="headerlink" title="3.Spark SQL架构"></a>3.Spark SQL架构</h3><ul>
<li>介绍<ul>
<li>提高了更高层次的接口方便地处理数据</li>
<li>是Spark的核心组件，能够直接访问现存的hive</li>
<li>支持SQL、API编程</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240729091721730.png"
                      alt="image-20240729091721730"
                ></li>
</ul>
</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240729092734922.png"
                      alt="image-20240729092734922" style="zoom: 33%;" 
                >
- 主要是SparkSession</li>
</ul>
<h4 id="A-DataSet"><a href="#A-DataSet" class="headerlink" title="A.DataSet"></a>A.DataSet</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240729092912362.png"
                      alt="image-20240729092912362"
                ></p>
<h4 id="B-DataFrame"><a href="#B-DataFrame" class="headerlink" title="B.DataFrame"></a>B.DataFrame</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240729093126751.png"
                      alt="image-20240729093126751" style="zoom:50%;" 
                >

<h4 id="C-Spark-SQL-函数"><a href="#C-Spark-SQL-函数" class="headerlink" title="C.Spark SQL 函数"></a>C.Spark SQL 函数</h4><ul>
<li><p>内置函数</p>
</li>
<li><p>自定义函数</p>
<p>Java中有LocalDate来转为星期</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp04</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 自定义UDF</span></span><br><span class="line">  <span class="keyword">val</span> myDayOfWeek=udf((time:<span class="type">String</span>)=&gt;&#123;</span><br><span class="line">    <span class="type">LocalDate</span>.parse(time.split(<span class="string">&quot; &quot;</span>)(<span class="number">0</span>)).getDayOfWeek.toString</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>).appName(<span class="string">&quot;exp04&quot;</span>).getOrCreate();</span><br><span class="line">    <span class="keyword">val</span> ordDF = spark.read.csv(<span class="string">&quot;E:/Temp/retail_db/orders.csv&quot;</span>)</span><br><span class="line">      .toDF(<span class="string">&quot;ordid&quot;</span>, <span class="string">&quot;orddate&quot;</span>, <span class="string">&quot;userid&quot;</span>, <span class="string">&quot;statu&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> itemDF = spark.read.csv(<span class="string">&quot;E:/Temp/retail_db/order_items.csv&quot;</span>)</span><br><span class="line">      .toDF(<span class="string">&quot;itemid&quot;</span>, <span class="string">&quot;ordid&quot;</span>, <span class="string">&quot;productid&quot;</span>, <span class="string">&quot;buynum&quot;</span>, <span class="string">&quot;cntprice&quot;</span>, <span class="string">&quot;price&quot;</span>)</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    ordDF.join(itemDF,<span class="type">Seq</span>(<span class="string">&quot;ordid&quot;</span>)).select($<span class="string">&quot;ordid&quot;</span>,</span><br><span class="line">      myDayOfWeek($<span class="string">&quot;orddate&quot;</span>).as(<span class="string">&quot;weekday&quot;</span>),$<span class="string">&quot;buynum&quot;</span>)</span><br><span class="line">      .groupBy(<span class="string">&quot;weekday&quot;</span>).agg(sum(<span class="string">&quot;buynum&quot;</span>).as(<span class="string">&quot;cnt_buynum&quot;</span>))</span><br><span class="line">      .show()</span><br><span class="line">    spark.stop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="E-操作外部数据源"><a href="#E-操作外部数据源" class="headerlink" title="E.操作外部数据源"></a>E.操作外部数据源</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240729111835878.png"
                      alt="image-20240729111835878" style="zoom: 50%;" 
                >

<ul>
<li>PostgreSQL建议自学一下</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240729115558749.png"
                      alt="image-20240729115558749"
                ></li>
</ul>
<h5 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a><strong>连接MySQL</strong></h5><ol>
<li><p>导入包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>连接取数据</p>
<ul>
<li>读：<code>spark.read.jdbc(url, 表名, param)</code></li>
</ul>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>).appName(<span class="string">&quot;exp05&quot;</span>).getOrCreate();</span><br><span class="line">        <span class="comment">// 读取数据库</span></span><br><span class="line">        <span class="keyword">val</span> param = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">        param.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>)</span><br><span class="line">        param.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">        param.setProperty(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>) <span class="comment">// mysql5 8要在mysql后加cj</span></span><br><span class="line">        <span class="keyword">val</span> url = <span class="string">&quot;jdbc:mysql://192.168.179.139:3306/exp&quot;</span></span><br><span class="line">        <span class="keyword">val</span> custDF = spark.read.jdbc(url, <span class="string">&quot;customers&quot;</span>, param)</span><br><span class="line">        custDF.show()</span><br><span class="line">        spark.stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>写 <code>custDF.write.mode(SaveMode.Append).saveAsTable(&quot;products&quot;)</code></p>
<p><code>SaveMode.OverWrite</code>属性，要填入</p>
<p>写样例类，并且用DF传入</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Products</span>(<span class="params">productid:<span class="type">Int</span>,typeid:<span class="type">Int</span>,title:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                    orginprice:<span class="type">Double</span>,imgs:<span class="type">String</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>).appName(<span class="string">&quot;exp05&quot;</span>).getOrCreate();</span><br><span class="line">        <span class="comment">// 读取数据库</span></span><br><span class="line">        <span class="keyword">val</span> param = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">        param.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>)</span><br><span class="line">        param.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">        param.setProperty(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>) <span class="comment">// mysql5 8要在mysql后加cj 下面的url也要加相关配置</span></span><br><span class="line">        <span class="keyword">val</span> url = <span class="string">&quot;jdbc:mysql://192.168.179.139:3306/exp&quot;</span></span><br><span class="line">        <span class="comment">//    val custDF = spark.read.jdbc(url, &quot;products&quot;, param)</span></span><br><span class="line">        <span class="keyword">val</span> df = spark.createDataFrame(<span class="type">List</span>(<span class="type">Products</span>(<span class="number">1500</span>, <span class="number">1</span>, <span class="string">&quot;中国商品&quot;</span>, <span class="number">1000.12</span>, <span class="string">&quot;http://imgs/123.jpg&quot;</span>)))</span><br><span class="line">        df.write.mode(<span class="type">SaveMode</span>.<span class="type">Append</span>).jdbc(url, <span class="string">&quot;products&quot;</span>, param)</span><br><span class="line">        <span class="comment">//    custDF.show()</span></span><br><span class="line"></span><br><span class="line">        spark.stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
<h5 id="连接Hive"><a href="#连接Hive" class="headerlink" title="连接Hive"></a><strong>连接Hive</strong></h5><ol>
<li><p>导入包</p>
<p>要对应好hive和spark版本</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>代码</p>
<ul>
<li>读</li>
</ul>
<p>9083端口</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp06</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> spark=<span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;exp06&quot;</span>)</span><br><span class="line">      .master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.metastore.uris&quot;</span>,<span class="string">&quot;thrift://192.168.179.139:9083&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">val</span> df = spark.sql(<span class="string">&quot;select * from exp.cust&quot;</span>)</span><br><span class="line">    df.show()</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>写</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Custs</span>(<span class="params">id:<span class="type">String</span>,name:<span class="type">String</span></span>)</span>;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp06</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="type">System</span>.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>,<span class="string">&quot;root&quot;</span>) <span class="comment">// 写的时候要设置用户</span></span><br><span class="line">    <span class="keyword">var</span> spark=<span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;exp06&quot;</span>)</span><br><span class="line">      .master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.metastore.uris&quot;</span>,<span class="string">&quot;thrift://192.168.179.139:9083&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line"><span class="comment">//    val df = spark.sql(&quot;select * from exp.custs&quot;)</span></span><br><span class="line">    <span class="keyword">val</span> df = spark.createDataFrame(<span class="type">List</span>(<span class="type">Custs</span>(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;zl&quot;</span>)))</span><br><span class="line">    df.write.format(<span class="string">&quot;Hive&quot;</span>).mode(<span class="type">SaveMode</span>.<span class="type">Append</span>).saveAsTable(<span class="string">&quot;exp.custs&quot;</span>) <span class="comment">// 文本格式要默认为Hive的</span></span><br><span class="line"><span class="comment">//    df.show()</span></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
<h5 id="连接Hbase"><a href="#连接Hbase" class="headerlink" title="连接Hbase"></a>连接Hbase</h5><ol>
<li><p>导入包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>读</p>
<p>导包要注意</p>
<p>spark.sparkContext那段不知道是什么</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.<span class="type">HBaseConfiguration</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.<span class="type">Result</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.io.<span class="type">ImmutableBytesWritable</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.<span class="type">TableInputFormat</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.<span class="type">Bytes</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span>(<span class="params">userid:<span class="type">String</span>,uname:<span class="type">String</span>,gender:<span class="type">String</span>,say:<span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> spark=<span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;exp07&quot;</span>)</span><br><span class="line">        .master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">        .getOrCreate()</span><br><span class="line">        <span class="keyword">val</span> config = <span class="type">HBaseConfiguration</span>.create()</span><br><span class="line">        config.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>,<span class="string">&quot;192.168.179.139:2181&quot;</span>)</span><br><span class="line">        config.set(<span class="type">TableInputFormat</span>.<span class="type">INPUT_TABLE</span>,<span class="string">&quot;mydemo:users&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> rdd=spark.sparkContext.newAPIHadoopRDD( <span class="comment">// &lt;-------------</span></span><br><span class="line">            config,</span><br><span class="line">            classOf[<span class="type">TableInputFormat</span>],</span><br><span class="line">            classOf[<span class="type">ImmutableBytesWritable</span>],</span><br><span class="line">            classOf[<span class="type">Result</span>]</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">import</span> spark.implicits._</span><br><span class="line">        <span class="keyword">val</span> arrRDD = rdd.map &#123;</span><br><span class="line">            <span class="keyword">case</span> (_, result) =&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> key = <span class="type">Bytes</span>.toString(result.getRow)</span><br><span class="line">                <span class="keyword">val</span> uname = <span class="type">Bytes</span>.toString(result.getValue(<span class="string">&quot;base&quot;</span>.getBytes(), <span class="string">&quot;uname&quot;</span>.getBytes()))</span><br><span class="line">                <span class="keyword">val</span> gender = <span class="type">Bytes</span>.toString(result.getValue(<span class="string">&quot;base&quot;</span>.getBytes(), <span class="string">&quot;gender&quot;</span>.getBytes()))</span><br><span class="line">                <span class="keyword">val</span> say = <span class="type">Bytes</span>.toString(result.getValue(<span class="string">&quot;base&quot;</span>.getBytes(), <span class="string">&quot;say&quot;</span>.getBytes()))</span><br><span class="line">                <span class="type">Users</span>(key, uname, gender, say)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toDF()</span><br><span class="line">        <span class="comment">//    // 做一个表的元数据结构</span></span><br><span class="line">        <span class="comment">//    val tabSchema = StructType(Seq(</span></span><br><span class="line">        <span class="comment">//      StructField(&quot;userid&quot;, StringType),</span></span><br><span class="line">        <span class="comment">//      StructField(&quot;uname&quot;, StringType),</span></span><br><span class="line">        <span class="comment">//      StructField(&quot;gender&quot;, StringType),</span></span><br><span class="line">        <span class="comment">//      StructField(&quot;say&quot;, StringType)</span></span><br><span class="line">        <span class="comment">//    ))</span></span><br><span class="line">        arrRDD.show(<span class="literal">false</span>)</span><br><span class="line">        spark.stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>写</p>
<p>这边要注意写入要foreachPartition，因为Hbase驱动在Driver Program端，而塞数据在Executor中，table和conn都是接口，无法序列化传输</p>
<p>后期再用数组作为缓存，一次性放入</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.spark001</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.&#123;<span class="type">HBaseConfiguration</span>, <span class="type">TableName</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.&#123;<span class="type">ConnectionFactory</span>, <span class="type">Put</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql._</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span>(<span class="params">rk:<span class="type">Int</span>,uname:<span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Exp07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> spark=<span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;exp07&quot;</span>)</span><br><span class="line">        .master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">        .getOrCreate()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写数据</span></span><br><span class="line">        <span class="keyword">val</span> data= <span class="type">ListBuffer</span>[<span class="type">Users</span>]()</span><br><span class="line">        <span class="keyword">for</span>(k:<span class="type">Int</span> &lt;- <span class="number">1000</span> to <span class="number">2000</span>)&#123;</span><br><span class="line">            <span class="type">Users</span>(k,<span class="string">s&quot;test<span class="subst">$&#123;k&#125;</span>&quot;</span>)+=:data</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.createDataFrame[<span class="type">Users</span>](data).repartition(<span class="number">5</span>)</span><br><span class="line">        <span class="comment">// 创建hbase连接</span></span><br><span class="line"></span><br><span class="line">        df.foreachPartition(partition=&gt; &#123;</span><br><span class="line">            <span class="comment">//一个分区开一次连接</span></span><br><span class="line">            <span class="keyword">val</span> config = <span class="type">HBaseConfiguration</span>.create()</span><br><span class="line">            config.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>,<span class="string">&quot;192.168.179.139:2181&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> conn = <span class="type">ConnectionFactory</span>.createConnection(config)</span><br><span class="line">            <span class="keyword">val</span> table = conn.getTable(<span class="type">TableName</span>.valueOf(<span class="string">&quot;mydemo:uuu&quot;</span>))</span><br><span class="line">            partition.foreach(row =&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> put = <span class="keyword">new</span> <span class="type">Put</span>(row.getAs(<span class="string">&quot;rk&quot;</span>).toString.getBytes())</span><br><span class="line">                put.addColumn(<span class="string">&quot;base&quot;</span>.getBytes(),<span class="string">&quot;uname&quot;</span>.getBytes()</span><br><span class="line">                              , row.getAs(<span class="string">&quot;uname&quot;</span>).toString.getBytes())</span><br><span class="line">                table.put(put)</span><br><span class="line">            &#125;)</span><br><span class="line">            table.close()</span><br><span class="line">            conn.close()</span><br><span class="line">        &#125;)</span><br><span class="line">        spark.stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h5 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h5><ul>
<li><p>1个分区，有头</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line">resDF.coalesce(<span class="number">1</span>).write.option(<span class="string">&quot;header&quot;</span>,<span class="string">&quot;true&quot;</span>).mode(<span class="type">SaveMode</span>.<span class="type">Overwrite</span>).csv(param.get(<span class="string">&quot;write_file_path&quot;</span>).get)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-Spark-Machine-Learning架构"><a href="#4-Spark-Machine-Learning架构" class="headerlink" title="4.Spark Machine Learning架构"></a>4.Spark Machine Learning架构</h3><h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><h4 id="3"><a href="#3" class="headerlink" title="(3)"></a>(3)</h4><h4 id="4-离线项目"><a href="#4-离线项目" class="headerlink" title="(4)离线项目"></a>(4)离线项目</h4><ul>
<li>工程名spkmodel</li>
</ul>
<p><a class="link"   href="https://dblab.xmu.edu.cn/blog/1454/" >Spark 2.1.0 入门：KMeans聚类算法<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/sabertobih/p/13824739.html" >Spark ML 之 KMeans算法的应用实操——用户分群召回推荐算法<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="六-进阶学习"><a href="#六-进阶学习" class="headerlink" title="(六)进阶学习"></a>(六)进阶学习</h2><h3 id="1-性能优化"><a href="#1-性能优化" class="headerlink" title="1.性能优化"></a>1.性能优化</h3><h4 id="A-序列化"><a href="#A-序列化" class="headerlink" title="A.序列化"></a>A.序列化</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240731084117663.png"
                      alt="image-20240731084117663"
                ></p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWords</span>(<span class="params">line:<span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 但凡传输和落盘都序列化</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">      .set(<span class="string">&quot;spark.serializer&quot;</span>, <span class="string">&quot;org.apache.spark.serializer.KryoSerializer&quot;</span>)</span><br><span class="line">      .setAppName(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">    <span class="comment">// 凡是MyWords类型的数据 在序列化时候都采用Kryo方式进行</span></span><br><span class="line">    conf.registerKryoClasses(<span class="type">Array</span>(classOf[<span class="type">MyWords</span>]))</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().config(conf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="keyword">val</span> df = spark.createDataFrame(<span class="type">List</span>(</span><br><span class="line">      <span class="type">MyWords</span>(<span class="string">&quot;Hello World&quot;</span>),</span><br><span class="line">      <span class="type">MyWords</span>(<span class="string">&quot;Hello Spark&quot;</span>)</span><br><span class="line">    )).select(explode(split($<span class="string">&quot;line&quot;</span>,<span class="string">&quot; &quot;</span>)).as(<span class="string">&quot;word&quot;</span>))</span><br><span class="line">      .groupBy(<span class="string">&quot;word&quot;</span>).agg(count($<span class="string">&quot;word&quot;</span>).as(<span class="string">&quot;word_num&quot;</span>))</span><br><span class="line">    df.show()</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="B-性能优化2"><a href="#B-性能优化2" class="headerlink" title="B.性能优化2"></a>B.性能优化2</h4><ul>
<li>使用对象数组、原始类型代替Java、Scala集合类(如HashMap)</li>
<li>避免嵌套结构</li>
<li><strong>尽量使用数字作为Key</strong>，而非字符串</li>
<li>以较大的RDD使用MEMORY ONLY SER</li>
<li>加载CSV、JSON时，仅加载所需字段</li>
<li>仅在需要时持久化中间结果(RDD&#x2F;DS&#x2F;DF)</li>
<li>避免不必要的中间结果(RDD&#x2F;DS&#x2F;DF)的生成</li>
<li>DF的执行速度比DS快约3倍</li>
</ul>
<h4 id="C-性能优化3"><a href="#C-性能优化3" class="headerlink" title="C.性能优化3"></a>C.性能优化3</h4><ul>
<li>自定义RDD分区与spark.default.parallelism<ul>
<li>该参数用于设置每个stage的默认task数量</li>
</ul>
</li>
<li>将大变量广播出去，而不是直接使用</li>
<li>尝试处理本地数据并最小化跨工作节点的数据传输</li>
</ul>
<h4 id="D-性能优化4"><a href="#D-性能优化4" class="headerlink" title="D.性能优化4"></a>D.性能优化4</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240730173259229.png"
                      alt="image-20240730173259229"
                ></p>
<ul>
<li><p>起别名效率高，因为会有映射</p>
</li>
<li></li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题拉取最新代码</title>
    <url>/2025/09/11/technology/blog/Hexo%E4%B8%BB%E9%A2%98%E6%8B%89%E5%8F%96%E6%9C%80%E6%96%B0%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>使用Hexo clean的时候提醒我<code>Redefine</code>主题已经更新好几个版本了，因此准备把最新的Redefine代码拉取下来。</p>
<p>我记得当时我是把代码转存在了我的仓库中，所以我现在要做的步骤是：</p>
<ol>
<li>从<code>Redefine</code>官方仓库拉取最新的代码</li>
<li>与本地代码合并，解决冲突</li>
<li>推送到我自己的仓库中</li>
</ol>
<p>先用<code>git remote -v</code>查看一下我的远程管理：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">origin  https://github.com/Sabthever/hexo-theme-redefine.git (fetch)</span><br><span class="line">origin  https://github.com/Sabthever/hexo-theme-redefine.git (push)</span><br><span class="line">upstream        https://github.com/EvanNotFound/hexo-theme-redefine.git (fetch)</span><br><span class="line">upstream        https://github.com/EvanNotFound/hexo-theme-redefine.git (push)</span><br></pre></td></tr></table></figure></div>

<p>可以看到，我当时是把两个地址都配置在其中的。<code>origin</code>和<code>upstream</code>分别代表了不同的仓库名，是我自己配置的。</p>
<p>先进入到<code>themes/hexo-theme-redefine</code>目录下，然后<code>fetch</code>一下最新代码：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure></div>

<p>把<code>upstream</code>的代码合到我本地来：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git merge upstream/main</span><br></pre></td></tr></table></figure></div>

<p>这时候可能会有冲突，需要自己解决一下。解决完后就可以把代码提交并push了。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &#x27;redefine拉取最新代码&#x27;</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%862.jpeg"
                     
                ></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据学习笔记5-离线项目学习</title>
    <url>/2025/09/11/technology/bigdata/Hadoop5-%E7%A6%BB%E7%BA%BF%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="十一-一个离线项目"><a href="#十一-一个离线项目" class="headerlink" title="十一.一个离线项目"></a>十一.一个离线项目</h1><h2 id="一-前期"><a href="#一-前期" class="headerlink" title="(一).前期"></a>(一).前期</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240731093941095.png"
                      alt="image-20240731093941095"
                ></p>
<h3 id="2-一些技术了解"><a href="#2-一些技术了解" class="headerlink" title="2.一些技术了解"></a>2.一些技术了解</h3><ul>
<li><p>数据湖是吞吐大量数据的存储空间。数据湖国外用Apache Hudi</p>
</li>
<li><p>数仓是有目标的</p>
</li>
<li><p>技术栈</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240731094533700.png"
                      alt="image-20240731094533700"
                ></p>
<p>Security中关于安全传输的内容。DataGovernance用于元数据管理</p>
<p>中间的Pig太老了，被Hive替代，Storm被Flink替代</p>
<p>阿里clickHouse也是一个Data Storage，可以自学一下。</p>
<p>Administration管理器还有K8S</p>
</li>
</ul>
<h2 id="二-项目过程"><a href="#二-项目过程" class="headerlink" title="(二).项目过程"></a>(二).项目过程</h2><ul>
<li>这是学习用方案</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240801134455424.png"
                      alt="image-20240801134455424" style="zoom:67%;" 
                >

<blockquote>
<p>这边用这种方案</p>
</blockquote>
<blockquote>
</blockquote>
<ul>
<li>工作用方案</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240801134642564.png"
                      alt="image-20240801134642564" style="zoom:67%;" 
                >

<h3 id="1-虚拟机配置"><a href="#1-虚拟机配置" class="headerlink" title="1.虚拟机配置"></a>1.虚拟机配置</h3><ul>
<li><p>本机配置，200G硬盘，20G内存，12核</p>
</li>
<li><p>在分区配置过程，自己分区，点击进入done超链接，删掉&#x2F;home的位置空间，swap32GiB，&#x2F;给167GiB，算出来的。建议swap是内存的两倍</p>
<blockquote>
<p>i will configure partitioning</p>
</blockquote>
</li>
<li><p>配置基础，jdk，mysql，hadoop，hive，zeppelin，hbase，spark</p>
</li>
</ul>
<h3 id="2-Scala数据探索"><a href="#2-Scala数据探索" class="headerlink" title="2.Scala数据探索"></a>2.Scala数据探索</h3><ul>
<li>在本地建立quickstart，idea项目名discovery</li>
<li>写个trait用于不同表的探索，探索类交叉</li>
<li>最后制作成文档用于展示探索结果，以及业务的交涉</li>
</ul>
<h3 id="3-数据拉取"><a href="#3-数据拉取" class="headerlink" title="3.数据拉取"></a>3.数据拉取</h3><p>A.通过Flume传输，但是hdfs没这么高吞吐量中间用个Kafka</p>
<p>Flume-&gt;Kafka-&gt;</p>
<h4 id="A-Flume传到Kafka"><a href="#A-Flume传到Kafka" class="headerlink" title="A.Flume传到Kafka"></a>A.Flume传到Kafka</h4><p>先开启kafka</p>
<p>每个文件要先看行数用于最后判断是否争取，首行是什么作为正则筛选，最长一行字节数作为参数设置</p>
<ul>
<li><p>&#x2F;opt&#x2F;flumecfg&#x2F;event_uf.conf</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.spoolDir = /opt/data/user_friends</span><br><span class="line">a1.sources.r1.deserializer.maxLineLength = 60000	#该文件最大长度超过50000</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = regex_filter</span><br><span class="line">a1.sources.r1.interceptors.i1.excludeEvents = true</span><br><span class="line">a1.sources.r1.interceptors.i1.regex= ^user\,friends$ # 正则匹配也会影响效率</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /opt/flumeck/eventuf/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /opt/flumeck/eventuf/data</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.topic = orgin_uf</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = 192.168.179.140:9092</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class="line">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>&#x2F;opt&#x2F;flumecfg&#x2F;event_users.conf</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.spoolDir = /opt/data/users</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = regex_filter</span><br><span class="line">a1.sources.r1.interceptors.i1.excludeEvents = true</span><br><span class="line">a1.sources.r1.interceptors.i1.regex= .*locale\,birthyear\,gender.*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /opt/flumeck/eventuser/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /opt/flumeck/eventuser/data</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.topic = users</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = 192.168.179.140:9092</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class="line">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>启动消费端监控</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server 192.168.179.140:9092 --topic users</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行flume</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flume-ng agent -n a1 -f /opt/flumecfg/event_users.conf -c /opt/soft/flume160/conf/ -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h4 id="B-Java转传Kafka"><a href="#B-Java转传Kafka" class="headerlink" title="B.Java转传Kafka"></a>B.Java转传Kafka</h4><ul>
<li><p>读比较小的数据</p>
</li>
<li><p>甲方不让我们在服务器上下载flume的情况</p>
</li>
<li><p>代码</p>
<ol>
<li><p>quickstart，这边工程文件为readfiletoKafka</p>
</li>
<li><p>导包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ul>
<h3 id="4-数据从Kafka到Kafka进行简单清理"><a href="#4-数据从Kafka到Kafka进行简单清理" class="headerlink" title="4.数据从Kafka到Kafka进行简单清理"></a>4.数据从Kafka到Kafka进行简单清理</h3><h3 id="5-从Kafka到Hbase去重-同时相当于保存在了HDFS中"><a href="#5-从Kafka到Hbase去重-同时相当于保存在了HDFS中" class="headerlink" title="5.从Kafka到Hbase去重(同时相当于保存在了HDFS中)"></a>5.从Kafka到Hbase去重(同时相当于保存在了HDFS中)</h3><ul>
<li><p>幂等性</p>
</li>
<li><p>工程文件ka2ka</p>
</li>
<li><h5 id="也可以kafka导入到doris"><a href="#也可以kafka导入到doris" class="headerlink" title="也可以kafka导入到doris"></a>也可以kafka导入到doris</h5><p>用UNIQUE数据模型，功能类似Hbase，速度远超hbase，但是jdbc方式是不太行的。</p>
</li>
</ul>
<h3 id="6-Hive映射数据"><a href="#6-Hive映射数据" class="headerlink" title="6.Hive映射数据"></a>6.Hive映射数据</h3><h3 id="7-离线数仓四层结构"><a href="#7-离线数仓四层结构" class="headerlink" title="7.离线数仓四层结构"></a>7.离线数仓四层结构</h3><ul>
<li><p>第一第二层哪些数据不能少，即使多了或者少了也要知道原因</p>
<p>对于全是特征的的数据进行聚类分组形成表</p>
</li>
<li><p>第一层ADS映射和放数据</p>
</li>
<li><p>第二层DWD数据清洗</p>
<ol>
<li>创建DWD数据库</li>
<li>映射ods层的train表到dwd层<ol>
<li>清洗用户表—2.1 制作一个临时表将locale所有的变化都进行编号</li>
<li>清洗用户表—2.2 制作一个临时表计算用户年份的中位数年份</li>
<li>清洗用户表—2.3 制作一个性别生成函数</li>
<li>清洗用户表—生成timezone数据对照临时表</li>
<li>清洗用户表</li>
</ol>
</li>
<li>压缩events表</li>
<li>导入eventAttendees表</li>
<li>压缩UserFriends表</li>
<li>创建eventgroup表</li>
</ol>
</li>
<li><p>第三层做宽表思考业务相关性的简单指标</p>
<p>做成单独表</p>
<p>思考特征，后期要机器学习</p>
<p>此处思考的特征：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">train_interested_y							------------- train</span><br><span class="line">train_eventid								------------- train</span><br><span class="line">train_userid								------------- train</span><br><span class="line">train_invited								------------- train</span><br><span class="line">train_ts									------------- train</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_userid								------------- events</span><br><span class="line">event_starttime								------------- events</span><br><span class="line">event_lat									------------- events</span><br><span class="line">event_lng									------------- events</span><br><span class="line">event_group(算)								------------- events+eventgroup</span><br><span class="line">event_month(统)								------------- events</span><br><span class="line">event_hour(统)								------------- events</span><br><span class="line">event_dayofweek(统)							------------- events</span><br><span class="line">event_city_level(统)						------------- events</span><br><span class="line">event_state_level(统)						------------- events</span><br><span class="line">event_country_level(统)						------------- events</span><br><span class="line"></span><br><span class="line">users_birthyear_age							------------- users</span><br><span class="line">users_gender								------------- users</span><br><span class="line">users_joinedday								------------- users</span><br><span class="line">users_location								------------- users</span><br><span class="line">users_zone									------------- users</span><br><span class="line">users_localid								------------- users</span><br><span class="line"></span><br><span class="line">uf_train_creator_isfriend(统)				------------- train+userfriend+events</span><br><span class="line"></span><br><span class="line">event_user_similar(统)						------------- events+train+users</span><br><span class="line"></span><br><span class="line">uf_friendcount(统)							------------- userFriends</span><br><span class="line">uf_ea_yes_count(统)							------------- userFriends+train+eventAttendees</span><br><span class="line">uf_ea_no_count(统)							------------- userFriends+train+eventAttendees</span><br><span class="line">uf_ea_maybe_count(统)						------------- userFriends+train+eventAttendees</span><br><span class="line">uf_ea_invited_count(统)						------------- userFriends+train+eventAttendees</span><br><span class="line">uf_ea_yes_count_prec(统)					------------- userFriends+train+eventAttendees</span><br><span class="line">uf_ea_no_count_prec(统)						------------- userFriends+train+eventAttendees</span><br><span class="line">uf_ea_maybe_count_prec(统)					------------- userFriends+train+eventAttendees</span><br><span class="line">uf_ea_invited_count_prec(统)				------------- userFriends+train+eventAttendees</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_ea_yes_count(统)						------------- train+user+eventAttendees</span><br><span class="line">user_ea_no_count(统)						------------- train+user+eventAttendees</span><br><span class="line">user_ea_maybe_count(统)						------------- train+user+eventAttendees</span><br><span class="line">user_ea_invited_count(统)					------------- train+user+eventAttendees</span><br><span class="line">user_ea_count(统)							------------- train+user+eventAttendees</span><br><span class="line">user_ea_yes_count_prec(统)					------------- train+user+eventAttendees</span><br><span class="line">user_ea_maybe_prec(统)						------------- train+user+eventAttendees</span><br><span class="line">user_ea_invited_prec(统)					------------- train+user+eventAttendees</span><br><span class="line"></span><br><span class="line">#user_ea_avg_isArrive(统)					------------- died</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>创建dws_interested数据库</p>
</li>
<li><p>创建雪花模型-事实表(train)</p>
</li>
<li><p>将会议表和会议组表结合成1张表 降维</p>
</li>
<li><p>创建雪花模型-维度表(users)</p>
</li>
<li><p>训练集用户是否是会议主持人的朋友</p>
</li>
<li><p>会议和用户是否同城</p>
</li>
<li><p>训练集用户自身参会及反馈统计</p>
</li>
<li><p>训练集用户朋友在本次会议中答复情况的统计</p>
<p>三张表join了以后数据条数10亿以上，内存不够，关掉mapjoin也不行，于是多做中间表，尽量把表变小留下必要数据，join时变少</p>
</li>
<li><p>训练集用户朋友在本次会议中答复情况的统计2</p>
</li>
<li><p>统计每个用户朋友的数量</p>
</li>
<li><p>计算每个城市、省份、国家等级</p>
</li>
<li><p>会议lat lng max_min值</p>
</li>
</ol>
</li>
<li><p>第四层进行合并成宽表</p>
<p>机器学习 机器学习的工程文件夹，spkmodel</p>
</li>
</ul>
<h3 id="8-统计过程中需要对数字很大的列进行归一化"><a href="#8-统计过程中需要对数字很大的列进行归一化" class="headerlink" title="8.统计过程中需要对数字很大的列进行归一化"></a>8.统计过程中需要对数字很大的列进行归一化</h3><ul>
<li><p>法一<br>$$<br>Y&#x3D;\frac {X-min}{max-min}<br>$$</p>
</li>
<li><p>法二</p>
<p><strong>Z-core归一化</strong></p>
</li>
</ul>
<p>$$<br>Y&#x3D;\frac {X-mean}{std}<br>$$</p>
<h3 id="9-对于宽表用模型计算"><a href="#9-对于宽表用模型计算" class="headerlink" title="9.对于宽表用模型计算"></a>9.对于宽表用模型计算</h3><ul>
<li>这边用的分类模型中的随机森林模型</li>
<li>将计算好的模型保存</li>
</ul>
<h3 id="10-test集转化为需要的宽表格式"><a href="#10-test集转化为需要的宽表格式" class="headerlink" title="10.test集转化为需要的宽表格式"></a>10.test集转化为需要的宽表格式</h3><ul>
<li>这边用spark做各种清理和数据的传输</li>
<li><strong>工程文件名<code>scalaProject/eventpred</code></strong></li>
<li>工程结构：</li>
</ul>
<h4 id="A-读写"><a href="#A-读写" class="headerlink" title="A.读写"></a>A.读写</h4><ul>
<li><p>工程中用了三种，1是文件读写，2是Kafka的读取，3是Hive的读取</p>
</li>
<li><p>用了一个特质ReadSource，下面用三个特质来继承，相当于Java中接口和实现，分别为</p>
<ol>
<li>FileReadSource</li>
<li>HiveReadSource</li>
<li>KafkaReadSource</li>
</ol>
</li>
<li><p>下面用了一个类ReadDataSource来进行动态混入。Test对象用于引用，做实例化.</p>
</li>
<li><p>这些读取的数据最后放到某个文件夹中，当作仓库，ods层。不需要处理的就直接放到dwd层</p>
</li>
<li><p>当然，如果内存够用，可以四层处理全部放在内存中，不落盘。</p>
</li>
<li><p>ReadSource中只有一个接口</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span></span>(param:<span class="type">Map</span>[<span class="type">String</span>,<span class="type">String</span>],spark:<span class="type">SparkSession</span>):<span class="type">DataFrame</span></span><br></pre></td></tr></table></figure></div>

<p>用Map传递参数，因为各种类型不一样</p>
<p>各种参数名用一个来存储对象，这边的对象名叫FinalSourceConfig</p>
</li>
<li><p><strong>其中知识点</strong>：动态混入，读写spark，有无头，文件、Hive、Kafka读写。Map来传递参数，参数对象。对象来进行枚举。</p>
</li>
</ul>
<h4 id="B-数据清洗"><a href="#B-数据清洗" class="headerlink" title="B.数据清洗"></a>B.数据清洗</h4><ul>
<li><p>需要的数据直接拉取过来，每一层都用来一个对象来处理，但是实际上一层用一个对象太乱了，最好每一个表的处理都单独出来</p>
</li>
<li><p>没有OPS是因为，前面拉取数据相当于是这步操作了，有些不需要处理的直接放到dwd文件夹中</p>
</li>
<li><p>DWDEvent</p>
</li>
<li><p>DWSEvent</p>
<ul>
<li>文件读写都要用，因此用高级函数放在中间，这是需要改变的部分</li>
<li>其中知识点：高级函数，SparkSQL，文件的读写。SparkSQL中的udf函数。udf中有scala的三元表达式。select中一个指定了来自哪个表，其他的也要指定。写如何只写成一个，而不会一行一个文件</li>
<li>参数用Map来存储，然后调用对象取静态的枚举值。</li>
</ul>
</li>
<li><p>ADSEvent</p>
<ul>
<li><p>数据取出来的名字和顺序都要和训练的时候一模一样。</p>
<p>List同时给多val赋值</p>
<p>数据存入mysql</p>
</li>
</ul>
</li>
</ul>
<h3 id="11-宽表放入之前训练好的模型中预测"><a href="#11-宽表放入之前训练好的模型中预测" class="headerlink" title="11.宽表放入之前训练好的模型中预测"></a>11.宽表放入之前训练好的模型中预测</h3><ul>
<li>宽表的数据也要变成模型需要的数据，要有label</li>
<li>预测也在了eventpred的ADSEvent中</li>
<li>预测结果保存在Mysql中，也可以放在ClickHouse、Doris等等。同时把维度表也放进去</li>
</ul>
<h3 id="12-用帆软等工具进行数据展示"><a href="#12-用帆软等工具进行数据展示" class="headerlink" title="12.用帆软等工具进行数据展示"></a>12.用帆软等工具进行数据展示</h3><ul>
<li>用帆软访问数据库数据，但是复杂语句特别慢，应该在mysql中建起相应表，帆软只做简单查询</li>
</ul>
<ol start="13">
<li></li>
</ol>
<h2 id="三-归纳总结"><a href="#三-归纳总结" class="headerlink" title="(三).归纳总结"></a>(三).归纳总结</h2><ul>
<li><p>spark中cast()中间变化要Type：<code>$&quot;birthyear&quot;.cast(IntegerType)</code></p>
</li>
<li><p><code>df.select(&quot;locale&quot;).rdd.filter</code>rdd出<code>RDD[row]</code></p>
</li>
<li><p>可以吹：</p>
<ul>
<li>数据倾斜，排序的时候空最多，直接去掉空，然后最后加上一个-1个空排序就会在最后，而且减去了大量的数据</li>
</ul>
</li>
</ul>
<h2 id="四-其中知识点"><a href="#四-其中知识点" class="headerlink" title="(四).其中知识点"></a>(四).其中知识点</h2><h3 id="1-spark性能调优"><a href="#1-spark性能调优" class="headerlink" title="1.spark性能调优"></a>1.spark性能调优</h3><ol>
<li><p>语句可以用exits，distinct，collect_list等等来缩</p>
</li>
<li><p>增大内存</p>
<div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder()</span><br><span class="line">.master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">.config(<span class="string">&quot;spark.driver.memory&quot;</span>,<span class="string">&quot;16g&quot;</span>)</span><br><span class="line">.config(<span class="string">&quot;spark.executor.memory&quot;</span>,<span class="string">&quot;16g&quot;</span>)</span><br><span class="line">.appName(<span class="string">&quot;disc&quot;</span>)</span><br><span class="line">.getOrCreate()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分段计算</p>
</li>
</ol>
<h1 id="十二-Flume架构"><a href="#十二-Flume架构" class="headerlink" title="十二.Flume架构"></a>十二.Flume架构</h1><ul>
<li><p>Flume用于将多种来源的日志以流的方式传输至Hadoop或者其它目的地</p>
<ul>
<li>一种可靠、可用的高效分布式数据收集服务</li>
</ul>
</li>
<li><p>Flume拥有基于数据流上的简单灵活架构，支持容错、故障转移与恢复</p>
</li>
<li><p>由Cloudera 2009年捐赠给Apache，现为Apache顶级项目</p>
</li>
<li><p><a class="link"   href="https://flume.apache.org/releases/content/1.11.0/FlumeUserGuide.html" >用户指南文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>黑体就是一定要填的数据，黄色背景是示例</p>
</li>
<li><p><strong>阿里系：DataX</strong></p>
</li>
</ul>
<h2 id="一-Flume架构"><a href="#一-Flume架构" class="headerlink" title="(一)Flume架构"></a>(一)Flume架构</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240801135233952.png"
                      alt="image-20240801135233952" style="zoom: 50%;" 
                >

<p><strong>sink是输出，channel是配置载体，source配置来源</strong>。还有其他组件，这三个是组成部分</p>
<ul>
<li><p>例子</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240801135348837.png"
                      alt="image-20240801135348837" style="zoom:50%;" 
                >

<ul>
<li><p>前面的名随意，示例名。</p>
</li>
<li><p>source:</p>
<p> Taildir Source可传输实时的数据</p>
<p>netcat命令终端nc传递的数据</p>
<p>spoolDir是离线传输文件数据</p>
</li>
<li><p>channel:</p>
<p>Memory 内存管道，速度快，但是容易丢</p>
<p>File 类似于检查点，会保存成文件，稳定性高。但是可能多传文件</p>
</li>
</ul>
</li>
</ul>
<h2 id="二-安装"><a href="#二-安装" class="headerlink" title="(二).安装"></a>(二).安装</h2><ul>
<li><p>准备好<code>flume-ng-1.6.0-cdh5.14.2.tar.gz</code></p>
</li>
<li><pre><code class="sh">cd /opt
tar -zxf flume-ng-1.6.0-cdh5.14.2.tar.gz
mv apache-flume-1.6.0-cdh5.14.2-bin/ soft/flume160
cd soft/flume160/conf/
cp flume-env.sh.template flume-env.sh
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">vim flume-env.sh</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line">改</span><br><span class="line">export JAVA_HOME=/opt/soft/jdk180</span><br></pre></td></tr></table></figure></div>

vim /etc/profile

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Flume</span></span><br><span class="line"><span class="built_in">export</span> FLUME_HOME=/opt/soft/flume160</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$FLUME_HOME</span>/bin</span><br></pre></td></tr></table></figure></div>

source /etc/profile
</code></pre>
</li>
</ul>
<h2 id="三-使用"><a href="#三-使用" class="headerlink" title="(三)使用"></a>(三)使用</h2><ul>
<li>使用后读的文件会有个后缀，后缀去掉才能再读</li>
</ul>
<h3 id="1-第一次使用netcat"><a href="#1-第一次使用netcat" class="headerlink" title="1.第一次使用netcat"></a>1.第一次使用netcat</h3><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"><span class="built_in">mkdir</span> flumecfg</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">touch</span> firstnetcat.conf</span><br><span class="line">vim firstnetcat.conf</span><br></pre></td></tr></table></figure></div>

<p>然后到<a class="link"   href="https://flume.apache.org/releases/content/1.11.0/FlumeUserGuide.html" >用户指南文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>找channel和Source这边是netcat source 和memory</p>
<p>还有很多其他参数</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim firstnetcat.conf</span></span><br><span class="line"><span class="comment"># 三样组件的自定义实例名 a1 r1 c1 k1这些都是可以改的</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的实例名字要和上面的一样</span></span><br><span class="line">a1.sources.r1.type = netcat        <span class="comment"># 来源类型netcat</span></span><br><span class="line">a1.sources.r1.bind = 192.168.179.140 <span class="comment"># 来源ip</span></span><br><span class="line">a1.sources.r1.port = 6666			<span class="comment"># 来源端口</span></span><br><span class="line">a1.sources.r1.channels = c1			<span class="comment"># 来源传递媒介(通道)</span></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory		<span class="comment"># 传递媒介(通道)类型</span></span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger			<span class="comment"># 传递目标类型</span></span><br><span class="line">a1.sinks.k1.channel = c1			<span class="comment"># 传递到目标的媒介(通道)</span></span><br></pre></td></tr></table></figure></div>

<p>先启动这个</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">flume-ng agent -n a1 -f /opt/flumecfg/firstnetcat.conf -c /opt/soft/flume160/conf/ -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div>

<p><code>-n</code>后是实例名称</p>
<p><code>yum install -y nc</code>，用于测试 <code>nc ip地址 6666</code>先启动这个</p>
<p>然后在nc这边输入，另一边有反应</p>
<h3 id="2-文件读到控制台离线"><a href="#2-文件读到控制台离线" class="headerlink" title="2.文件读到控制台离线"></a>2.文件读到控制台离线</h3><ul>
<li><p>源：Spooling Directory Source</p>
</li>
<li><p><code>/opt/flumecfg/secfolder.conf</code></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.spoolDir = /opt/eventdata/train</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = regex_filter</span><br><span class="line">a1.sources.r1.interceptors.i1.excludeEvents = true</span><br><span class="line">a1.sources.r1.interceptors.i1.regex= ^user.*$	// 正则筛选掉表头</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>读取</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">flume-ng agent -n a1 -f /opt/flumecfg/secfolder.conf -c /opt/soft/flume160/conf/ -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="3-文件读到控制台实时"><a href="#3-文件读到控制台实时" class="headerlink" title="3.文件读到控制台实时"></a>3.文件读到控制台实时</h3><ul>
<li><p>&#x2F;opt&#x2F;flumecfg&#x2F;thirddnyc.conf</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.positionFile = /var/log/flume/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1				<span class="comment"># 可以多个</span></span><br><span class="line">a1.sources.r1.filegroups.f1 = /opt/data/train/abc <span class="comment"># 监控的文件</span></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>对于</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">flume-ng agent -n a1 -f /opt/flumecfg/thirddnyc.conf -c /opt/soft/flume160/conf/ -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-读取没有的源-自定义"><a href="#4-读取没有的源-自定义" class="headerlink" title="4.读取没有的源(自定义)"></a>4.读取没有的源(自定义)</h3><ul>
<li><p>Custom Source</p>
</li>
<li><p>比如数据库</p>
</li>
<li><p>过程(这边是取mysql的数据)</p>
<ol>
<li><p>新建maven项目调好</p>
</li>
<li><p>包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>往进程中塞数据</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.custflume;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Event;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.EventDeliveryException;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.PollableSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.conf.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.event.SimpleEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.source.AbstractSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySource</span> <span class="keyword">extends</span> <span class="title class_">AbstractSource</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Configurable</span>, PollableSource &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String tablename;</span><br><span class="line">    Connection connection;</span><br><span class="line">    ResultSet rs;</span><br><span class="line">    PreparedStatement pstat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当source没有数据可以封装时，会让source所在的线程休息一会</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getBackOffSleepIncrement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当source没有数据可以封装时，会让source所在的线程休息的最大时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getMaxBackOffSleepInterval</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 每次process执行完后执行一次</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">            pstat.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Status <span class="title function_">process</span><span class="params">()</span> <span class="keyword">throws</span> EventDeliveryException &#123;</span><br><span class="line">        <span class="comment">//改方法中的会被反复执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            List&lt;Event&gt; lst = new ArrayList&lt;&gt;();</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;userid&quot;</span>)+<span class="string">&quot;,&quot;</span></span><br><span class="line">                        +rs.getString(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;,&quot;</span></span><br><span class="line">                        +rs.getString(<span class="string">&quot;birthday&quot;</span>);</span><br><span class="line">                <span class="type">SimpleEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleEvent</span>();</span><br><span class="line">                event.setBody(line.getBytes());</span><br><span class="line">                <span class="built_in">this</span>.getChannelProcessor().processEvent(event); <span class="comment">// 会反复调用</span></span><br><span class="line"><span class="comment">//                this.getChannelProcessor().processEventBatch(); // 其中传List可以按批传输</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Status.READY;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> Status.BACKOFF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="comment">// 该方法中的内容在一开始执行一次</span></span><br><span class="line">        <span class="built_in">this</span>.url = context.getString(<span class="string">&quot;dburl&quot;</span>);</span><br><span class="line">        <span class="comment">// key,default</span></span><br><span class="line">        <span class="built_in">this</span>.username=context.getString(<span class="string">&quot;dbname&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.password=context.getString(<span class="string">&quot;dbpwd&quot;</span>,<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.tablename=context.getString(<span class="string">&quot;table&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">            pstat = connection.prepareStatement(<span class="string">&quot;select * from &quot;</span> + tablename);</span><br><span class="line">            rs = pstat.executeQuery();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>打包放入 <code>/opt/soft/flume160/lib</code>同时要把mysql驱动jar也方进这个文件夹中，这边时mysql5，因此用<code>mysql-connector-java-5</code></p>
</li>
<li><p><code>.1.38.jar</code></p>
</li>
<li><p>写flume配置</p>
<p>下面配置中的参数名要和java程序中的对应好</p>
<p><code>/opt/flumecfg/fourcust.conf</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">  a1.sources = r1</span><br><span class="line">  a1.channels = c1</span><br><span class="line">  a1.sinks = k1</span><br><span class="line">  </span><br><span class="line">  a1.sources.r1.type = com.njupt.custflume.MySource</span><br><span class="line">  a1.sources.r1.dburl = jdbc:mysql://192.168.179.140:3306/mydemo</span><br><span class="line">  a1.sources.r1.table = userinfos</span><br><span class="line">  </span><br><span class="line">  a1.channels.c1.type = memory</span><br><span class="line">  </span><br><span class="line">  a1.sinks.k1.type = logger</span><br><span class="line">  a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>执行</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">flume-ng agent -n a1 -f /opt/flumecfg/fourcust.conf -c /opt/soft/flume160/conf/ -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ul>
<h3 id="5-文件通过文件读到logger"><a href="#5-文件通过文件读到logger" class="headerlink" title="5.文件通过文件读到logger"></a>5.文件通过文件读到logger</h3><ul>
<li><p><code>/opt/flumecfg/fivefile.conf</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.spoolDir = /opt/data/events</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = regex_filter</span><br><span class="line">a1.sources.r1.interceptors.i1.excludeEvents = <span class="literal">true</span></span><br><span class="line">a1.sources.r1.interceptors.i1.regex= .*event_id.*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /opt/flumeck/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /opt/flumeck/data</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="6-文件通过文件读到hdfs"><a href="#6-文件通过文件读到hdfs" class="headerlink" title="6.文件通过文件读到hdfs"></a>6.文件通过文件读到hdfs</h3><p>但实际上hdfs读写速度慢，撑不住Flume大量的写入，因此需要中间件Kafka</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.spoolDir = /opt/data/events</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = regex_filter</span><br><span class="line">a1.sources.r1.interceptors.i1.excludeEvents = <span class="literal">true</span></span><br><span class="line">a1.sources.r1.interceptors.i1.regex= .*event_id.*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /opt/flumeck/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /opt/flumeck/data</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://192.168.179.140:9000/flume/events/%Y-%m-%d/%H%M/%S</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = events-</span><br><span class="line">a1.sinks.k1.hdfs.round = <span class="literal">true</span></span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 30</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = second</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 0</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 0</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>



<h1 id="十三-Kafka-重要"><a href="#十三-Kafka-重要" class="headerlink" title="十三.Kafka###重要"></a>十三.<a class="link"   href="https://github.com/Sabthever/Pictures1/blob/main/Download_Resources/Kafka.doc" >Kafka<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>###重要</h1><h2 id="一-前期-1"><a href="#一-前期-1" class="headerlink" title="(一)前期"></a>(一)前期</h2><ul>
<li>是消息队列</li>
<li>为了<strong>处理数据洪峰</strong></li>
<li>吞吐量最厉害的软件之一</li>
<li>上述的flume速度远大于HDFS，flume导入数据用Kafka作为中间件</li>
<li>需要内存，相当于一个漏斗，一个通道，临时存放数据</li>
<li>Apache</li>
<li>存到Kafka中的内容默认只能存在7天</li>
<li>后续传输的位置大概率是Hbase、Redis一类东西。并解决自动提交去重方式</li>
</ul>
<h3 id="1-消息中间件-MQ"><a href="#1-消息中间件-MQ" class="headerlink" title="1.消息中间件(MQ)"></a>1.消息中间件(MQ)</h3><ul>
<li>异步调用<br>同步变异步</li>
<li>应用解耦<br>提供基于数据的接口层</li>
<li>流量削峰<br>缓解瞬时高流量压力</li>
</ul>
<h3 id="2-消息中间件中的术语"><a href="#2-消息中间件中的术语" class="headerlink" title="2.消息中间件中的术语"></a>2.消息中间件中的术语</h3><ul>
<li>Broker:消息服务器，提供核心服务</li>
<li>Producer:消息生产者</li>
<li>Consumer:消息消费者</li>
<li>Topic:主题，发布订阅模式下的消息统一汇集地，一个消息可以开好多队列来存储(分区)</li>
<li>Queue:队列，P2P模式下的消息队列</li>
</ul>
<h3 id="3-消息中间件工作模式"><a href="#3-消息中间件工作模式" class="headerlink" title="3.消息中间件工作模式"></a>3.消息中间件工作模式</h3><ul>
<li>p2p和广播</li>
</ul>
<h3 id="4-常见中间件"><a href="#4-常见中间件" class="headerlink" title="4.常见中间件"></a>4.常见中间件</h3><ul>
<li>ActiveMQ</li>
<li>RabbitMQ</li>
<li>RocketMQ</li>
<li><strong>Kafka</strong></li>
<li><strong>Redis</strong></li>
<li>……</li>
<li>Redis更便宜，在相对数量不大时，用Redis，大了用Kafka</li>
</ul>
<h3 id="5-Apache-Kafka"><a href="#5-Apache-Kafka" class="headerlink" title="5.Apache Kafka"></a>5.Apache Kafka</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240802102623524.png"
                      alt="image-20240802102623524"
                ></p>
<h2 id="二-安装-1"><a href="#二-安装-1" class="headerlink" title="(二)安装"></a>(二)安装</h2><ol>
<li><p>要装好了zookeeper，准备好<code>kafka_2.11-2.0.0.tgz</code>放opt中</p>
</li>
<li><pre><code class="sh">cd /opt
tar -zxf kafka_2.11-2.0.0.tgz
mv kafka_2.11-2.0.0 soft/kafka200
cd soft/kafka200/config/
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">   </span><br><span class="line">3. vim server.properties</span><br><span class="line">   - 这个中broker.id是集群的编号</span><br><span class="line">   - log.retention.bytes:数据保留时间</span><br><span class="line"></span><br><span class="line">​```properties</span><br><span class="line">listeners=PLAINTEXT://192.168.179.140:9092</span><br><span class="line">log.dirs=/opt/soft/kafka200/logs	#日志位置</span><br><span class="line">zookeeper.connect=localhost:2181 # 要自己的</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
<li><p>vim &#x2F;etc&#x2F;profile</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Kafka</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/opt/soft/kafka200</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$KAFKA_HOME</span>/bin</span><br></pre></td></tr></table></figure></div>

<p>source &#x2F;etc&#x2F;profile</p>
</li>
</ol>
<h2 id="三-使用-1"><a href="#三-使用-1" class="headerlink" title="(三)使用"></a>(三)使用</h2><h3 id="1-第一次使用"><a href="#1-第一次使用" class="headerlink" title="1.第一次使用"></a>1.第一次使用</h3><ul>
<li><p>zookeeper要先启动</p>
</li>
<li><p><strong>终端上启动kafka</strong></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">kafka-server-start.sh /opt/soft/kafka200/config/server.properties</span><br><span class="line"><span class="built_in">nohup</span> kafka-server-start.sh /opt/soft/kafka200/config/server.properties &gt; /root/kafka.log 2&gt;&amp;1 &amp;    </span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>查看是否有消息队列</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper 192.168.179.140:2181 --list</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>创建消息队列</strong></p>
<p><code>kafka-topics.sh --zookeeper 192.168.179.140:2181 --create --topic mydemo --replication-factor 1 --partitions 1</code></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --create \</span><br><span class="line">--zookeeper 你的zookeeper的IP:2181 \ 			</span><br><span class="line">--replication-factor 副本数 \</span><br><span class="line">--partitions 分区数 \</span><br><span class="line">--topic 消息队列名</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>查看队列里是否有数据</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list 192.168.179.140:9092 --topic mydemo --time -1</span><br></pre></td></tr></table></figure></div>

<p><strong>结果</strong>：mydemo:0:0。<code>消息队列名:消息队列中第几个队列:这个消息队列有几条消息</code></p>
<p>-1是用时间戳代表最新的偏移量</p>
</li>
<li><p>控制台<strong>生产端</strong>下达命令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --topic mydemo --broker-list 192.168.179.140:9092</span><br></pre></td></tr></table></figure></div>

<p>然后可以输入数据</p>
</li>
<li><p><strong>消费端开启</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server 192.168.179.140:9092 --topic mydemo</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>生产端输入数据</p>
</li>
<li><p>输入完后消费端出现数据，进入logs文件夹会出现很多很多游标和消息队列</p>
<p> <strong>zkCli.sh可以查看zookeeper中内容</strong></p>
</li>
<li><p>手工删除消息队列，要在logs中删除，再到zookeeper &#x2F;brokers&#x2F;topics中删掉</p>
<p><strong>命令删除消息队列</strong>，要在<code>server.properties</code>加入<code>Delete.topic.enable=true</code></p>
<p>然后命令</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --delete --zookeeper 192.168.179.140:2181 --topic mydemo</span><br></pre></td></tr></table></figure></div>

<p>删除过程会十分缓慢</p>
</li>
<li><p>初始化指针位置</p>
 <div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server 192.168.179.140:9092 --group cm --reset-offsets --to-earliest --topic mydemo --execute</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看组</p>
 <div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server &lt;kafka-broker&gt;:9092 --list</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看数据</p>
 <div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server hadoopproject:9092 --topic carpass --from-beginning</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-三个分区"><a href="#2-三个分区" class="headerlink" title="2.三个分区"></a>2.三个分区</h3><ol>
<li><p><code>kafka-topics.sh --create --zookeeper 192.168.179.140:2181 --topic mydemo --replication-factor 1 --partitions 3</code></p>
<p>会看到</p>
<p><code>kafka-console-consumer.sh --bootstrap-server 192.168.179.140:9092 --topic mydemo</code></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mydemo:0:0</span><br><span class="line">mydemo:1:0</span><br><span class="line">mydemo:2:0</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>输入数据</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --topic mydemo --broker-list 192.168.179.140:9092</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>kafka-console-consumer.sh --bootstrap-server 192.168.179.140:9092 --topic mydemo</code>查看，会发现放入数据是<strong>轮询</strong>的方式</p>
<p><strong>Kafka顺序和效率的互斥性</strong></p>
<ul>
<li>分区无法保证输入输出数据的顺序</li>
<li>但能加快吞吐数据。</li>
<li>因此要顺序就开单分区</li>
</ul>
</li>
</ol>
<h3 id="3-Flume数据输入Kafka-数据丢失与重复问题"><a href="#3-Flume数据输入Kafka-数据丢失与重复问题" class="headerlink" title="3.Flume数据输入Kafka(数据丢失与重复问题)"></a>3.Flume数据输入Kafka(数据丢失与重复问题)</h3><ul>
<li><p>Flume参数</p>
<ul>
<li><p>生产端ack应答机制：</p>
<p>0不等待回应</p>
<p>1等待leader接收到消息</p>
<p>-1 等待所有副本确认。速度很慢，但能保证数据不丢。</p>
</li>
</ul>
</li>
<li><p><strong>ISR(In-Sync Replicas)机制</strong>要保证leader和所有副本中数据一致。</p>
<p>leader接收到数据先不落盘，先写日志。再通知follow节点，这些节点全部落盘后，leader才会落盘</p>
<p>Kafka中本身要-1才会干活，单Flume可以在这三种情况下继续传数据</p>
<p>-1就是ISR机制</p>
</li>
<li><p>生产端安全性，丢数据的问题，用ack应答机制-1等到所有副本应答后再传输。</p>
</li>
<li><p><strong>幂等性</strong></p>
<p>  重复性问题：传数据，断电。没收到ack，再传一样的，后来连续两次收到一样的。</p>
<p>  生产者无论想broker发送多少次重复的数据，broker都只持久化一条</p>
<p>  方法：再kafka配置文件中开启enable.idempotence。默认为true，false关闭</p>
<p>  只能保证单会话单分区内不重复，内存内直接会把重复的数据去掉。开启事务必须开启幂等性。</p>
</li>
<li><p><strong>数据丢失</strong></p>
<ul>
<li>生产端数据丢失	使用ack应答机制-1</li>
<li>消费端数据丢失 由于自动提交偏移量，可以用手动</li>
</ul>
</li>
<li><p><strong>数据重复</strong></p>
<ul>
<li>生产端数据重复	开启幂等性</li>
<li>消费端数据重复 手动提交偏移量时，可以通过Hbase、redis等去重（对于允许去重的）。对于本身的重复不能舍去时，可以对Hbase的行键进行一定的组合</li>
</ul>
</li>
<li><p>Flume配置文件内容</p>
<p>&#x2F;opt&#x2F;flumecfg&#x2F;event_users.conf</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sources.r1.spoolDir = /opt/data/users</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = regex_filter</span><br><span class="line">a1.sources.r1.interceptors.i1.excludeEvents = true</span><br><span class="line">a1.sources.r1.interceptors.i1.regex= .*locale\,birthyear\,gender.*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /opt/flumeck/eventuser/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /opt/flumeck/eventuser/data</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.topic = users</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = 192.168.179.140:9092</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class="line">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动消费端监控</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server 192.168.179.140:9092 --topic users</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行flume</p>
  <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flume-ng -n a1 -f /opt/flumecfg/event_users.conf -c /opt/soft/flume160/conf/ -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="四-学习"><a href="#四-学习" class="headerlink" title="(四)学习"></a>(四)学习</h2><h3 id="1-ZooKeeper再Kafka中的作用"><a href="#1-ZooKeeper再Kafka中的作用" class="headerlink" title="1.ZooKeeper再Kafka中的作用"></a>1.ZooKeeper再Kafka中的作用</h3><p>zookeeper中内容会和Kafka紧密关联</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240802105625288.png"
                      alt="image-20240802105625288"
                ></p>
<h2 id="五-核心原理"><a href="#五-核心原理" class="headerlink" title="(五)核心原理"></a>(五)核心原理</h2><ul>
<li><p>单对单</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240802111649341.png"
                      alt="image-20240802111649341"
                ></p>
<p>内部有队列，同一组(group)的只有一根游标offset</p>
<p>一次读完后想再读有两个选择：</p>
<ol>
<li>换个组</li>
<li>通过命令将offset置位</li>
</ol>
</li>
<li><p>多台broker构成集群，这些中要有一台leader和多台follow</p>
</li>
</ul>
<h2 id="六-API应用"><a href="#六-API应用" class="headerlink" title="(六)API应用"></a>(六)API应用</h2><h3 id="1-Java转传Kafka-生产者"><a href="#1-Java转传Kafka-生产者" class="headerlink" title="1.Java转传Kafka(生产者)"></a>1.Java转传Kafka(生产者)</h3><ul>
<li><p>读比较小的数据</p>
</li>
<li><p>甲方不让我们在服务器上下载flume的情况</p>
</li>
<li><p><strong>图片中的配置有点老了，可以看代码中的新的</strong></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240803090636616.png"
                      alt="image-20240803090636616"
                ></p>
<p>KafkaProducer中K，V，K相当于可以指定分区，同样K的会被分到同一个分区，V是一行数据</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240803110519525.png"
                      alt="image-20240803110519525"
                ></p>
</li>
<li><p>代码</p>
<ol>
<li><p>quickstart，这边工程文件为readfiletoKafka</p>
</li>
<li><p>导包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240803133415093.png"
                      alt="image-20240803133415093"
                ></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RRWKafkaUtilsImpl</span> <span class="keyword">implements</span> <span class="title class_">RWKafkaUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Properties prop;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; topics;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RRWKafkaUtilsImpl</span><span class="params">(Properties properties, Map&lt;String, String&gt; tps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prop = properties;</span><br><span class="line">        <span class="built_in">this</span>.topics = tps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeKafka</span><span class="params">(Map&lt;String, List&lt;String&gt;&gt; data)</span> &#123;</span><br><span class="line">        <span class="comment">// 开启线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(data.size());</span><br><span class="line">        <span class="keyword">for</span> (String key : data.keySet()) &#123;</span><br><span class="line">            <span class="keyword">final</span> List&lt;String&gt; ctx = data.get(key);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span>topics.get(key);</span><br><span class="line">            pool.execute(()-&gt;&#123;</span><br><span class="line">                KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(prop);</span><br><span class="line">                <span class="keyword">for</span> (String line : ctx) &#123;</span><br><span class="line">                    ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(topic,line);</span><br><span class="line">                    producer.send(record);</span><br><span class="line">                &#125;</span><br><span class="line">                producer.close();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.njupt.readfiletokafka.commons;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.njupt.readfiletokafka.commons.handimpl.StringDataHandlerImp;</span><br><span class="line"><span class="keyword">import</span> com.njupt.readfiletokafka.commons.kafkaimpl.RRWKafkaUtilsImpl;</span><br><span class="line"><span class="keyword">import</span> com.njupt.readfiletokafka.commons.readimpl.ReadCSVFileUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">ReadFileUtils</span> <span class="variable">rcfu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadCSVFileUtil</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">DataHandler</span> <span class="variable">dh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringDataHandlerImp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">&quot;192.168.179.140:9092&quot;</span>);</span><br><span class="line">        prop.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">        prop.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        prop.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; topics = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        topics.put(<span class="string">&quot;train.csv&quot;</span>,<span class="string">&quot;train&quot;</span>);</span><br><span class="line">        topics.put(<span class="string">&quot;test.csv&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        topics.put(<span class="string">&quot;time_zone.csv&quot;</span>,<span class="string">&quot;timezone&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; mp = rcfu.read(<span class="string">&quot;E:\\ProgramFile\\BigDataStudy\\data\\scalaProject\\temp&quot;</span>);</span><br><span class="line">            HashMap&lt;String, Boolean&gt; header = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            header.put(<span class="string">&quot;train.csv&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            header.put(<span class="string">&quot;test.csv&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            header.put(<span class="string">&quot;time_zone.csv&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">            Map&lt;String,List&lt;String&gt;&gt; newMp = dh.handler(mp, header);</span><br><span class="line">            <span class="type">RWKafkaUtils</span> <span class="variable">rw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RRWKafkaUtilsImpl</span>(prop,topics);</span><br><span class="line">            rw.writeKafka(newMp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li><p>上面这个代码中是一行一行塞入的，效率显然有点低，找找一批一批的方式。</p>
<p>好像找不到</p>
</li>
</ul>
<h3 id="2-Kafka读出-消费者"><a href="#2-Kafka读出-消费者" class="headerlink" title="2.Kafka读出(消费者)"></a>2.Kafka读出(消费者)</h3><ul>
<li>消费者的读过程是一个死循环</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240803140904235.png"
                      alt="image-20240803140904235"
                ></p>
<ul>
<li><p>参数”enable.auto.commit”是设置是否自动提交。</p>
<p>自动提交会导致重复数据，手动提交重复数据后接Hbase或者Redis去重</p>
</li>
<li><p>poll里面的时间要算好，吞吐量要符合要求。现在用Deration填充值，是多长时间给一次数据。</p>
</li>
<li><p>这边的类是反序列化</p>
</li>
<li><pre><code class="Java">rprop.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,&quot;false&quot;); // 开启手动提交
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 一个组共用一个offset，到最后就不能读了，因此只能读一次。</span><br><span class="line"></span><br><span class="line">  有两个方法继续读：</span><br><span class="line"></span><br><span class="line">  1. 新开一组</span><br><span class="line"></span><br><span class="line">     参数`ConsumerConfig.GROUP_ID_CONFIG`改组</span><br><span class="line"></span><br><span class="line">  2. 将偏移量归0</span><br><span class="line"></span><br><span class="line">     命令行下命令</span><br><span class="line"></span><br><span class="line">     `kafka-consumer-groups.sh --bootstrap-server 192.168.179.140:9092 --group cm --reset-offsets --to-earliest --topic mydemo --execute`</span><br><span class="line"></span><br><span class="line">     将某组的某个topic的offset设置为0，只能在该组没人使用的时候才能执行</span><br><span class="line"></span><br><span class="line">- 演示代码</span><br><span class="line"></span><br><span class="line">  - 包和前面一致</span><br><span class="line"></span><br><span class="line">  - 代码</span><br><span class="line"></span><br><span class="line">    ```Java</span><br><span class="line">    public class ReadKafkaImpl implements ReadKafka &#123;</span><br><span class="line">        Properties prop;</span><br><span class="line">        public ReadKafkaImpl(Properties properties)&#123;</span><br><span class="line">            this.prop = properties;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void read(String topic) &#123;</span><br><span class="line">            KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;String, String&gt;(prop);</span><br><span class="line">            consumer.subscribe(Arrays.asList(topic));</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                ConsumerRecords&lt;String, String&gt; re = consumer.poll(Duration.ofSeconds(5));	// 当没有数据过来时，轮询的时间</span><br><span class="line">    //            System.out.println(System.currentTimeMillis()+&quot;======&quot;+ re.count());</span><br><span class="line">                for (ConsumerRecord&lt;String, String&gt; record : re) &#123;</span><br><span class="line">                    System.out.println(record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public class MyTest &#123;</span><br><span class="line">        // 从kafka读出去</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            Properties prop = new Properties();</span><br><span class="line">            prop.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,&quot;192.168.179.140:9092&quot;);</span><br><span class="line">            prop.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;cm&quot;);</span><br><span class="line">            prop.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">            prop.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">            prop.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,&quot;1000&quot;); // 配置一批出去多少数据，默认四五百</span><br><span class="line">            prop.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span><br><span class="line">            ReadKafkaImpl rki = new ReadKafkaImpl(prop);</span><br><span class="line">            rki.read(&quot;events&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

- 获取的值要用value()来展示

- 如果使用Spark要在读出for循环上面加个

  <div class="code-container" data-rel="Scala"><figure class="iseeu highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConversions</span>._</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ul>
<h3 id="3-Kafka到kafka-手动提交"><a href="#3-Kafka到kafka-手动提交" class="headerlink" title="3.Kafka到kafka(手动提交)"></a>3.Kafka到kafka(手动提交)</h3><ul>
<li><p>用于处理数据</p>
</li>
<li><p><strong>这边的读过程就是消费者过程用手动提交——offset偏移自己来，不会少数据，但可能会重复消费：消费者挂掉了！此时offset还未提交呢，那么当服务重启时，还是会拉取相同的一批数据重复处理！造成消息重复消费</strong>。因此后续最好接上一个幂等性的数据库来去重。比如Hbase，但Hbase速度比Kafka慢，而且行键要进行盐+hash</p>
<ul>
<li><p>同步提交</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">consumer.commitSync();</span><br></pre></td></tr></table></figure></div>

<p>同步率低，速度慢，因为会等</p>
</li>
<li><p>异步提交</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">consumer.commitAsync();</span><br></pre></td></tr></table></figure></div>

<p>重复率高，速度快</p>
</li>
</ul>
</li>
</ul>
<h4 id="A-Java"><a href="#A-Java" class="headerlink" title="A.Java"></a>A.Java</h4><ul>
<li><p>包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>程序</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaDataHandlerUtils</span> &#123;</span><br><span class="line">    Properties readProp;</span><br><span class="line">    Properties writeProp;</span><br><span class="line">    <span class="keyword">private</span> String readTopic;</span><br><span class="line">    <span class="keyword">private</span> String writeTopic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KafkaDataHandlerUtils</span><span class="params">(Properties readProp, Properties writeProp, String readTopic, String writeTopic)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.readProp = readProp;</span><br><span class="line">        <span class="built_in">this</span>.writeProp = writeProp;</span><br><span class="line">        <span class="built_in">this</span>.readTopic = readTopic;</span><br><span class="line">        <span class="built_in">this</span>.writeTopic = writeTopic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rwHandler</span><span class="params">(DataHandler dh)</span> &#123;</span><br><span class="line">        KafkaConsumer&lt;String,String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(readProp);</span><br><span class="line">        consumer.subscribe(Arrays.asList(readTopic));</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">1200</span>)); <span class="comment">// 1.2S轮询时间</span></span><br><span class="line">            KafkaProducer&lt;String,String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(writeProp);</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                List&lt;String&gt; datas = dh.handler(record.value());</span><br><span class="line">                <span class="keyword">for</span> (String line : datas) &#123;</span><br><span class="line">                    ProducerRecord&lt;String, String&gt; pr = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(writeTopic, line);</span><br><span class="line">                    producer.send(pr);</span><br><span class="line">                &#125;</span><br><span class="line">                consumer.commitSync(); <span class="comment">// 同步提交，手动提交</span></span><br><span class="line">            &#125;</span><br><span class="line">            producer.close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">wprop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        wprop.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">&quot;192.168.179.140:9092&quot;</span>);</span><br><span class="line">        wprop.put(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">        wprop.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        wprop.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">rprop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        rprop.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">&quot;192.168.179.140:9092&quot;</span>);</span><br><span class="line">        rprop.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;cm001&quot;</span>);</span><br><span class="line">        rprop.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        rprop.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        rprop.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,<span class="string">&quot;400&quot;</span>); <span class="comment">// 107513B*400大概50M左右，虚拟机设置的速度有限制LSI logic最高传输速度为按机械硬盘算</span></span><br><span class="line">        rprop.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;earliest&quot;</span>);</span><br><span class="line">        rprop.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="string">&quot;false&quot;</span>); <span class="comment">// 开启手动提交</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">rtopic</span> <span class="operator">=</span> <span class="string">&quot;orgin_ea&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">wtopic</span> <span class="operator">=</span> <span class="string">&quot;eventAttendees&quot;</span>;</span><br><span class="line">        <span class="type">KafkaDataHandlerUtils</span> <span class="variable">ku</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KafkaDataHandlerUtils</span>(rprop, wprop, rtopic, wtopic);</span><br><span class="line">        ku.rwHandler(<span class="keyword">new</span> <span class="title class_">EventAttendeesDataHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="4-Kafka读到Hbase"><a href="#4-Kafka读到Hbase" class="headerlink" title="4.Kafka读到Hbase"></a>4.Kafka读到Hbase</h3><ul>
<li><pre><code class="java">public class EventsImpl implements HbaseDataHandler &#123;
    @Override
    public Put change(String line) &#123;
        String[] infos = line.split(&quot;,&quot;,-1);
        Put put = new Put(infos[0].getBytes()); // 用hashcode会让效率更高，分布更均匀，但是在大量的数据下可能会导致出的hash值相同
        put.addColumn(&quot;base&quot;.getBytes(), &quot;eventid&quot;.getBytes(), infos[0].getBytes());
        put.addColumn(&quot;base&quot;.getBytes(), &quot;userid&quot;.getBytes(), infos[1].getBytes());
        put.addColumn(&quot;base&quot;.getBytes(), &quot;starttime&quot;.getBytes(), infos[2].getBytes());
        put.addColumn(&quot;base&quot;.getBytes(), &quot;city&quot;.getBytes(), infos[3].getBytes());
        put.addColumn(&quot;base&quot;.getBytes(), &quot;state&quot;.getBytes(), infos[4].getBytes());
        put.addColumn(&quot;base&quot;.getBytes(), &quot;zip&quot;.getBytes(), infos[5].getBytes());
        put.addColumn(&quot;base&quot;.getBytes(), &quot;country&quot;.getBytes(), infos[6].getBytes());
        put.addColumn(&quot;base&quot;.getBytes(), &quot;lat&quot;.getBytes(), infos[7].getBytes());
        put.addColumn(&quot;base&quot;.getBytes(), &quot;lng&quot;.getBytes(), infos[8].getBytes());

        for (int i = 1; i &lt;= 101; i++) &#123;
            put.addColumn(&quot;base&quot;.getBytes(), (&quot;c&quot; + i).getBytes(), infos[i + 8].getBytes());
        &#125;
        return put;
    &#125;
&#125;

public class KafkaToHabase &#123;
    private Properties readProp;
    private String topic;
    private String zookeeperAddr;
    private String hbaseTableName;

    public KafkaToHabase(Properties readProp, String topic, String zookeeperAddr, String hbaseTableName) &#123;
        this.readProp = readProp;
        this.topic = topic;
        this.zookeeperAddr = zookeeperAddr;
        this.hbaseTableName = hbaseTableName;
    &#125;

    public void dataTranscation(HbaseDataHandler hdh) throws Exception&#123;
        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(readProp);
        consumer.subscribe(Arrays.asList(topic));
        Configuration conf = HBaseConfiguration.create();
        conf.set(&quot;hbase.zookeeper.quorum&quot;,zookeeperAddr);
        Connection connection = ConnectionFactory.createConnection(conf);

        BufferedMutatorParams bmp = new BufferedMutatorParams(TableName.valueOf(hbaseTableName));
        bmp.writeBufferSize(5 * 1024 * 1024);
        bmp.setWriteBufferPeriodicFlushTimerTickMs(2000);
        final BufferedMutator bm = connection.getBufferedMutator(bmp);
        while (true) &#123;
            ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(1000));
            List&lt;Put&gt; puts = new ArrayList&lt;&gt;();
            for(ConsumerRecord&lt;String,String&gt; record:records)&#123;
                Put put = hdh.change(record.value());
                puts.add(put);
            &#125;
            System.out.println(&quot;=========&quot;+puts.size());
            bm.mutate(puts);
            bm.flush();
            puts.clear();
            consumer.commitSync();
        &#125;
    &#125;
&#125;

public class NewMain &#123;
    public static void main(String[] args) throws Exception&#123;
        Properties prop = new Properties();
        prop.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,&quot;192.168.179.140:9092&quot;);
        prop.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;cm011&quot;);
        prop.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);
        prop.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);
        prop.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,&quot;2600&quot;);
        prop.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);
        prop.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,&quot;false&quot;); // 开启手动提交

        String topic = &quot;events&quot;;
        String zkAddr = &quot;192.168.179.140:2181&quot;;
        String hbaseTable = &quot;interested:events&quot;;

        KafkaToHabase kth = new KafkaToHabase(prop, topic, zkAddr, hbaseTable);
        kth.dataTranscation(new EventsImpl());
    &#125;
&#125;
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## (七)进阶学习</span><br><span class="line"></span><br><span class="line">### 1.#重要#判断kafka输出的对象的接收速度</span><br><span class="line"></span><br><span class="line">- 通过</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  prop.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,&quot;2600&quot;); // Kafka每一次拉取数据的大小</span><br><span class="line">  </span><br><span class="line">  bmp.writeBufferSize(5 * 1024 * 1024); //hbase buffer中超过这个量传一次数据5M</span><br><span class="line">  bmp.setWriteBufferPeriodicFlushTimerTickMs(2000); //hbase buffer中每2秒再传一次数据</span><br><span class="line">  </span><br><span class="line">  ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(1000)); // Kafka每1秒拉取一次数据</span><br></pre></td></tr></table></figure></div>

可以先把`prop.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,&quot;2600&quot;);`量拉大，看最大能多少，然后发现吞吐量大小。然后2600/1算出值大概比前面最大的来小一点。大一点会更快，但是会导致
</code></pre>
</li>
<li><pre><code>ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(1000));
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  这里的“1秒”（1000毫秒）并不是指消费者每1秒读取一次数据，而是指`poll`方法在没有新数据到达的情况下等待的时间。换句话说，如果在这1秒内没有新的消息到达，`poll`方法会返回一个空的结果，然后你的代码可能会再次调用`poll`方法，继续等待新的消息。</span><br><span class="line"></span><br><span class="line">  如果在这1秒内确实有新的消息到达，`poll`方法会立即返回这些消息，而不需要等待完整的1秒。因此，消费者的读取频率取决于消息到达的频率，而不是固定的每1秒读取一次。</span><br><span class="line"></span><br><span class="line">  当数据都在Kafka中的时候，这个1秒可以看作读取数据的时间间隔</span><br><span class="line"></span><br><span class="line"># 十四.Spark Streaming</span><br><span class="line"></span><br><span class="line">- 流的特点是有头无尾</span><br><span class="line"></span><br><span class="line">## (一)开始</span><br><span class="line"></span><br><span class="line">### 1.常见流处理框架</span><br><span class="line"></span><br><span class="line">- Apache Spark Streaming</span><br><span class="line">- Apache Flink</span><br><span class="line">- Confluent</span><br><span class="line">- Apache Storm</span><br><span class="line"></span><br><span class="line">### 2.Spark Streaming简介</span><br><span class="line"></span><br><span class="line">- 我们这儿用的Spark是2.3.4</span><br><span class="line"></span><br><span class="line">- ![image-20240804222117058](https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240804222117058.png)</span><br><span class="line"></span><br><span class="line">  dashboards是面板，相当于是那些软件</span><br><span class="line"></span><br><span class="line">- 真的实时流要来一条处理一条，不能设置时间</span><br><span class="line"></span><br><span class="line">- Spark Streaming相当于**微批处理**，是**伪实时流**。最小可以1ms为窗口，一般情况下是10ms</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">### 3.Spark Streaming 流数据处理架构</span><br><span class="line"></span><br><span class="line">- 典型架构</span><br><span class="line"></span><br><span class="line">- 流式数仓</span><br><span class="line"></span><br><span class="line">  ![image-20240804222315305](https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240804222315305.png)</span><br><span class="line"></span><br><span class="line">- 实时数仓为了追求效率，一般层数很少。而且层数基本是按硬件来分的，中间的Kafka和Flume那相当于是</span><br><span class="line"></span><br><span class="line">### 4.Spark Streaming 内部工作流程</span><br><span class="line"></span><br><span class="line">- 微批处理：输入-&gt;分批处理-&gt;结果集</span><br><span class="line"></span><br><span class="line">  - 以离散流的形式传入数据(DStream:Discretized Streams)</span><br><span class="line">  - 流被分成微批次(1-10s)，每一个微批都是一个RDD</span><br><span class="line"></span><br><span class="line">  ![image-20240804222805041](https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240804222805041.png)</span><br><span class="line"></span><br><span class="line">### 5.内建流式数据源</span><br><span class="line"></span><br><span class="line">![image-20240804225231503](https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240804225231503.png)</span><br><span class="line"></span><br><span class="line">### 6.DStream支持的转换算子</span><br><span class="line"></span><br><span class="line">- &lt;img src=&quot;https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240804225332570.png&quot; alt=&quot;image-20240804225332570&quot; style=&quot;zoom: 33%;&quot; /&gt;</span><br><span class="line">- updateStateByKey</span><br><span class="line"></span><br><span class="line">## (二)使用</span><br><span class="line"></span><br><span class="line">![image-20240804222850035](https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240804222850035.png)</span><br><span class="line"></span><br><span class="line">### 1.流处理输出数据</span><br><span class="line"></span><br><span class="line">- 终端上`nc -lk 19999`打开端口监控，手动输入数据</span><br><span class="line"></span><br><span class="line">- 在java这儿每五秒展示一次终端上输入的数据</span><br><span class="line"></span><br><span class="line">  ```scala</span><br><span class="line">  object MyStream &#123;</span><br><span class="line">      def main(args: Array[String]): Unit = &#123;</span><br><span class="line">          val conf = new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;mystream&quot;)</span><br><span class="line">          val ssc = new StreamingContext(conf, Seconds(5))</span><br><span class="line">          val ds = ssc.socketTextStream(&quot;192.168.179.140&quot;, 19999)</span><br><span class="line">          ds.print()</span><br><span class="line">          //    ds.foreachRDD(rdd=&gt;println(rdd))</span><br><span class="line">          ssc.start();</span><br><span class="line">          ssc.awaitTermination();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ul>
<p>导入的包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>停止程序会报错，但是没事，因为流有头无尾，是非正常状态的退出</li>
</ul>
<h3 id="2-Spark-Streaming读Kafka"><a href="#2-Spark-Streaming读Kafka" class="headerlink" title="2.Spark Streaming读Kafka"></a>2.Spark Streaming读Kafka</h3><ul>
<li><p>代码</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">object MyStream &#123;</span><br><span class="line">    def <span class="title function_">main</span><span class="params">(args: Array[String])</span>: Unit = &#123;</span><br><span class="line">        <span class="type">val</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;mystream&quot;</span>)</span><br><span class="line">            <span class="type">val</span> <span class="variable">ssc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamingContext</span>(conf, Seconds(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*    val ds = ssc.socketTextStream(&quot;192.168.179.140&quot;, 19999)</span></span><br><span class="line"><span class="comment">    ds.print()</span></span><br><span class="line"><span class="comment">    ds.foreachRDD(rdd=&gt;println(rdd))*/</span></span><br><span class="line">            <span class="type">val</span> <span class="variable">param</span> <span class="operator">=</span> Map[String, String](</span><br><span class="line">            ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG-&gt; <span class="string">&quot;192.168.179.140:9092&quot;</span>,</span><br><span class="line">            ConsumerConfig.GROUP_ID_CONFIG -&gt;   <span class="string">&quot;cmm&quot;</span>,</span><br><span class="line">            ConsumerConfig.AUTO_OFFSET_RESET_CONFIG-&gt;<span class="string">&quot;earliest&quot;</span>,</span><br><span class="line">            ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG-&gt;classOf[StringDeserializer].getName,</span><br><span class="line">            ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG-&gt;classOf[StringDeserializer].getName)</span><br><span class="line">            <span class="type">var</span> <span class="variable">topics</span> <span class="operator">=</span> Array(<span class="string">&quot;events&quot;</span>).toList</span><br><span class="line">            <span class="keyword">var</span> ds=KafkaUtils.createDirectStream[String,String](</span><br><span class="line">            ssc,LocationStrategies.PreferConsistent,</span><br><span class="line">            ConsumerStrategies.Subscribe[String,String](topics,param)</span><br><span class="line">        ).map(_.value()).print()</span><br><span class="line">            ssc.start();</span><br><span class="line">        ssc.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据学习笔记6</title>
    <url>/2025/09/11/technology/bigdata/Hadoop6-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<ul>
<li>Power BI</li>
<li></li>
</ul>
<h1 id="帆软"><a href="#帆软" class="headerlink" title="帆软"></a>帆软</h1><ul>
<li>FineReport帆软 公司用要收费的 个人随便用</li>
<li>下载直接下</li>
<li><a class="link"   href="https://help.fanruan.com/finereport/" >帮助文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h2 id="一-软件初识"><a href="#一-软件初识" class="headerlink" title="一.软件初识"></a>一.软件初识</h2><h3 id="一-分类"><a href="#一-分类" class="headerlink" title="(一)分类"></a>(一)分类</h3><h4 id="1-普通报表和初级使用"><a href="#1-普通报表和初级使用" class="headerlink" title="1.普通报表和初级使用"></a>1.普通报表和初级使用</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/bigdata/image-20240815165339072.png"
                      alt="image-20240815165339072"
                ></p>
</li>
<li><p>一个fvs是一个报表</p>
</li>
<li><p><strong>上面服务器-定义数据连接可以配置数据库</strong></p>
</li>
<li><p>左边下面的+号可以配置查询语句，要使用的时候，把查询出来的东西手动拖到各自中，默认是向下填充的。改填充方式可以通过右边一栏的单元格属性改。</p>
</li>
<li><p>单元格属性中还有调图像的各种参数，图像插入是要给出位置来的，用单元格合并，那些虚线，实际上是纸张大小，可以自己调</p>
</li>
<li><p>mysql5序号</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a.*,@rownum:=@rownum+1 as rk from</span><br><span class="line">(select u.userid,u.age,u.gender,count(ea.qa) qanum</span><br><span class="line">from users u inner join eventsAttendees ea on u.userid = ea.userid</span><br><span class="line">group by u.userid, u.age, u.gender order by qanum desc limit  5) a,</span><br><span class="line">    (select @rownum :=0) t</span><br></pre></td></tr></table></figure></div>
</li>
<li></li>
</ul>
<h4 id="3-决策报表"><a href="#3-决策报表" class="headerlink" title="3.决策报表"></a>3.决策报表</h4><p>- </p>
<h3 id="二-服务器控制"><a href="#二-服务器控制" class="headerlink" title="(二)服务器控制"></a>(二)服务器控制</h3><ul>
<li>在上面服务器，报表平台管理，登录管理员账户 </li>
<li></li>
</ul>
<h4 id="1-建用户，定权限，给看自己的东西"><a href="#1-建用户，定权限，给看自己的东西" class="headerlink" title="1.建用户，定权限，给看自己的东西"></a>1.建用户，定权限，给看自己的东西</h4><blockquote>
<ol>
<li>管理系统-用户管理-添加用户-根据部门定权限</li>
<li>目录管理中加入自己的目录和模板</li>
<li>权限管理中赋予权限，部门和角色都要改</li>
</ol>
</blockquote>
<h3 id="三-问题结局"><a href="#三-问题结局" class="headerlink" title="(三)问题结局"></a>(三)问题结局</h3><h4 id="1-自动刷新"><a href="#1-自动刷新" class="headerlink" title="1.自动刷新"></a>1.自动刷新</h4><ul>
<li><p>自动刷新：添加事件：</p>
<p>10秒刷一次</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;self.location.reload();&quot;</span>,<span class="number">10000</span>);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="2-自定义数据集"><a href="#2-自定义数据集" class="headerlink" title="2.自定义数据集"></a>2.自定义数据集</h4><ul>
<li>##<strong>如果数据源不包括在之前的服务器类别中</strong></li>
<li><a class="link"   href="https://help.fanruan.com/finereport/doc-view-650.html" >简单程序数据集<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<blockquote>
<ol>
<li><p>%FR_HOME%&#x2F;lib下的所有的包，</p>
<p>%FR_HOME%&#x2F;server&#x2F;lib 下的所有包，</p>
<p>%FR_HOME%&#x2F;webapps&#x2F;webroot&#x2F;WEB-INF&#x2F;lib下的所有包，</p>
<p>还要引入 JDK 下的 tools.jar 放到一个文件夹</p>
</li>
<li><p>在idea中alt+ctrl+shift+S，modules-dependencies点+号，然后jars和directory找到这个文件夹，地基Compile模式，ok成功</p>
</li>
<li><p>编写代码</p>
<p>包一定要<code>com.fr.data;</code></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fr.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fr.data.SimpleTableData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleDataSourceApp</span> <span class="keyword">extends</span> <span class="title class_">SimpleTableData</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] initColumnNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;pwd&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object[]&gt; loadData() &#123;</span><br><span class="line">        ArrayList&lt;Object[]&gt; value = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        value.add(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="string">&quot;123&quot;</span>&#125;);</span><br><span class="line">        value.add(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">3</span>,<span class="string">&quot;456&quot;</span>&#125;);</span><br><span class="line">        value.add(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">123</span>,<span class="string">&quot;789&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>然后右击项目</li>
<li>rebuild一下</li>
<li>在target中找到class文件复制到<code>%FR_HOME%webapps/webroot/WEB-INF/classes/com/fr/data</code>中</li>
</ul>
</li>
<li><p>重启帆软</p>
</li>
<li><p>+数据集，程序，找到class就可以了</p>
</li>
</ol>
</blockquote>
<h2 id="二"><a href="#二" class="headerlink" title="二."></a>二.</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
      </tags>
  </entry>
  <entry>
    <title>Sabthever的博客搭建</title>
    <url>/2024/12/18/technology/blog/Welcome/</url>
    <content><![CDATA[<h2 id="Sabthever搭建的第一个博客"><a href="#Sabthever搭建的第一个博客" class="headerlink" title="Sabthever搭建的第一个博客"></a>Sabthever搭建的第一个博客</h2><ul>
<li><p>博客地址</p>
<p>  <a class="link"   href="https://www.sabthever.cn/" >https://www.sabthever.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>  <a class="link"   href="https://sabthever.github.io/" >https://sabthever.github.io/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>部署地址</p>
<p>  <a class="link"   href="https://github.com/Sabthever/Sabthever.github.io" >https://github.com/Sabthever/Sabthever.github.io<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><blockquote>
<h5 id="搭建架构"><a href="#搭建架构" class="headerlink" title="搭建架构"></a>搭建架构</h5></blockquote>
<ul>
<li><p>hexo + github</p>
</li>
<li><p><a class="link"   href="https://hexo.io/docs/" >hexo文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="https://www.github.com/" >github官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<blockquote>
<h5 id="网站搭建参考文献"><a href="#网站搭建参考文献" class="headerlink" title="网站搭建参考文献"></a>网站搭建参考文献</h5></blockquote>
<p><a class="link"   href="https://blog.csdn.net/weixin_43883917/article/details/143885553" >利用 GitHub 和 Hexo 搭建个人博客【保姆教程】<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<h5 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h5></blockquote>
<ul>
<li><p><a class="link"   href="https://github.com/EvanNotFound/hexo-theme-redefine" >正在使用的主题<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="https://redefine-docs.ohevan.com/zh/introduction" >使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>这个作者做的<strong>超级好</strong></p>
</li>
</ul>
<h2 id="How-to-operate"><a href="#How-to-operate" class="headerlink" title="How to operate"></a>How to operate</h2><blockquote>
<h5 id="Hexo文档地址"><a href="#Hexo文档地址" class="headerlink" title="Hexo文档地址"></a>Hexo文档地址</h5></blockquote>
<ul>
<li><p>英文地址：<a class="link"   href="https://hexo.io/docs/" >https://hexo.io/docs/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>中文地址：<a class="link"   href="https://hexo.io/zh-cn/docs/" >https://hexo.io/zh-cn/docs/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<blockquote>
<h5 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h5></blockquote>
<ul>
<li><code>hexo s[erver]</code></li>
</ul>
<blockquote>
<h5 id="发布与更新"><a href="#发布与更新" class="headerlink" title="发布与更新"></a>发布与更新</h5></blockquote>
<ul>
<li><p><code>hexo clean</code>: 不需要每次都执行，只有在遇到生成问题或更改了主题&#x2F;配置文件时使用。</p>
</li>
<li><p><code>hexo g[enerate]</code>: 每次更新内容后都需要执行，以生成最新的静态文件。</p>
</li>
<li><p><code>hexo d[eploy]</code>: 如果需要发布到远程服务器，执行 hexo d 进行部署。</p>
</li>
</ul>
<blockquote>
<h5 id="修改网址"><a href="#修改网址" class="headerlink" title="修改网址"></a>修改网址</h5></blockquote>
<ul>
<li><p>文件：<code>_config.yml</code></p>
</li>
<li><p>字段：修改<code>url</code></p>
</li>
</ul>
<blockquote>
<h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5></blockquote>
<ul>
<li><p>在themes中从<a class="link"   href="https://hexo.io/themes/" >官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>找喜欢的主题，并且git下来</p>
</li>
<li><p>然后再<code>_config.yml</code>中修改theme的名字，和themes&#x2F;下的主题文件夹名保持一致</p>
</li>
</ul>
<blockquote>
<h5 id="建立新的帖子"><a href="#建立新的帖子" class="headerlink" title="建立新的帖子"></a>建立新的帖子</h5></blockquote>
<ul>
<li><p>建立：</p>
<p>  <code>hexo n[ew] &quot;帖子名称&quot;</code></p>
</li>
</ul>
<blockquote>
<h5 id="子模块的使用"><a href="#子模块的使用" class="headerlink" title="子模块的使用"></a>子模块的使用</h5></blockquote>
<ul>
<li><p>缘由</p>
<p>  我的<code>themes/</code>中的theme是从别人的仓库中拿下来的，可以建立<code>fork</code></p>
</li>
<li><p>初期使用</p>
  <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fork的方法自己找找，这里没写，就一条命令</span></span><br><span class="line"><span class="built_in">cd</span> themes/my-forked-repo</span><br><span class="line"><span class="comment"># 自己的仓库</span></span><br><span class="line">git remote set-url origin https://github.com/Sabthever/myrepo.git</span><br><span class="line"><span class="comment"># 别人的原始仓库</span></span><br><span class="line">git remote add upstream https://github.com/original-username/original-repo.git</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>后期使用</p>
  <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从别人的url获取更新</span></span><br><span class="line">git fetch upstream</span><br><span class="line"><span class="comment"># 这会获取原始仓库的所有更新。如果你想将这些更新合并到你本地的 main 分支中，可以运行：</span></span><br><span class="line">git merge upstream/main</span><br><span class="line"><span class="comment"># 或者，如果你希望直接把 upstream/main 的更改应用到你的本地分支，可以使用：</span></span><br><span class="line">git pull upstream main</span><br><span class="line"><span class="comment"># 然后可以回到自己文件夹的位置</span></span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>后面所有<code>theme/other-repo</code>中的修改，都要现在子模块里<code>commit，push</code>一下，再到自己的里面<code>commit，push</code>一下</p>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis一对多嵌套查询</title>
    <url>/2025/01/15/technology/java/Mybatis%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>　　Mybatis中如何用一次调用做到嵌套查询，把数据放入嵌套的实例对象中？这里以省份-城市为例，看</p>
<p>　　查省份后查城市，实际只要调用查省份的接口就会自动查省份+城市，转位json最后效果如下</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海市&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海市&quot;</span><span class="punctuation">,</span>                                                                      </span><br><span class="line">        <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海城区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海城区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;内蒙古自治区&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;内蒙古自治区&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鄂尔多斯市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鄂尔多斯市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京市&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京市&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京城区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京城区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吉林省&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吉林省&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吉林市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吉林市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四平市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四平市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;白城市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;白城市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;辽源市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;辽源市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;长春市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;长春市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></div>



<blockquote>
<h4 id="AreaRegionListResult-java"><a href="#AreaRegionListResult-java" class="headerlink" title="AreaRegionListResult.java"></a>AreaRegionListResult.java</h4></blockquote>
<p>　　接收收据实体类</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sabthever.model.result.supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;省市下拉框返回参数&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AreaRegionListResult</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;标签&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;子结构&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AreaRegionListResult&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="Mapper-java中"><a href="#Mapper-java中" class="headerlink" title="Mapper.java中"></a>Mapper.java中</h4></blockquote>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sabthever.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SupplierAreaMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;AreaRegionListResult&gt; <span class="title function_">selectProvinces</span><span class="params">(<span class="meta">@Param(&quot;department&quot;)</span> String department)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;AreaRegionListResult&gt; <span class="title function_">selectCities</span><span class="params">(<span class="meta">@Param(&quot;department&quot;)</span> String department,<span class="meta">@Param(&quot;province&quot;)</span> String province)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="Mapper-xml中"><a href="#Mapper-xml中" class="headerlink" title="Mapper.xml中"></a>Mapper.xml中</h4></blockquote>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sabthever.mapper.SupplierAreaMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查城市 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;cityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sabthever.model.result.supplier.AreaRegionListResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;value&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;label&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCities&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;cityMap&quot;</span>&gt;</span></span><br><span class="line">        select distinct city from table</span><br><span class="line">        where business_name=#&#123;department&#125; and shengfen=#&#123;province&#125;</span><br><span class="line">        order by city;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查省份 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;provinceMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sabthever.model.result.supplier.AreaRegionListResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;value&quot;</span> <span class="attr">column</span>=<span class="string">&quot;province&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 查出来的province同时放到类中两个属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;label&quot;</span> <span class="attr">column</span>=<span class="string">&quot;province&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 根据column传入的两个参数(方法参数=查出来字段名),用select中的方法取值，传入类的children的List，中间的数据类为AreaRegionListResult --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;children&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.sabthever.model.result.supplier.AreaRegionListResult&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;com.sabthever.mapper.SupplierAreaMapper.selectCities&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;&#123;department=department, province=province&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectProvinces&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;provinceMap&quot;</span>&gt;</span></span><br><span class="line">        select shengfen as province,#&#123;department&#125; as department from table</span><br><span class="line">        where business_name=#&#123;department&#125; group by province order by province;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="ServiceImpl-java中"><a href="#ServiceImpl-java中" class="headerlink" title="ServiceImpl.java中"></a>ServiceImpl.java中</h4></blockquote>
<p>　　这边就放了实现类，接口自己加一个</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cockpit.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SupplierAreaServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SupplierAreaService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SupplierAreaMapper areaMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AreaRegionListResult&gt; <span class="title function_">selectAreaTabList</span><span class="params">(String department)</span> &#123;</span><br><span class="line">        List&lt;AreaRegionListResult&gt; site = areaMapper.selectProvinces(department)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4></blockquote>
<p>　　Controller层的东西就自己来了，调用Mapper层的不需要selectCities就可以获得相应数据</p>
<p>　　欧了！拜拜！！</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL枚举排序</title>
    <url>/2025/04/02/technology/java/SQL%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>　　在SQL取值最后排序的时候，我们有这样的一个业务需求，按照特定的字段值进行排序，针对这种情况简单讲述一下SQL的枚举排序。</p>
<p>　　这边以MySQL为例，有3种方法。</p>
<h3 id="1-case-when-then-end"><a href="#1-case-when-then-end" class="headerlink" title="1.case when ... then ...  end"></a>1.<code>case when ... then ...  end</code></h3><p>（最通用，所有数据库支持）</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> categories</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CASE</span> seniority_category</span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;0-1年&#x27;</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;1-2年&#x27;</span> <span class="keyword">THEN</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;2-3年&#x27;</span> <span class="keyword">THEN</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;3-5年&#x27;</span> <span class="keyword">THEN</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;5-10年&#x27;</span> <span class="keyword">THEN</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;10年以上&#x27;</span> <span class="keyword">THEN</span> <span class="number">6</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="number">7</span> <span class="comment">-- 处理未列出的值（可选）</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-FIELD函数"><a href="#2-FIELD函数" class="headerlink" title="2.FIELD函数"></a>2.<code>FIELD函数</code></h3><p>（MySQL 特有）</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> categories</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> FIELD(seniority_category, <span class="string">&#x27;0-1年&#x27;</span>, <span class="string">&#x27;1-2年&#x27;</span>, <span class="string">&#x27;2-3年&#x27;</span>, <span class="string">&#x27;3-5年&#x27;</span>, <span class="string">&#x27;5-10年&#x27;</span>, <span class="string">&#x27;10年以上&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="3-字符串定位函数LOCATE"><a href="#3-字符串定位函数LOCATE" class="headerlink" title="3.字符串定位函数LOCATE"></a>3.<code>字符串定位函数LOCATE</code></h3><p>（通用性较好）</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> categories</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> LOCATE(</span><br><span class="line">    CONCAT(<span class="string">&#x27;,&#x27;</span>, seniority_category, <span class="string">&#x27;,&#x27;</span>), </span><br><span class="line">    <span class="string">&#x27;,0-1年,1-2年,2-3年,3-5年,5-10年,10年以上,&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<h3 id="三种方案的对比："><a href="#三种方案的对比：" class="headerlink" title="三种方案的对比："></a>三种方案的对比：</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>FIELD()</code></td>
<td align="center">简洁直观（MySQL专用）</td>
<td align="center">数据库兼容性差</td>
</tr>
<tr>
<td align="center"><code>LOCATE()</code></td>
<td align="center">无需硬编码数字，可动态调整顺序</td>
<td align="center">需处理字符串拼接，可能有性能损耗</td>
</tr>
<tr>
<td align="center"><code>CASE WHEN</code></td>
<td align="center">所有数据库通用，可读性强</td>
<td align="center">需要手动维护数字映射</td>
</tr>
</tbody></table>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>本章就到这里了，Bye！！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%862.jpeg"
                     
                ></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot注册Bean</title>
    <url>/2025/02/18/technology/java/Springboot%E6%B3%A8%E5%86%8CBean/</url>
    <content><![CDATA[<p>在 Spring Boot 项目中使用 Maven 来调用 SDK 时，是否需要注册 Bean 取决于 SDK 的特性和使用场景。下面为你详细介绍调用 SDK 的通用步骤以及注册 Bean 的相关情况。</p>
<h2 id="一-Bean简介"><a href="#一-Bean简介" class="headerlink" title="一. Bean简介"></a>一. Bean简介</h2><p>　　Bean是Spring框架（包括Spring Boot）中的一个核心概念。</p>
<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>　　在 Spring 里，Bean 指的是由 Spring IoC（Inversion of Control，控制反转）容器所创建、管理的对象。IoC 是一种设计原则，通过它将对象的创建、依赖关系的管理等控制权从应用代码转移到 Spring 容器中。简单来说，Spring 容器负责创建、配置和管理这些 Bean 对象，而不是由开发者在代码里显式地使用 <code>new</code> 关键字去创建对象。</p>
<h3 id="２-特点"><a href="#２-特点" class="headerlink" title="２.特点"></a>２.特点</h3><ul>
<li><strong>可配置性</strong>：可以通过多种方式（如 XML 配置文件、Java 配置类、注解等）对 Bean 进行详细的配置，包括 Bean 的作用域、生命周期回调方法、依赖注入等。</li>
<li><strong>依赖注入</strong>：Spring 容器会自动处理 Bean 之间的依赖关系，通过依赖注入（Dependency Injection，DI）的方式将所需的对象注入到 Bean 中，降低了代码的耦合度。</li>
<li><strong>生命周期管理</strong>：Spring 容器管理着 Bean 的整个生命周期，从创建、初始化到销毁，开发者可以指定在特定的生命周期阶段执行自定义的操作。</li>
</ul>
<h3 id="３-创建Bean的方式"><a href="#３-创建Bean的方式" class="headerlink" title="３.创建Bean的方式"></a>３.创建Bean的方式</h3><h4 id="3-1-基于-XML-配置"><a href="#3-1-基于-XML-配置" class="headerlink" title="3.1 基于 XML 配置"></a>3.1 基于 XML 配置</h4><p>　　在早期的 Spring 开发中，常使用 XML 配置文件来定义 Bean。示例如下：</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以在这里配置属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>　　上述代码中，定义了一个名为 <code>userService</code> 的 Bean，其对应的类是 <code>com.example.service.UserService</code>。</p>
<h4 id="3-2-基于-Java-配置类"><a href="#3-2-基于-Java-配置类" class="headerlink" title="3.2 基于 Java 配置类"></a>3.2 基于 Java 配置类</h4><p>　　在 Spring 3.0 及以后，推荐使用 Java 配置类来定义 Bean。示例如下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.example.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserService <span class="title function_">userService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这里使用 <code>@Configuration</code> 注解将 <code>AppConfig</code> 类标记为配置类，<code>@Bean</code> 注解用于定义一个 Bean。</p>
<h4 id="3-3基于注解扫描"><a href="#3-3基于注解扫描" class="headerlink" title="3.3基于注解扫描"></a>3.3基于注解扫描</h4><p>　　通过 <code>@Component</code> 及其派生注解（如 <code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>），Spring 可以自动扫描并将带有这些注解的类注册为 Bean。示例如下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 类的具体实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　同时，需要在配置类上添加 <code>@ComponentScan</code> 注解来指定扫描的包路径：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.example.service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 配置类的其他内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h3><p>　　Spring 管理的 Bean 有其完整的生命周期，主要包括以下几个阶段：</p>
<ol>
<li><strong>实例化</strong>：Spring 容器根据配置信息创建 Bean 的实例。</li>
<li><strong>属性注入</strong>：将 Bean 所依赖的其他对象注入进来。</li>
<li><strong>初始化</strong>：调用初始化方法，可以通过实现 <code>InitializingBean</code> 接口的 <code>afterPropertiesSet</code> 方法，或者使用 <code>@PostConstruct</code> 注解指定初始化方法。</li>
<li><strong>使用</strong>：Bean 可以被应用程序正常使用。</li>
<li><strong>销毁</strong>：当 Spring 容器关闭时，会调用销毁方法，可以通过实现 <code>DisposableBean</code> 接口的 <code>destroy</code> 方法，或者使用 <code>@PreDestroy</code> 注解指定销毁方法。</li>
</ol>
<h3 id="Bean-的管理"><a href="#Bean-的管理" class="headerlink" title="Bean 的管理"></a>Bean 的管理</h3><p>　　Spring 容器负责管理 Bean 的整个生命周期和依赖关系，开发者可以通过容器获取所需的 Bean 实例。在 Spring Boot 中，可以使用依赖注入的方式获取 Bean，示例如下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器的其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　上述代码中，通过构造函数注入的方式将 <code>UserService</code> Bean 注入到 <code>UserController</code> 中。</p>
<h2 id="二-Bean注册"><a href="#二-Bean注册" class="headerlink" title="二. Bean注册"></a>二. Bean注册</h2><p>　　步骤一，要在<code>pom.xml</code>文件里添加 SDK 的依赖。假设 SDK 的坐标信息如下，可以按照如下方式添加：</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里是你的SDK依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sdk-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>　　将上述代码中的<code>groupId</code>、<code>artifactId</code>和<code>version</code>替换为实际使用的 SDK 的对应信息。</p>
<p>　　步骤二，判断是否需要注册 Bean。这主要依据 SDK 的使用方式来确定。</p>
<h3 id="１-不需要注册-Bean"><a href="#１-不需要注册-Bean" class="headerlink" title="１.不需要注册 Bean"></a>１.不需要注册 Bean</h3><p>　　如果 SDK 提供的是<strong>静态方法</strong>，或者每次使用时都要创建新的实例，那么通常无需将其注册为 Bean。以下是一个简单示例：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.sdk.StaticSDKUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDKUsageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/use-sdk-static&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useSDKStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接调用SDK的静态方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> StaticSDKUtils.doSomething();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　在这个例子中，<code>StaticSDKUtils</code>类包含静态方法<code>doSomething</code>，可以直接调用，无需注册为 Bean。</p>
<h3 id="２-需要注册-Bean"><a href="#２-需要注册-Bean" class="headerlink" title="２.需要注册 Bean"></a>２.需要注册 Bean</h3><p>　　若 SDK 的实例创建过程较为复杂，需要进行一些<strong>初始化配置</strong>，或者<strong>该实例需要在多个组件间共享使用</strong>，那么建议将其注册为 Bean。以下是详细步骤：</p>
<h4 id="2-1-创建配置类注册-Bean"><a href="#2-1-创建配置类注册-Bean" class="headerlink" title="2.1 创建配置类注册 Bean"></a>2.1 创建配置类注册 Bean</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.sdk.SDKClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDKConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SDKClient <span class="title function_">sdkClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 进行SDKClient的初始化配置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">apiKey</span> <span class="operator">=</span> <span class="string">&quot;your-api-key&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> <span class="string">&quot;your-secret&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SDKClient</span>(apiKey, secret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　在上述代码中，<code>SDKConfig</code>类使用<code>@Configuration</code>注解表明这是一个配置类，<code>@Bean</code>注解将<code>SDKClient</code>实例注册到 Spring 容器中。</p>
<h4 id="2-2-在服务或控制器中使用注册的-Bean"><a href="#2-2-在服务或控制器中使用注册的-Bean" class="headerlink" title="2.2 在服务或控制器中使用注册的 Bean"></a>2.2 在服务或控制器中使用注册的 Bean</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.sdk.SDKClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDKUsageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SDKClient sdkClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SDKUsageController</span><span class="params">(SDKClient sdkClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sdkClient = sdkClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/use-sdk-client&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useSDKClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用SDKClient的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sdkClient.performTask();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这里通过构造函数注入的方式获取<code>SDKClient</code>实例，并调用其方法。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　是否注册 Bean 取决于 SDK 的设计和使用方式。如果 SDK 使用简单，直接调用即可；若 SDK 初始化复杂或需共享实例，注册为 Bean 是更好的选择。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown编写与页面美化</title>
    <url>/2024/12/29/technology/blog/page-beautify/</url>
    <content><![CDATA[<p>博客文章deploy以后，格式总是和自己预想的不太一样，于是直接用html标签插入，做一些记录。除此之外还有一些Redefine主题下好用的组件。</p>
<h2 id="Markdown通用"><a href="#Markdown通用" class="headerlink" title="Markdown通用"></a>Markdown通用</h2><blockquote>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4></blockquote>
<p>　　在Hexo的渲染中，表格顶格写的情况下。</p>
<p>　　比如下面这段：</p>
<div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">| Name | Age |</span><br><span class="line">| :--: | :--: |       # | :-- | 是靠左</span><br><span class="line">| 张三 | 12 |         # | --: | 是靠右 </span><br><span class="line">| 李四 | 243 |        # -的数量无所谓</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Age</th>
</tr>
</thead>
<tbody><tr>
<td align="center">张三</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">李四</td>
<td align="center">243</td>
</tr>
</tbody></table>
<p>　　我们看到，表格都是拉满的，也没有办法变小一点，不够灵活。</p>
<p>　　我们可以使用Html插入<code>&lt;table&gt;</code>组件来做到这点，更加灵活，但是在没有专门工具时，还是更加麻烦的。html可以像这样写：</p>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto; text-align: center; width: min-content;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>243<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>　　效果如下：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>张三</td>
    <td>12</td>
  </tr>
  <tr>
    <td>李四</td>
    <td>243</td>
  </tr>
</table>
</br>

<p>　　可以看到，列宽适应了文字长度。这个是<code>width: min-content;</code>达成的效果。<code>text-align: </code>这儿是文字左右。<code>margin: </code>组件外部间距距离。甚至可以合并单元格，具体可以自己查查table的style。<code>word-break: break-all;</code>可以让长度不够的换行。</p>
<p>　　再举一个例子：</p>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto; text-align: center; width: min-content;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>组号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>包子<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>馒头<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>包子<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>馒头<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>　　我们能看到：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
    <th style="white-space: nowrap;"></th>
  </tr>
  <tr>
    <td rowspan="2" style="white-space: nowrap;">1</td>
    <td rowspan="2" style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
    <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td rowspan="3" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">李四</td>
    <td rowspan="2" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">包子</td>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
      <td style="white-space: nowrap;"></td>
  </tr>
</table>
</br>

<p>　　超文本中的<code>rowspan=&quot;2&quot;</code>是该单元格占两行的意思，然后下一行的该单元格的位置就要把相应位置的单元格留出。</p>
<p>　　<code>style=&quot;white-space: nowrap;</code>是该单元格不允许换行。</p>
<blockquote>
<h4 id="文本靠右和超链接"><a href="#文本靠右和超链接" class="headerlink" title="文本靠右和超链接"></a>文本靠右和超链接</h4></blockquote>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: right;&quot;</span>&gt;</span>-- 摘自<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baike.baidu.com/item/Cloudflare/17359757?fr=ge_ala&quot;</span>&gt;</span>Cloudflare(美国的跨国科技企业) - 百度百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>效果：</p>
<div style="text-align: right;">-- 摘自<a class="link"   href="https://baike.baidu.com/item/Cloudflare/17359757?fr=ge_ala" >Cloudflare(美国的跨国科技企业) - 百度百科<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></div>
</br>

<blockquote>
<h4 id="图片缩放"><a href="#图片缩放" class="headerlink" title="图片缩放"></a>图片缩放</h4></blockquote>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;.\image\25.png&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom: 50%;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h4></blockquote>
<ul>
<li><p>回车</p>
<p>  用<code>&lt;/br&gt;</code>来换行</p>
</li>
<li><p>以后加</p>
</li>
</ul>
<h2 id="Redefine组件加强"><a href="#Redefine组件加强" class="headerlink" title="Redefine组件加强"></a>Redefine组件加强</h2><p>Redefine就是我在用的主题，是别的大佬开发的，确实美观好用。</p>
<p>[<a class="link"   href="https://github.com/EvanNotFound/hexo-theme-redefine" >Redefine<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>]　　　[<a class="link"   href="https://redefine-docs.ohevan.com/zh/introduction" >使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>]</p>
<blockquote>
<h4 id="写作模板使用"><a href="#写作模板使用" class="headerlink" title="写作模板使用"></a>写作模板使用</h4></blockquote>
<p>　　<a class="link"   href="https://redefine-docs.ohevan.com/zh/modules" >写作模板文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>　　<a class="link"   href="https://fontawesome.com/search" >Fontawsome自定义图标<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h5 id="1-提示块"><a href="#1-提示块" class="headerlink" title="1. 提示块"></a>1. 提示块</h5><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% notel [颜色] [可选: 自定义图标] [标题] %&#125;</span><br><span class="line">内容</span><br><span class="line">支持换行</span><br><span class="line">&#123;% endnotel %&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">&#123;% notel default fa-info 信息 %&#125;</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">&#123;% endnotel %&#125;</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>信息</p>

    </div>
    <div class="notel-content markdown-body">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>

<p>上面的提示块变成note，就是去掉l，可以变成没有标题的提示块：</p>

  <div class="note p-4 mb-4 rounded-small markdown-body default">
    <p>换行测试<br>换行测试<br>换行测试</p>

  </div>

<h5 id="2-按钮"><a href="#2-按钮" class="headerlink" title="2. 按钮"></a>2. 按钮</h5><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% btn [可选大小]::[名称]::[url]::[可选图标] %&#125;</span><br><span class="line"></span><br><span class="line">[可选大小]：</span><br><span class="line">center, regular, large, center large, center regular</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">&#123;% btn regular::百度一下::https://www.baidu.com::fa-solid fa-play-circle %&#125;</span><br></pre></td></tr></table></figure></div>

<a class="button regular" href='https://www.baidu.com' title='百度一下'><i class='fa-solid fa-play-circle'></i> 百度一下</a>

<h5 id="3-折叠"><a href="#3-折叠" class="headerlink" title="3. 折叠"></a>3. 折叠</h5><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% folding [颜色]::[标题] %&#125;</span><br><span class="line">需要写的内容</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">&#123;% folding blue::Folding 测试： 点击查看更多 %&#125;</span><br><span class="line">啊啊啊啊啊</span><br><span class="line">&#123;% note tip  %&#125;</span><br><span class="line">tip 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div>

<details class="blue" data-header-exclude>
    <summary><i class="fa-solid fa-chevron-right"></i>Folding 测试： 点击查看更多 </summary>
    <div class='content markdown-body'>
      <p>啊啊啊啊啊</p>
  <div class="note p-4 mb-4 rounded-small markdown-body tip">
    <p>tip 提示块标签</p>

  </div>
    </div>
  </details>

<h5 id="4-选项卡"><a href="#4-选项卡" class="headerlink" title="4. 选项卡"></a>4. 选项卡</h5><div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 页面内不重复的ID %&#125;</span><br><span class="line"> </span><br><span class="line">&lt;!-- tab 栏目1名称 --&gt;</span><br><span class="line"> </span><br><span class="line">内容</span><br><span class="line"> </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab 栏目2名称 --&gt;</span><br><span class="line"> </span><br><span class="line">内容</span><br><span class="line"> </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"> </span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div>
<div class="tabs" id="tab-页面内不重复的id"><ul class="nav-tabs"><li class="tab active"><a class="#页面内不重复的id-1">栏目1名称</a></li><li class="tab"><a class="#页面内不重复的id-2">栏目2名称</a></li></ul><div class="tab-content"><div class="tab-pane active" id="页面内不重复的id-1"><p>内容1</p></div><div class="tab-pane" id="页面内不重复的id-2"><p>内容2</p></div></div></div>

<h5 id="5-思维导图"><a href="#5-思维导图" class="headerlink" title="5. 思维导图"></a>5. 思维导图</h5><div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line"><span class="bullet">-</span> Fengx</span><br><span class="line"><span class="bullet">	-</span> 任何方向</span><br><span class="line"><span class="bullet">		-</span> 编程语言</span><br><span class="line"><span class="bullet">			-</span> Java</span><br><span class="line"><span class="bullet">		-</span> SQL</span><br><span class="line"><span class="bullet">		-</span> Linux</span><br><span class="line"><span class="bullet">		-</span> Git</span><br><span class="line"><span class="bullet">	-</span> 技术</span><br><span class="line"><span class="bullet">		-</span> mycat</span><br><span class="line"><span class="bullet">		-</span> 大数据</span><br><span class="line"><span class="bullet">			-</span> Hadoop</span><br><span class="line"><span class="bullet">			-</span> HBase</span><br><span class="line"><span class="bullet">	-</span> 内功</span><br><span class="line"><span class="bullet">		-</span> 计算机基础</span><br><span class="line"><span class="bullet">			-</span> 计算机网络</span><br><span class="line"><span class="bullet">			-</span> 计算机操作系统</span><br><span class="line"><span class="bullet">			-</span> 编译原理</span><br><span class="line"><span class="bullet">			-</span> 计算机组成原理</span><br><span class="line"><span class="bullet">		-</span> 数据结构与算法</span><br><span class="line"><span class="bullet">	-</span> 其他</span><br><span class="line"><span class="bullet">		-</span> 英语</span><br><span class="line"><span class="bullet">		-</span> 博客</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>展示</p>
</blockquote>
<p>思维导图的使用还有点问题，每次得手动刷新一下，后面再改吧。</p>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Fengx<ul>
<li>任何方向<ul>
<li>编程语言<ul>
<li>Java</li>
</ul>
</li>
<li>SQL</li>
<li>Linux</li>
<li>Git</li>
</ul>
</li>
<li>技术<ul>
<li>mycat</li>
<li>大数据<ul>
<li>Hadoop</li>
<li>HBase</li>
</ul>
</li>
</ul>
</li>
<li>内功<ul>
<li>计算机基础<ul>
<li>计算机网络</li>
<li>计算机操作系统</li>
<li>编译原理</li>
<li>计算机组成原理</li>
</ul>
</li>
<li>数据结构与算法</li>
</ul>
</li>
<li>其他<ul>
<li>英语</li>
<li>博客</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>	</p>
</blockquote>

<h5 id="6-上下标"><a href="#6-上下标" class="headerlink" title="6.上下标"></a>6.上下标</h5><p>hexo里面用markdown语法的上下标显示不出来，于是用html语法。</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">上标：2<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">下标：2<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>上标：2<sup>上标</sup><br>下标：2<sub>下标</sub></p>
<h5 id="7-其余文章配置"><a href="#7-其余文章配置" class="headerlink" title="7. 其余文章配置"></a>7. 其余文章配置</h5><p>在文章头部中加上如下</p>
<div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">sticky: 999 # 首页置顶 数字越大越靠前</span><br><span class="line">thumbnail: &quot;image.png&quot; # 首页缩略图</span><br><span class="line">excerpt: false/&quot;文字&quot; # 首页摘要，false就是关掉，写文字就是摘要</span><br><span class="line">cover: false/&quot;image.png&quot; # 文章页头图 没有的话会沿用首页缩略图;不想要的话，就false;想不一样的就加图片路径</span><br><span class="line">expires: 2023-08-31 23:59:59 # 文章时效性 会显示是否过期</span><br></pre></td></tr></table></figure></div>



<blockquote>
<h4 id="页面模板使用"><a href="#页面模板使用" class="headerlink" title="页面模板使用"></a>页面模板使用</h4></blockquote>
<p>这边的组件是在已经配制好的情况下的使用，详情见 <a class="link"   href="https://redefine-docs.ohevan.com/zh/page_templates" >页面模板文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h5 id="1-相册组件"><a href="#1-相册组件" class="headerlink" title="1. 相册组件"></a>1. <strong>相册组件</strong></h5><p>在Hexo - source - _data - masonry.yml中加图片</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">image:</span> <span class="string">图片URL</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">图片标题</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">描述</span></span><br></pre></td></tr></table></figure></div>

<p>这个图片可以放在我建立的仓库Picture1中，url是<a class="link"   href="https://sabthever.github.io/Pictures1/xxx" >https://sabthever.github.io/Pictures1/xxx<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h5 id="2-Tags和Category组件"><a href="#2-Tags和Category组件" class="headerlink" title="2. Tags和Category组件"></a>2. <strong>Tags和Category组件</strong></h5><p>通过在文章开头加Tags或者Category，提供文章的标签或者分类目录。</p>
<div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客配置域名</span><br><span class="line">date: 2024-12-24 14:08:28</span><br><span class="line">tags: [Hexo,DNS]</span><br><span class="line">categories: [Technology,MyBlog]</span><br><span class="line"><span class="section">excerpt: &quot;主要针对于Hexo+Github。先购买域名，然后从本地hexo和在线域名配置，给自己的博客配置域名&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></div>

<p>其中tags中的标签都是<strong>并列</strong>的，categories中的标签都是<strong>一层层往下</strong>的</p>
<h5 id="3-关于和日志"><a href="#3-关于和日志" class="headerlink" title="3. 关于和日志"></a>3. <strong>关于和日志</strong></h5><p>在Hexo - source - about - index.md 中修改关于，增加我的博客修改日志</p>
<h5 id="4-书签组件"><a href="#4-书签组件" class="headerlink" title="4. 书签组件"></a>4. <strong>书签组件</strong></h5><p>在Hexo - source - _data - bookmarks.yml中加组件</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">category:</span> <span class="string">分类名称</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-folder</span> <span class="comment"># 分类的图标，使用 FontAwesome 图标</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">书签名称</span></span><br><span class="line">        <span class="attr">link:</span> <span class="string">链接地址</span> <span class="comment"># 从 url 改为 link</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">书签描述</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">图标链接</span> <span class="comment"># 从 icon 改为 image，用于显示网站图标</span></span><br></pre></td></tr></table></figure></div>
<h5 id="5-Latex启用"><a href="#5-Latex启用" class="headerlink" title="5. Latex启用"></a>5. <strong>Latex启用</strong></h5><p>在文章头部加入<code>mathjax: true</code>即可启用</p>
<h5 id="6-说说组件"><a href="#6-说说组件" class="headerlink" title="6. 说说组件"></a>6. <strong>说说组件</strong></h5><p>在Hexo - source - _data - essays.yml中加说说，回车要加<code>|</code>才可以</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">- content: 2024年要过去啦</span><br><span class="line">  date: 2024-12-31 19:37:02</span><br><span class="line"></span><br><span class="line">- content: |</span><br><span class="line">    愿大家在12月31日的这一天</span><br><span class="line">    告别过去一年的所有遗憾与不快</span><br><span class="line">  date: 2024-12-31 19:39:44</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4></blockquote>
<p><a class="link"   href="https://redefine-docs.ohevan.com/zh/introduction" >Redefine使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Cloudflare管理网站(配置CDN)</title>
    <url>/2024/12/28/technology/blog/cdn_settings/</url>
    <content><![CDATA[<blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3></blockquote>
<p>　　在博客的建立后，我发现访问我的博客速度是十分缓慢的。毕竟是Github作为Paas提供商，国内有时能连，有时不能连，很不稳定。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/苦恼.webp"
                      alt="苦恼" style="zoom:50%;"
                >

</br>

<p>　　因此，我想给我的博客配置CDN服务。</p>
<p>　　但是！！！</p>
<p>　　作为一个资深的白嫖党，买是不可能买的，这辈子都不可能买的。这时候我就找到了一个叫做<strong>Cloudflare</strong>的网站管理服务提供商，对于个人用户而言，可以免费试用它的部分服务，其中就包括了CDN。</p>
<p>　　这里再强调一下，我的是<strong>Hexo + Github</strong>的架构，不是这个架构的主要也可借鉴一下。</p>
<blockquote>
<h3 id="Cloudflare介绍"><a href="#Cloudflare介绍" class="headerlink" title="Cloudflare介绍"></a>Cloudflare介绍</h3></blockquote>
<p>　　Cloudflare是一家美国的跨国科技企业，总部位于旧金山，在英国伦敦亦设有办事处。Cloudflare以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务。通过基于反向代理的内容分发网络(CDN, Content Delivery Network)、任播(Anycast)技术 、基于nginx+lua架构的Web应用防火墙(WAF, Web Application Firewall) 及分布式域名解析服务(Distributed Domain Name Server)等技术，Cloudflare可以帮助受保护站点抵御包括分布式拒绝服务攻击(DDoS, Distributed Denial of Service)在内的大多数网络攻击，确保该网站长期在线，同时提升网站的性能、访问速度以改善访客体验。</p>
<div style="text-align: right;">-- 摘自<a class="link"   href="https://baike.baidu.com/item/Cloudflare/17359757?fr=ge_ala" >Cloudflare(美国的跨国科技企业) - 百度百科<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></div>

</p>

<p>　　可以看到它的功能是很多的，我主要就用里面的DNS服务、CDN服务，当然一些免费的小组件肯定也是开起来的，不用白不用。</p>
<blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3></blockquote>
<ol>
<li><p>打开<a class="link"   href="https://dash.cloudflare.com/" >Cloudflare<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的Dashboard注册登录；</p>
</li>
<li><p>Home页中新增配置自己的域名，这个域名就是之前购买的域名，只要顶级域名就行了，不用加www这些。在这步之前，需要先购买自己的域名，详情可见<a href="../hexo-domain-settings"><strong>博客配置域名</strong></a>。<br> 当然，其实那篇文章中的DNS配置可以不配了，到Cloudflare中再配置；</p>
</li>
<li><p>选择免费套餐，下一步；</p>
</li>
<li><p>在其中配置DNS，ipv4的一定要配置，ipv6的选择性配置，建议也写上。CName这条一定要，因为要重定向到你的网站，yourcount替换为你自己的用户名。</p>
</li>
</ol>
<table style="margin: 0 auto; text-align: center; width: min-content;">
  <tr>
    <th>Type</th>
    <th>Name</th>
    <th>Content</th>
  </tr>
  <tr>
    <td>CName</td>
    <td>www</td>
    <td>yourcount.github.io</td>
  </tr>
  <tr>
    <td>A</td>
    <td>@</td>
    <td>185.199.108.153</td>
  </tr>
  <tr>
    <td>A</td>
    <td>@</td>
    <td>185.199.109.153</td>
  </tr>
  <tr>
    <td>A</td>
    <td>@</td>
    <td>185.199.110.153</td>
  </tr>
  <tr>
    <td>A</td>
    <td>@</td>
    <td>185.199.111.153</td>
  </tr>
  <tr>
    <td>AAAA</td>
    <td>@</td>
    <td>2606:50c0:8000::153</td>
  </tr>
  <tr>
    <td>AAAA</td>
    <td>@</td>
    <td>2606:50c0:8001::153</td>
  </tr>
  <tr>
    <td>AAAA</td>
    <td>@</td>
    <td>2606:50c0:8002::153</td>
  </tr>
  <tr>
    <td>AAAA</td>
    <td>@</td>
    <td>2606:50c0:8003::153</td>
  </tr>
</table>
</p>

<ol start="5">
<li><p>点击下一步，这时候他会出现如下内容：</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/3.png"
                      alt="出现内容" style="zoom:50%;"
                >

<p> 　　这是要你去你购买域名的服务商那里把DNS改为它的DNS服务，这样子才能提供服务。最下面两个云里的链接就是它的DNS服务器。</p>
</li>
<li><p>修改DNS服务器地址。我这边以我的阿里云为例，登录后，控制台 - 域名 - 域名列表 - 管理 - DNS管理-DNS修改，然后就将其中的DNS服务器替换成刚才的Cloudflare的DNS服务器链接。提交成功后，等待一段时间，短则几分钟，长则24~48小时。</p>
</li>
<li><p>等到相应DNS服务器访问到了你的网站后，刷新页面会有变化</p>
</li>
<li><p>打开speed - optimizaiton，把可以打开的全打开，要么就是能保障你的安全性，要么就能加速，要钱就不要开了，够用了。</p>
</li>
<li><p>在Hexo下的<code>_config.yml</code>中，加上下面的</p>
 <div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">provider:</span> <span class="string">custom</span></span><br><span class="line">    <span class="attr">custom_url:</span> <span class="string">你购买的域名</span></span><br></pre></td></tr></table></figure></div>

<p> 　　记得也要在Hexo的source下面，加一个CNAME文件，里面写你购买的域名就OK，然后部署。</p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source/CNAME</span></span><br><span class="line">www.yourdomain</span><br></pre></td></tr></table></figure></div>
<p> 　　然后保存后，重新部署</p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试：等部署成功后一会，再打开你的Cloudflare，在你相应的你的域名的管理条目下找到<code>Speed-Observatory</code>，输入你的url测试一下，跑通了的话，在通过域名访问一下，就成功了。</p>
</li>
</ol>
<p>　　当然中间很有可能要等一段时间。</p>

  <div class="note p-4 mb-4 rounded-small markdown-body red">
    <p><i class="fa-solid fa-circle-info"></i>  　Cloudflare配置好后CDN服务是默认开启的，不需要去设置，主要只要把DNS服务配好就行。其他的小组件，也可以自己看看，有安全协议，http重定位https，加速流量包，主要看自己 </p>

  </div>

<ul>
<li><p><strong>2025-09-11 cloudflare DNS CNAME通向netlify 由netlify管理静态资源</strong></p>
<p>网站：<a class="link"   href="https://app.netlify.com/" >https://app.netlify.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>根据 Blog：<a class="link"   href="https://blog.csdn.net/q2158798/article/details/149050188" >github pages使用免费CDN加速-netlify<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 做了一个二次挂载。</p>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>博客配置域名</title>
    <url>/2024/12/24/technology/blog/hexo-domain-settings/</url>
    <content><![CDATA[<blockquote>
<h3 id="步骤1：购买域名"><a href="#步骤1：购买域名" class="headerlink" title="步骤1：购买域名"></a>步骤1：购买域名</h3></blockquote>
<p>首先，你需要从域名注册商处购买一个域名（例如：Namecheap、GoDaddy、<a class="link"   href="https://wanwang.aliyun.com/" >阿里云<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>等）。</p>
<blockquote>
<h3 id="步骤2：配置DNS设置"><a href="#步骤2：配置DNS设置" class="headerlink" title="步骤2：配置DNS设置"></a>步骤2：配置DNS设置</h3></blockquote>
<p>这里以阿里云为例，在实名认证等通过后，要配置DNS服务，将购买的域名指向GitHub Pages站点。具体步骤如下。</p>
<ol>
<li><p><strong>登录相应的网站，找到DNS设置</strong>（通常在域名管理或 DNS 管理页面）。</p>
</li>
<li><p><strong>添加 CNAME 记录</strong>：</p>
<ul>
<li><p><strong>类型</strong>: CNAME</p>
</li>
<li><p><strong>主机</strong>: <code>www</code></p>
</li>
<li><p><strong>值</strong>: GitHub Pages 地址（我的就是<code>sabthever.github.io</code>）。</p>
</li>
<li><p><strong>TTL</strong>: 自动或默认值。</p>
</li>
</ul>
</li>
<li><p><strong>添加 A 记录</strong>（可选，用于裸域重定向）：</p>
<ul>
<li><p><strong>类型</strong>: A</p>
</li>
<li><p><strong>主机</strong>: @（表示裸域）</p>
</li>
<li><p><strong>值</strong>: GitHub Pages 的 IP 地址（GitHub 提供了以下四个 IP 地址，你需要添加四条 A 记录）：</p>
<ul>
<li><p>185.199.108.153</p>
</li>
<li><p>185.199.109.153</p>
</li>
<li><p>185.199.110.153</p>
</li>
<li><p>185.199.111.153</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>添加 A 记录</strong>（可选，用于裸域重定向）：</p>
<ul>
<li><p><strong>类型</strong>: AAAA</p>
</li>
<li><p><strong>主机</strong>: @</p>
</li>
<li><p><strong>值</strong>: 2606:50c0:8000::153</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<h3 id="步骤3：配置-GitHub-Pages-的自定义域名"><a href="#步骤3：配置-GitHub-Pages-的自定义域名" class="headerlink" title="步骤3：配置 GitHub Pages 的自定义域名"></a>步骤3：配置 GitHub Pages 的自定义域名</h3></blockquote>
<ol>
<li><p>在你的本地 Hexo 项目目录中，找到<code>source</code>文件夹（如果没有可以创建一个）。</p>
</li>
<li><p>在 <code>source</code> 文件夹中创建一个名为 <code>CNAME</code> 的文件（无扩展名），并在文件中写入你的自定义域名（例如：<code>www.yourdomain.com</code>，注意前面不要加<code>http://</code>或 <code>https://</code>）。</p>
</li>
<li><p>在<code>_config.yml</code>设置<code>url</code>为：<code>https://yourdomain.com/</code></p>
</li>
<li><p>保存文件后，使用 Hexo 生成静态文件并部署到 GitHub：</p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>部署完成后，进入 GitHub 仓库页面，点击仓库的 Settings（设置）。</p>
</li>
<li><p>向下滚动到 GitHub Pages 部分，你会看到一个 Custom domain 字段，里面应该已经自动填入了你刚才在 <code>CNAME</code> 文件中设置的域名。如果没有，手动输入你的自定义域名并保存。</p>
</li>
</ol>
<blockquote>
<h3 id="步骤4：最后"><a href="#步骤4：最后" class="headerlink" title="步骤4：最后"></a>步骤4：最后</h3></blockquote>
<ul>
<li><p>可以在Settings - GitHub Pages设置<code>Enforce HTTPS</code>。这会强制使用HTTPS，提高网站安全性</p>
</li>
<li><p>自己再测试一下是否能够访问成功</p>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>idea多开程序</title>
    <url>/2025/06/03/technology/java/idea%E5%A4%9A%E5%BC%80%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="一-问题"><a href="#一-问题" class="headerlink" title="一. 问题"></a>一. 问题</h1><p>idea运行的时候，有时需要多开一个程序，其中可能遇到一些问题。比如端口需要不一样，不然有可能冲突；比如某一个程序需要一直保持，不需要随着代码改动重新编译。</p>
<h1 id="二-解决方法"><a href="#二-解决方法" class="headerlink" title="二. 解决方法"></a>二. 解决方法</h1><p>本文解决的就是这两个问题，都可以通过右上角执行的程序中修改配置来解决。</p>
<p>找到上面靠右的run左边的配置点击，然后在下拉框中选择<code>edit configuration</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250604095838798.png"
                      alt="image-20250604095838798"
                ></p>
<p>在左侧选择自己想要的进程，也可以按左上的<code>+-</code>来添加和配置更多进程，达到多开的效果。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250604100009087.png"
                      alt="image-20250604100009087" style="zoom:67%;" 
                >

<p>然后可以选择<code>Modify options</code>中的<code>vm option</code>，在新出现的文本框中就可以输入程序运行的临时参数。</p>
<p>针对于上述的两个问题，可以由以下两个参数解决：</p>
<ol>
<li>禁用<code>devtools</code>的代码修改后立刻编译重启：<code>-Dspring.devtools.restart.enabled=false</code></li>
<li>修改该进程端口 <code>-Dserver.port=9093</code></li>
</ol>
<p>如果要使用多个参数，只要各个参数之间用<strong>空格</strong>隔开。<br>现在用的这两个都是<code>-D</code>开头，这个参数就告诉我们后面跟的相当于<code>application.yml</code>中的参数，优先级是高于<code>application.yml</code>中的。</p>
<h1 id="三-拓展"><a href="#三-拓展" class="headerlink" title="三. 拓展"></a>三. 拓展</h1><p>除此以外，<code>vm options</code>中还可以有如下的参数。</p>
<h3 id="1-内存相关参数"><a href="#1-内存相关参数" class="headerlink" title="1. 内存相关参数"></a>1. <strong>内存相关参数</strong></h3><ul>
<li>**<code>-Xms</code>**：设置Java堆的初始大小。<ul>
<li>示例：<code>-Xms512m</code>（初始堆大小为512MB）</li>
</ul>
</li>
<li>**<code>-Xmx</code>**：设置Java堆的最大大小。<ul>
<li>示例：<code>-Xmx2g</code>（最大堆大小为2GB）</li>
</ul>
</li>
<li>**<code>-XX:MaxPermSize=</code>**：设置永久代（PermGen）的最大大小（适用于Java 7及以下版本）。<ul>
<li>示例：<code>-XX:MaxPermSize=256m</code></li>
</ul>
</li>
<li>**<code>-XX:MaxMetaspaceSize=</code>**：设置元空间（Metaspace）的最大大小（适用于Java 8及以上版本）。<ul>
<li>示例：<code>-XX:MaxMetaspaceSize=512m</code></li>
</ul>
</li>
</ul>
<h3 id="2-垃圾回收相关参数"><a href="#2-垃圾回收相关参数" class="headerlink" title="2. 垃圾回收相关参数"></a>2. <strong>垃圾回收相关参数</strong></h3><ul>
<li>**<code>-XX:+UseG1GC</code>**：启用G1垃圾回收器。</li>
<li>**<code>-XX:+UseParallelGC</code>**：启用并行垃圾回收器。</li>
<li>**<code>-XX:+UseConcMarkSweepGC</code>**：启用并发标记-清除垃圾回收器。</li>
<li>**<code>-XX:GCTimeRatio=</code>**：设置垃圾回收时间占总运行时间的比例。<ul>
<li>示例：<code>-XX:GCTimeRatio=19</code>（默认值为99，表示垃圾回收时间占总运行时间的1%）</li>
</ul>
</li>
</ul>
<h3 id="3-性能优化参数"><a href="#3-性能优化参数" class="headerlink" title="3. 性能优化参数"></a>3. <strong>性能优化参数</strong></h3><ul>
<li>**<code>-XX:+AggressiveOpts</code>**：启用激进的性能优化选项。</li>
<li>**<code>-XX:+TieredCompilation</code>**：启用分层编译（默认启用）。</li>
<li>**<code>-XX:CompileThreshold=</code>**：设置方法被编译的调用次数阈值。<ul>
<li>示例：<code>-XX:CompileThreshold=10000</code></li>
</ul>
</li>
</ul>
<h3 id="4-调试相关参数"><a href="#4-调试相关参数" class="headerlink" title="4. 调试相关参数"></a>4. <strong>调试相关参数</strong></h3><ul>
<li>**<code>-Xdebug</code>**：启用调试模式（已废弃，使用<code>-agentlib:jdwp</code>替代）。</li>
<li>**<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=\*:5005</code>**：启用远程调试。<ul>
<li>示例：<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</code>（监听5005端口）</li>
</ul>
</li>
<li>**<code>-XX:+PrintGCDetails</code>**：打印详细的垃圾回收日志。</li>
<li>**<code>-XX:+PrintGCDateStamps</code>**：在垃圾回收日志中打印时间戳。</li>
<li>**<code>-XX:+PrintGCTimeStamps</code>**：在垃圾回收日志中打印时间戳。</li>
<li>**<code>-XX:LogFile=</code>**：设置垃圾回收日志文件路径。<ul>
<li>示例：<code>-XX:LogFile=gc.log</code></li>
</ul>
</li>
</ul>
<h3 id="5-线程相关参数"><a href="#5-线程相关参数" class="headerlink" title="5. 线程相关参数"></a>5. <strong>线程相关参数</strong></h3><ul>
<li>**<code>-Xss</code>**：设置每个线程的栈大小。<ul>
<li>示例：<code>-Xss1m</code>（每个线程的栈大小为1MB）</li>
</ul>
</li>
<li>**<code>-XX:ParallelGCThreads=</code>**：设置并行垃圾回收器的线程数。<ul>
<li>示例：<code>-XX:ParallelGCThreads=4</code></li>
</ul>
</li>
<li>**<code>-XX:ConcGCThreads=</code>**：设置并发垃圾回收器的线程数。<ul>
<li>示例：<code>-XX:ConcGCThreads=2</code></li>
</ul>
</li>
</ul>
<h3 id="6-其他常用参数"><a href="#6-其他常用参数" class="headerlink" title="6. 其他常用参数"></a>6. <strong>其他常用参数</strong></h3><ul>
<li>**<code>-D=</code>**：设置系统属性。<ul>
<li>示例：<code>-Dserver.port=9093</code>（设置Spring Boot的服务器端口号）</li>
</ul>
</li>
<li>**<code>-XX:+HeapDumpOnOutOfMemoryError</code>**：在发生<code>OutOfMemoryError</code>时生成堆转储文件。</li>
<li>**<code>-XX:HeapDumpPath=</code>**：设置堆转储文件的路径。<ul>
<li>示例：<code>-XX:HeapDumpPath=/var/log/heapdump.hprof</code></li>
</ul>
</li>
<li>**<code>-XX:+DisableExplicitGC</code>**：禁用<code>System.gc()</code>的显式调用。</li>
<li>**<code>-XX:+UseStringDeduplication</code>**：启用字符串去重（需要启用G1垃圾回收器）。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%861.jpeg"
                     
                ></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>若依框架的简单使用</title>
    <url>/2025/01/03/technology/java/ruoyi-1/</url>
    <content><![CDATA[<p>　　由于工作需求，后端开发框架都是使用的若依框架，于是自己去学习一下相关的使用。这里我主要使用的是它的前后端分离架构，也就是springboot+vue的架构。</p>
<p>　　有springboot基础的小伙伴们上手起来应该是很快的，主要就是使用中间的一些注解。大部分内容都是直接参考<a class="link"   href="https://doc.ruoyi.vip/" >RuoYi官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>　　<strong>RuoYi-Vue</strong> 是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Spring Security、MyBatis、Jwt、Vue），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源，支持分布式事务。</p>
<h3 id="A-相关链接"><a href="#A-相关链接" class="headerlink" title="A. 相关链接"></a>A. 相关链接</h3><ul>
<li>若依官网：<a class="link"   href="http://ruoyi.vip/" >http://ruoyi.vip(opens new window)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>演示地址：<a class="link"   href="http://vue.ruoyi.vip/" >http://vue.ruoyi.vip(opens new window)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>代码下载：<a class="link"   href="https://gitee.com/y_project/RuoYi-Vue" >https://gitee.com/y_project/RuoYi-Vue<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>文档地址：<a class="link"   href="https://doc.ruoyi.vip/ruoyi-vue/" >https://doc.ruoyi.vip/ruoyi-vue/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<p>具体就得参考上面的文档中的地址，这边只是记录一些我常用的。</p>
<h3 id="B-系统需求"><a href="#B-系统需求" class="headerlink" title="B. 系统需求"></a>B. 系统需求</h3><ul>
<li>JDK &gt;&#x3D; 1.8</li>
<li>MySQL &gt;&#x3D; 5.7</li>
<li>Maven &gt;&#x3D; 3.0</li>
<li>Node &gt;&#x3D; 12</li>
<li>Redis &gt;&#x3D; 3</li>
</ul>
<h3 id="C-特性"><a href="#C-特性" class="headerlink" title="C. 特性"></a>C. 特性</h3><ul>
<li>完全响应式布局（支持电脑、平板、手机等所有主流设备）</li>
<li>强大的一键生成功能（包括控制器、模型、视图、菜单等）</li>
<li>支持多数据源，简单配置即可实现切换。</li>
<li>支持按钮及数据权限，可自定义部门数据权限。</li>
<li>对常用js插件进行二次封装，使js代码变得简洁，更加易维护</li>
<li>完善的XSS防范及脚本过滤，彻底杜绝XSS攻击</li>
<li>Maven多项目依赖，模块及插件分项目，尽量松耦合，方便模块升级、增减模块。</li>
<li>国际化支持，服务端及客户端支持</li>
<li>完善的日志记录体系简单注解即可实现</li>
<li>支持服务监控，数据监控，缓存监控功能</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="A-代码获取"><a href="#A-代码获取" class="headerlink" title="A. 代码获取"></a>A. 代码获取</h3><p>直接使用<code>git clone</code>把相关的代码拉下来</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/y_project/RuoYi-Vue.git</span><br></pre></td></tr></table></figure></div>

<p>也可以使用ssh等方式，<a class="link"   href="https://gitee.com/y_project/RuoYi-Vue" >仓库<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>在这里。</p>
<h3 id="B-本地部署运行"><a href="#B-本地部署运行" class="headerlink" title="B. 本地部署运行"></a>B. 本地部署运行</h3><p>环境自己准备好，记得把Node等等换源，当然，如果只要后端的话Node就不用了。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">JDK &gt;= 1.8 (推荐1.8版本)</span><br><span class="line">Mysql &gt;= 5.7.0 (推荐5.7版本)</span><br><span class="line">Redis &gt;= 3.0</span><br><span class="line">Maven &gt;= 3.0</span><br><span class="line">Node &gt;= 12</span><br></pre></td></tr></table></figure></div>

<h4 id="一-后端部署"><a href="#一-后端部署" class="headerlink" title="(一) 后端部署"></a>(一) 后端部署</h4><ol>
<li><p>导入到<code>Eclipse</code>，菜单 <code>File</code> -&gt; <code>Import</code>，然后选择 <code>Maven</code> -&gt; <code>Existing Maven Projects</code>，点击 <code>Next</code>&gt; 按钮，选择工作目录，然后点击 <code>Finish</code> 按钮，即可成功导入。<br><code>Eclipse</code>会自动加载<code>Maven</code>依赖包，初次加载会比较慢（根据自身网络情况而定）</p>
</li>
<li><p>创建数据库<code>ry-vue</code>并导入数据脚本<code>ry_2021xxxx.sql</code>，<code>quartz.sql</code></p>
</li>
<li><p>在admin-…-resources-application-druid.yml修改master的数据源的相关配置</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">            <span class="comment"># 主库数据源</span></span><br><span class="line">            <span class="attr">master:</span></span><br><span class="line">                <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:port/database?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">                <span class="attr">username:</span> </span><br><span class="line">                <span class="attr">password:</span> </span><br></pre></td></tr></table></figure></div>

<p>也可以在配置文档中修改相关的端口，默认端口是<code>8080</code></p>
</li>
<li><p>打开项目运行<code>com.ruoyi.RuoYiApplication.java</code>，出现如下图表示启动成功。</p>
</li>
</ol>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">(♥◠‿◠)ﾉﾞ  若依启动成功   ლ(´ڡ`ლ)ﾞ  </span><br><span class="line"> .-------.       ____     __        </span><br><span class="line"> |  _ _   \      \   \   /  /    </span><br><span class="line"> | ( &#x27; )  |       \  _. /  &#x27;       </span><br><span class="line"> |(_ o _) /        _( )_ .&#x27;         </span><br><span class="line"> | (_,_).&#x27; __  ___(_ o _)&#x27;          </span><br><span class="line"> |  |\ \  |  ||   |(_,_)&#x27;         </span><br><span class="line"> |  | \ `&#x27;   /|   `-&#x27;  /           </span><br><span class="line"> |  |  \    /  \      /           </span><br><span class="line"> &#x27;&#x27;-&#x27;   `&#x27;-&#x27;    `-..-&#x27;    </span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>想要看到效果，可以通过两种途径，一个是前端的部署，另一个是<code>Swagger+Knife4j</code>自动生成接口文档</li>
</ol>
<p>本段参考：<a class="link"   href="https://doc.ruoyi.vip/ruoyi-vue/document/hjbs.html#%E5%90%8E%E7%AB%AF%E8%BF%90%E8%A1%8C" >RuoYi-Vue环境部署<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="二-前端查看"><a href="#二-前端查看" class="headerlink" title="(二) 前端查看"></a>(二) 前端查看</h4><p>　　进入项目下的或者独立出来的ui文件夹，在文件夹下打开终端。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> ruoyi-ui</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 强烈建议不要用直接使用 cnpm 安装，会有各种诡异的 bug，可以通过重新指定 registry 来解决 npm 安装速度慢的问题。</span></span><br><span class="line">npm install --registry=https://registry.npmmirror.com</span><br><span class="line"><span class="comment"># 本地开发 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>

<p>　　打开浏览器，输入：(<a class="link"   href="http://localhost/" >http://localhost:80<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>) 默认账户&#x2F;密码 <code>admin/admin123</code>）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/ruoyi.png"
                     
                ></p>
<h4 id="三-接口文档查看"><a href="#三-接口文档查看" class="headerlink" title="(三) 接口文档查看"></a>(三) 接口文档查看</h4><p>　　ruoyi在拉下来的时候就已经配置了Swagger组件。</p>
<ul>
<li>多导入一个knife4j包来增强功能</li>
</ul>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- knife4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>用@Api(tags &#x3D; “”)来对Controller进行修饰</p>
<p>用@ApiOperation(value &#x3D; “”)来对类进行修饰</p>
<p>其他修饰参见SpringBoot里面和Swagger相关的@Apixxx</p>
</li>
<li><p>使用 <a href="http://ip:port/doc.html">http://ip:port/doc.html</a> 来看api文档，效果如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250103173354935.png"
                     
                ></p>
</li>
</ul>
<h3 id="C-相关注解和使用"><a href="#C-相关注解和使用" class="headerlink" title="C. 相关注解和使用"></a>C. 相关注解和使用</h3><h4 id="一-注解"><a href="#一-注解" class="headerlink" title="(一) 注解"></a>(一) 注解</h4><h5 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h5><p>　　用于给下面的变量赋值</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;fanruan.publicKey&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String publicKey;</span><br></pre></td></tr></table></figure></div>

<p>　　和直接赋值不同的是，这个值用<code>&quot;$&#123;parameter&#125;&quot;</code>的格式来输入值，可以通过修改application.yml中的参数，方便修改，如下所示</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fanruan:</span></span><br><span class="line">  <span class="attr">publicKey:</span> <span class="string">MIIBIjANBgkqhki</span></span><br></pre></td></tr></table></figure></div>

<p>　　这样子，上面的<code>publicKey</code>中的内容中的<code>$&#123;fanruan.publicKey&#125;</code>会被替换为<code>MIIBIjANBgkqhki</code></p>
<hr>
<h5 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h5><p>　　自动装配，依赖注入</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FeishuService feishuService;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><strong>与</strong>**<code>@Qualifier</code>**<strong>注解配合使用</strong>：</p>
<p>　　当有多个相同类型的Bean时，可以使用<code>@Qualifier</code>注解与<code>@Autowired</code>注解一起使用，以指定注入哪一个具体的Bean。</p>
<p>  　　例如，如果你有一个<code>FeishuService</code>接口和多个实现类，你可能想要指定注入哪一个实现：</p>
  <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;specificFeishuService&quot;)</span></span><br><span class="line"><span class="keyword">private</span> FeishuService feishuService;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>疑问</strong>：和<code>@Resource</code>有哪些区别呢</p>
</li>
</ul>
<p>　　<code>@Autowired</code>和<code>@Resource</code>两个注解都用于实现依赖注入，但它们之间存在几个主要区别：</p>
<ol>
<li><strong>来源不同</strong>：<ol>
<li><code>@Autowired</code>是Spring框架提供的注解，而<code>@Resource</code>来自于Java规范，特别是JSR-250。</li>
</ol>
</li>
<li><strong>依赖查找顺序不同</strong>：<ol>
<li><code>@Autowired</code>默认先按类型（byType）查找，如果存在多个Bean再按名称（byName）查找。</li>
<li><code>@Resource</code>默认先按名称（byName）查找，如果找不到与名称匹配的Bean，则退回到按类型（byType）查找。</li>
</ol>
</li>
<li><strong>支持的参数不同</strong>：<ol>
<li><code>@Autowired</code>只支持设置一个参数<code>required</code>，用于指定依赖是否必须。</li>
<li><code>@Resource</code>支持设置多个参数，如<code>name</code>和<code>type</code>等，提供了更灵活的配置。</li>
</ol>
</li>
<li><strong>依赖注入的用法支持不同</strong>：<ol>
<li><code>@Autowired</code>支持构造方法注入、属性注入和Setter方法注入。</li>
<li><code>@Resource</code>主要支持属性注入和Setter方法注入，通常不用于构造方法注入。</li>
</ol>
</li>
<li><strong>编译器IDEA的提示不同</strong>：<ol>
<li>使用<code>@Autowired</code>时，IDEA可能会出现警告，提示字段注入不被推荐。</li>
<li>使用<code>@Resource</code>时，IDEA通常不会出现类似的警告</li>
</ol>
</li>
</ol>
<hr>
<h5 id="model中的"><a href="#model中的" class="headerlink" title="model中的"></a>model中的</h5><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;首页数据查询请求参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeQueryParam</span> &#123;</span><br><span class="line">    <span class="comment">//  年月</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;202404&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;年月不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String month;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型（单月/累计）</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;单月&quot;,example=&quot;这边是api使用展示值&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;类型不能为空&quot;)</span> <span class="comment">// 会在为空的时候给前端返回</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><strong>@Data</strong>：<ol>
<li>这是Lombok库提供的一个注解，用于自动为类的字段生成getter和setter方法、<code>equals()</code>、<code>hashCode()</code>和<code>toString()</code>方法。这可以减少模板代码的编写，使代码更加简洁。</li>
</ol>
</li>
<li><strong>@ApiModel</strong>：<ol>
<li>这是Swagger库提供的一个注解，用于描述一个模型（即一个POJO类）的信息。在这个例子中，<code>@ApiModel</code>注解的<code>description</code>属性被设置为”首页数据查询请求参数”，这意味着这个类是用来封装发送到首页数据查询接口的请求参数的。</li>
</ol>
</li>
<li><strong>@ApiModelProperty</strong>：<ol>
<li>这也是Swagger库提供的一个注解，用于描述<code>HomeQueryParam</code>类中字段的信息。它可以提供字段的额外信息，比如示例值、描述等，这些信息会在生成的Swagger文档中显示。</li>
</ol>
</li>
<li><strong>@NotBlank</strong>：<ol>
<li>这是一个验证注解，通常与Spring Validation API一起使用，用于确保字段不为空，即字段的值不是<code>null</code>且不是空白字符。如果字段验证失败，会返回<code>message</code>属性指定的错误信息。</li>
</ol>
</li>
</ol>
<p>类中的两个字段：</p>
<ul>
<li><strong>month</strong>：表示年月，使用了<code>@NotBlank</code>注解确保这个字段在请求中必须被提供，且不能是空白字符。<code>@ApiModelProperty</code>注解提供了一个示例值”202404”。</li>
<li><strong>type</strong>：表示类型（单月&#x2F;累计），同样使用了<code>@NotBlank</code>注解确保这个字段在请求中必须被提供，且不能是空白字符。<code>@ApiModelProperty</code>注解提供了一个示例值”单月”。</li>
</ul>
<hr>
<h5 id="mapper中"><a href="#mapper中" class="headerlink" title="mapper中"></a>mapper中</h5><ul>
<li><strong>@Mapper</strong></li>
</ul>
<p>标识为mybatis的mapper接口</p>
<ul>
<li><strong>@DataSource(DataSourceType.<em>PURCHASING</em>)</strong></li>
</ul>
<p>这是若依框架自定义的注解，默认MASTER</p>
<p>其他数据源可以在common-enum-DataSourceType中新增</p>
<p>然后实际配置在admin中的application-druid.yml中</p>
<hr>
<h5 id="controller中"><a href="#controller中" class="headerlink" title="controller中"></a>controller中</h5><ul>
<li><strong>@Api(tags &#x3D; “采购-供应商管理-品类分布”)</strong></li>
</ul>
<p>Swagger中相当于整体的包，一般在Controller的上注解</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Api</span>(tags <span class="operator">=</span> &quot;采购-供应商管理-品类分布&quot;)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(&quot;/purchasing/supplier-manage/category-distribute&quot;)</span><br><span class="line">public class SmCateDistriController &#123;。。。&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>@ApiOperation</strong></li>
</ul>
<p>value为文档中接口名称(一般命名方式都是模块名，用-连接)，notes是接口的描述</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ApiOperation</span>(<span class="keyword">value</span> <span class="operator">=</span> &quot;四大品类分布-品类-数量-占比&quot;, notes <span class="operator">=</span> &quot;传入的参数是date+department，department为空时就返回全部事业部的总值。这个部门或者这个时间没有数据的话就返回空。&quot;)</span><br><span class="line"><span class="variable">@PostMapping</span>(&quot;/cateDistri&quot;)</span><br><span class="line"><span class="variable">@Log</span>(title <span class="operator">=</span> &quot;四大品类分布-品类-数量-占比&quot;, businessType <span class="operator">=</span> BusinessType.SELECT)</span><br><span class="line">public <span class="keyword">Result</span><span class="operator">&lt;</span>CateDistriVo<span class="operator">&gt;</span> selectReplaceRate(<span class="variable">@RequestBody</span> <span class="variable">@Validated</span> SmCatDistriParam param)&#123;</span><br><span class="line">    CateDistriVo cateDistriVo <span class="operator">=</span> smCateDistriService.selectCateDistri(param);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(cateDistriVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>@Log在日志中标志</p>
<ul>
<li>枚举类传递</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiParam(name = &quot;smCatDistriEnum&quot;, value = &quot;切换模块&quot;, required = true)</span></span><br><span class="line"><span class="meta">@RequestParam(&quot;smCatDistriEnum&quot;)</span> <span class="meta">@NotNull(message = &quot;smCatDistriEnum&quot;)</span></span><br><span class="line">SmCatDistriEnum smCatDistriEnum</span><br><span class="line">       </span><br><span class="line">枚举类                                                                </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SmCatDistriEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品类分布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    品类分布(<span class="string">&quot;品类分布&quot;</span>),</span><br><span class="line">    四大品类分布下钻表(<span class="string">&quot;四大品类分布下钻表&quot;</span>),</span><br><span class="line">    品类厂商分布下钻表(<span class="string">&quot;品类厂商分布下钻表&quot;</span>),</span><br><span class="line">    各专业部四大品类分布下钻表(<span class="string">&quot;各专业部四大品类分布下钻表&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    SmCatDistriEnum(String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125; <span class="comment">// 也可以在类上面用@Getter替代</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h4 id="二-Result的使用"><a href="#二-Result的使用" class="headerlink" title="(二) Result的使用"></a>(二) Result的使用</h4><ul>
<li><p>在全限定名：com.cockpit.common.core.domain.Result下</p>
</li>
<li><p>代码</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cockpit.common.core.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liyuqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel( description = &quot;响应结果&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty( value = &quot;响应状态码&quot;, example = &quot;200&quot; )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty( value = &quot;响应消息&quot;, example = &quot;参数不合法&quot; )</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty( value = &quot;响应结果&quot; )</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code  响应状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 响应消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code  响应状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, msg, <span class="literal">null</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功响应对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">( String message, T result )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;( <span class="number">200</span>, message, result );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功响应结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 响应结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    响应结果类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">( T result )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ok( <span class="literal">null</span>, result );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功响应对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ok( <span class="literal">null</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回失败响应对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status  响应状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 响应消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">( <span class="type">int</span> status, String message )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;( status, message );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>需要包</p>
  <div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>这时可用<code>Result.ok(xxx)</code>返回json格式内容</p>
</li>
</ul>
<hr>
<h4 id="三-装载数据源"><a href="#三-装载数据源" class="headerlink" title="(三) 装载数据源"></a>(三) 装载数据源</h4><ol>
<li><p>在admin相应的sping.datasource.druid.xxx下加，如下</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">            <span class="attr">home:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 这个不能少</span></span><br><span class="line">                <span class="attr">url:</span> </span><br><span class="line">                <span class="attr">username:</span> </span><br><span class="line">                <span class="attr">password:</span> </span><br><span class="line">                <span class="attr">driverClassName:</span> </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在common中找到enums,DataSourceType加相应的枚举类的名字</p>
</li>
<li><p>在framework中找到config.DruidConfig，其中要加两处要加</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid.xxx&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.datasource.druid.xxx&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">homeDataSource</span><span class="params">(DruidProperties druidProperties)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    <span class="keyword">return</span> druidProperties.dataSource(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以及在dataSource方法中加一句</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setDataSource(targetDataSources, DataSourceType.XXX.name(), <span class="string">&quot;xxxDataSource&quot;</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>装配完成，使用的时候只要在Mapper接口上加上<code>@DataSource(DataSourceType.XXX)</code>即可</p>
</li>
</ol>
<hr>
<h4 id="四-接口调用"><a href="#四-接口调用" class="headerlink" title="(四) 接口调用"></a>(四) 接口调用</h4><p>　　接口调用前都要获取<code>token</code>，获取<code>token</code>的方式可以找<code>Login</code>接口。在admin模块下找controller中的system有一个类为<code>SysLoginController</code>。可以用接口文档的注解方式给它注解，运行后我们能看到如下的接口。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250103194830561.png"
                      style="zoom: 70%;" 
                >

</br>

<p>　　进入调试中，请求头部<code>Authorization</code>是不需要的，请求参数中有如下</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>　　在此之前可以进入Login函数的server层把验证码验证给去了，code那边放的就是验证码。</p>
<p>　　然后默认账号<code>admin</code>，默认密码<code>admin123</code>。提交后获得token，放进其他接口的<code>Authorization</code>即可访问其他接口。</p>
<h4 id="五-参数传递"><a href="#五-参数传递" class="headerlink" title="(五) 参数传递"></a>(五) 参数传递</h4><p>　　后端接口主要有两种参数接收的方式，</p>
<ol>
<li><p><strong>用类封装</strong></p>
<p>这种方式，前端用Json格式传递到后端，后端可以用类来接收数据，如：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;Test1&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/Test1&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;Test1&quot;, businessType = BusinessType.SELECT)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAttributeSupplierInfo</span><span class="params">(<span class="meta">@ApiParam(value = &quot;请求参数&quot;)</span> <span class="meta">@RequestBody</span> AttributeSupplierParam param)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Result.ok(supplierAreaService.getAttributeSupplierInfo(param));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>AttributeSupplierParam内部如下</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;Test1传参&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttributeSupplierParam</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;部门&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;年月&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String month;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;省份&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; province;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那么前端传递过来的参数为json，形如</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;department&quot;</span><span class="punctuation">:</span><span class="string">&quot;具体部门名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;month&quot;</span><span class="punctuation">:</span><span class="string">&quot;具体年月&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;省份1&quot;</span><span class="punctuation">,</span><span class="string">&quot;省份2&quot;</span><span class="punctuation">,</span><span class="string">&quot;省份3&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>直接传递</strong></p>
<p>这种方式，前端用<code>application/x-www-form-urlencoded</code>传递到后端，后端可以用类来接收数据，如：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;Test2&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/Test2&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;Test2&quot;, businessType = BusinessType.SELECT)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;AreaTabListVo&gt; <span class="title function_">selectAreaTabList</span><span class="params">(<span class="meta">@ApiParam(name = &quot;name&quot;, value = &quot;张三&quot;, required = false, example = &quot;张三&quot;)</span></span></span><br><span class="line"><span class="params">                                                         <span class="meta">@RequestParam(value = &quot;name&quot;, required = false)</span> String name)</span> &#123;</span><br><span class="line">    <span class="type">AreaTabListVo</span> <span class="variable">areaTabListVo</span> <span class="operator">=</span> supplierAreaService.selectAreaTabList(name);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(areaTabListVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在使用<code>get</code>时，能够直接从url获取相应值，在<code>post</code>时，能够从请求体中获取相应的数据。</p>
</li>
</ol>
<h1 id="代码工具"><a href="#代码工具" class="headerlink" title="代码工具"></a>代码工具</h1><h2 id="1-JsonUtils"><a href="#1-JsonUtils" class="headerlink" title="1.JsonUtils"></a>1.JsonUtils</h2><blockquote>
<p>若依框架自己封装了相关的Json工具，可以自由转换</p>
</blockquote>
<ul>
<li><p>包来源</p>
<p><code>com.cockpit.common.utils.json.JsonUtils</code></p>
</li>
<li><p>可使用工具</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JsonUtils.toList(groupLevelString, String.class); <span class="comment">// string转List&lt;String&gt;</span></span><br><span class="line">JsonUtils.toJsonString(parm.getDataSourceList()); <span class="comment">// List&lt;String&gt;转string</span></span><br><span class="line"><span class="comment">// 还有toMap toJsonNode等等方法</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="2-SecurityUtils"><a href="#2-SecurityUtils" class="headerlink" title="2.SecurityUtils"></a>2.SecurityUtils</h2><p>系统用户信息</p>
<blockquote>
<ul>
<li>若依框架中的<code>SecurityUtils</code>是一个用于简化用户身份验证和权限管理的工具类，尤其在前后端分离版本中扮演了核心角色。</li>
<li><strong>获取当前用户信息</strong>：<code>SecurityUtils</code>提供静态方法直接获取当前登录用户的基本信息（如用户名、用户ID等），无需手动解析安全上下文。例如，<code>SecurityUtils.getUsername()</code>可直接返回当前会话的用户</li>
<li><strong>权限验证</strong>：结合Shiro或Spring Security框架，<code>SecurityUtils</code>可快速验证用户是否具备特定角色或权限，例如通过<code>hasRole()</code>方法判断用户角色</li>
</ul>
</blockquote>
<ul>
<li><p>该类主要是通过用户登录后的token去访问Redis，获取预先存放在Redis中的数据。</p>
</li>
<li><p>包来源</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">com.cockpit.common.utils.SecurityUtils;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可使用工具</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">SecurityUtils.getAuthentication(); <span class="comment">// 得到用户信心</span></span><br><span class="line">SecurityUtils.getLoginUser(); <span class="comment">// 得到当前用户完整的用户信息</span></span><br><span class="line"><span class="comment">// SecurityUtils.getLoginUser()相当于SecurityUtils.getAuthentication().getPrincipal();</span></span><br><span class="line">SecurityUtils.getDeptId();</span><br><span class="line">SecurityUtils.etUsername();</span><br><span class="line">SecurityUtils.getUserId();</span><br></pre></td></tr></table></figure></div>

<p>roleIds获取</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> SecurityUtils.getLoginUser();</span><br><span class="line"><span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> loginUser.getUser();</span><br><span class="line">Set&lt;Long&gt; roleIds = user.getRoles().stream().map(SysRole::getRoleId).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="3-Mybatis-plus"><a href="#3-Mybatis-plus" class="headerlink" title="3.Mybatis-plus"></a>3.Mybatis-plus</h2><p>　　<code>mybatis-plus</code>主要针对于单表的CRUD操作。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询字段</span></span><br><span class="line">QueryWrapper&lt;EmpInfoEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">wrapper.isNotNull(<span class="string">&quot;post_sequence&quot;</span>).groupBy(<span class="string">&quot;post_sequence&quot;</span>)</span><br><span class="line">    .select(<span class="string">&quot;post_sequence&quot;</span>).orderByAsc(<span class="string">&quot;post_sequence&quot;</span>);</span><br><span class="line">List&lt;Object&gt; postSequences = empInfoMapper.selectObjs(wrapper);</span><br><span class="line"></span><br><span class="line">postBasicInfoMapper</span><br><span class="line">    .selectList(Wrappers</span><br><span class="line">                .lambdaQuery(AdsRaPostBasicInfoDfEntity.class)</span><br><span class="line">                .eq(AdsRaPostBasicInfoDfEntity::getPostSequence, entity.getPostSequence())</span><br><span class="line">               );</span><br></pre></td></tr></table></figure></div>
<p>还可以<code>selectOne</code>、<code>selectById</code>等</p>
<ul>
<li><p>在此之前需要在mapper层继承<code>BaseMapper&lt;T&gt;</code>，其中的T是你数据库映射的类</p>
</li>
<li><p>数据库映射类，需要做表和字段的映射，举例</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value =&quot;t_emp_info&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpInfoEntity</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键自增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="meta">@TableField(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工号（唯一）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;emp_no&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String empNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="4-分页工具"><a href="#4-分页工具" class="headerlink" title="4.分页工具"></a>4.分页工具</h2><p>　　分页有两种方式，一种是数据库分页，一种是读到内存来分页。</p>
<h3 id="4-1-数据存放类Page"><a href="#4-1-数据存放类Page" class="headerlink" title="4.1.数据存放类Page"></a>4.1.数据存放类<code>Page</code></h3><p>　　首先我先说一种存放分页数据的类，是mybatis-plus自带的一个专门存放分页数据的类<code>Page</code>，是<code>IPage</code>的实现类。</p>
<p>　　包括了如下的变量</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Page</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">IPage</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8545996863226528798L</span>;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;T&gt; records;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> total;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> size;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> current;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;OrderItem&gt; orders;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> optimizeCountSql;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> searchCount;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> optimizeJoinOfCountSql;</span><br><span class="line">    <span class="keyword">protected</span> String countId;</span><br><span class="line">    <span class="keyword">protected</span> Long maxLimit;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">IPage中还有个pages</span><br></pre></td></tr></table></figure></div>

<p>　　其中<code>records</code>就是存放数据的地方，<code>total</code>是数据总数，size是页面大小，<code>pages</code>是总页数，<code>current</code>是当前页。</p>
<h3 id="4-2-参数类PageDomain"><a href="#4-2-参数类PageDomain" class="headerlink" title="4.2.参数类PageDomain"></a>4.2.参数类<code>PageDomain</code></h3><blockquote>
<p>该类是若依管理的一个类，用于传入分页相关参数</p>
</blockquote>
<ul>
<li><p>包来源</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">com.cockpit.common.core.page.PageDomain</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>变量</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDomain</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/** 当前记录起始索引 */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 每页显示记录数 */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;分页大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 排序列 */</span></span><br><span class="line">    <span class="keyword">private</span> String orderByColumn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 排序的方向desc或者asc */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">isAsc</span> <span class="operator">=</span> <span class="string">&quot;asc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 分页参数合理化 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">reasonable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们可以在自己的参数类上<strong>继承这个类</strong>：</p>
<p><code>public class MyParam extends PageDomain</code></p>
</li>
</ul>
<h3 id="4-3-分页"><a href="#4-3-分页" class="headerlink" title="4.3.分页"></a>4.3.分页</h3><blockquote>
<p>前面提到有两种分页方式。数据库自带的分页，是用的自带的分页工具<code>PageHelper</code>;内存中分页是用的若依的类<code>PageUtils</code>，但是这个类功能不够强大，在这边加了一个类用于分页。</p>
</blockquote>
<h4 id="A-PageHelper"><a href="#A-PageHelper" class="headerlink" title="A.PageHelper"></a>A.<code>PageHelper</code></h4><p>sysRoles读出来就是已经分好页的</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(param.getPageNum(), param.getPageSize());</span><br><span class="line">List&lt;SysRole&gt; sysRoles = permissionConfigMapper.selectRoleAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取分页信息</span></span><br><span class="line">PageInfo&lt;SysRole&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(sysRoles);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取总记录数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageInfo.getTotal();</span><br><span class="line"><span class="type">int</span> <span class="variable">totalPages</span> <span class="operator">=</span> pageInfo.getPages();</span><br><span class="line">Page&lt;RoleListResult&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(param.getPageNum(), param.getPageSize());</span><br><span class="line">page.setTotal(total);</span><br><span class="line">page.setRecords(roleListResults);</span><br><span class="line">page.setPages(totalPages);</span><br></pre></td></tr></table></figure></div>

<h4 id="B-PageUtils"><a href="#B-PageUtils" class="headerlink" title="B. PageUtils"></a>B. <code>PageUtils</code></h4><p>　　加上自己在内存中分页的方法</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getPaginatedList</span><span class="params">(List&lt;T&gt; list, <span class="type">int</span> pageNumber, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">totalItems</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> (pageNumber - <span class="number">1</span>) * pageSize;</span><br><span class="line">    <span class="comment">// 处理越界情况</span></span><br><span class="line">    <span class="keyword">if</span> (startIndex &gt;= totalItems || pageNumber &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> Math.min(startIndex + pageSize, totalItems);</span><br><span class="line">    <span class="keyword">return</span> list.subList(startIndex, endIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;RoleListResult&gt; data = PageUtils.getPaginatedList(roleListResults, param.getPageNum(), param.getPageSize());</span><br><span class="line"></span><br><span class="line">Page&lt;RoleListResult&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(param.getPageNum(), param.getPageSize());</span><br><span class="line"><span class="comment">// 序号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">indexTemp</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(RoleListResult single: data)&#123;</span><br><span class="line">    single.setIndex((param.getPageNum()-<span class="number">1</span>)*param.getPageSize()+indexTemp++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">page.setTotal(roleListResults.size());</span><br><span class="line">page.setRecords(data);</span><br><span class="line">page.setPages(roleListResults.size()/param.getPageSize());</span><br></pre></td></tr></table></figure></div>

<h2 id="5-BaseException"><a href="#5-BaseException" class="headerlink" title="5.BaseException"></a>5.<code>BaseException</code></h2><blockquote>
<p>若依框架用Result.ok()输出结果时，有个msg，有的时候有错误，判断参数等等的时候没有data，只要返回500的msg可以用该方法抛出</p>
</blockquote>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(<span class="string">&quot;ssssss&quot;</span>);</span><br><span class="line"><span class="comment">// 抛出的ssssss会在Json的msg中显示</span></span><br></pre></td></tr></table></figure></div>

<h2 id="6-手动切换数据源"><a href="#6-手动切换数据源" class="headerlink" title="6.手动切换数据源"></a>6.手动切换数据源</h2><blockquote>
<p>不推荐使用，一般还是用若依自带的<code>@DataSource(DataSourceType.Master)</code>这样的方式</p>
</blockquote>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">DynamicDataSourceContextHolder.setDataSourceType(DataSourceType.SLAVE.name());</span><br></pre></td></tr></table></figure></div>

<p>　　利用上下文对于当前线程的数据源进行手动切换。</p>
<h1 id="结束点"><a href="#结束点" class="headerlink" title="结束点"></a>结束点</h1><p>　　若依框架中还有更多功能，比如自动代码生成，权限分配等等，这些可以自己<a class="link"   href="https://doc.ruoyi.vip/ruoyi-vue/" >参考文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>若依</tag>
      </tags>
  </entry>
  <entry>
    <title>下钻表导出为Excel</title>
    <url>/2025/01/08/technology/java/%E4%B8%8B%E9%92%BB%E8%A1%A8%E5%AF%BC%E5%87%BA%E4%B8%BAExcel/</url>
    <content><![CDATA[<p>这两天要搞Excel的生成接口，然后把下钻表导出为Excel。于是我自定义了一个工具类，里面包含了两个方法，其中一个是能够单元格合并的，一个是不合并的。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　这两天要搞Excel的生成接口，然后把下钻表导出为Excel。</p>
<p>　　为了能够复用，我自定义了一个工具类。所用技术点包括Excel操作，Web编程，Java反射，使用反射也是为了提高代码的复用性。工具类中包含了两个方法，其中一个是能够单元格合并的，一个是不合并的。</p>
<p>　　不合并的是这样的：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th>Name</th>
    <th>Age</th>
    <th>Quantity</th>
    <th>Product</th>
  </tr>
  <tr>
    <td>王五</td>
    <td>35</td>
    <td>10</td>
    <td>手机</td>
  </tr>
  <tr>
    <td>王五</td>
    <td>35</td>
    <td>5</td>
    <td>电脑</td>
  </tr>
  <tr>
    <td>王五</td>
    <td>35</td>
    <td>15</td>
    <td>平板</td>
  </tr>
  <tr>
    <td>周八</td>
    <td>31</td>
    <td>8</td>
    <td>耳机</td>
  </tr>
</table>

</br>

<p>　　合并的话转化为这种格式：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th>Name</th>
    <th>Age</th>
    <th>Quantity</th>
    <th>Product</th>
  </tr>
  <tr>
    <td rowspan="3">王五</td> <!-- 合并三行 -->
    <td rowspan="3">35</td> <!-- 合并三行 -->
    <td>10</td>
    <td>手机</td>
  </tr>
  <tr>
    <td>5</td>
    <td>电脑</td>
  </tr>
  <tr>
    <td>15</td>
    <td>平板</td>
  </tr>
  <tr>
    <td>周八</td>
    <td>31</td>
    <td>8</td>
    <td>耳机</td>
  </tr>
</table>

</br>

<h2 id="Java操作Excel"><a href="#Java操作Excel" class="headerlink" title="Java操作Excel"></a>Java操作Excel</h2><p>　　首先要知道Excel如何用Java方法进行操作，先介绍一些简单的方法。</p>
<h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>　　Java操作Excel可以用两种方式，一种是Apache POI、JExcelAPI、EasyExcel等。这里我们使用的即为Apache POI，导入相关包，具体版本可以在<a class="link"   href="https://mvnrepository.com/" >Maven<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>上查询。</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导出excel工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><ul>
<li><p>创建Excel工作簿</p>
<p><code>XSSFWorkbook()</code>相当于新建一个<code>.xlsx</code>格式的Excel实例</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建工作表</p>
<p>一个工作簿实例可以包含多个工作表</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建名为Sheet1的工作表，sheet为实例对象</span></span><br><span class="line"><span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Sheet1&quot;</span>); </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建行</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为0，则在第1行创建。数字为i，则在第i+1行创建</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取某行</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(rowIndex);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>单元格操作</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在row这行创建第i+1列的单元格</span></span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(i);</span><br><span class="line"><span class="comment">// 填充单元格数据</span></span><br><span class="line">cell.setCellValue(String text);</span><br><span class="line"><span class="comment">// 获取某个单元格</span></span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(colIndex);</span><br><span class="line"><span class="comment">// 获取某个单元格数据(字符串类型)</span></span><br><span class="line">cell.getStringCellValue();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>单元格合并</p>
<p>单元格合并首先要有一个单元格范围的实例对象，传入后才可以合并。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取单元格范围</span></span><br><span class="line"><span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(startRow, endRow, startCol, endCol);</span><br><span class="line"><span class="comment">// 合并单元格</span></span><br><span class="line">sheet.addMergedRegion(cellRangeAddress);</span><br></pre></td></tr></table></figure></div>

<p><code>startRow</code>：表示要合并的单元格范围的起始行，包含该行。<br><code>endRow</code>：表示要合并的单元格范围的结束行，包含该行。<br><code>startCol</code>：表示要合并的单元格范围的起始列，包含该列。<br><code>endCol</code>：表示要合并的单元格范围的结束列，包含该列。<br>注意：都从0开始</p>
</li>
<li><p>设置单元格格式&#x2F;设置行格式</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">sheet.autoSizeColumn(i);	<span class="comment">//设置某列宽度为自动</span></span><br><span class="line">sheet.getColumnWidth(i);	<span class="comment">// 获取某列宽度</span></span><br><span class="line"></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line"><span class="type">CellStyle</span> <span class="variable">dataStyle</span> <span class="operator">=</span> workbook.createCellStyle(); <span class="comment">// 建立一个单元格格式</span></span><br><span class="line">dataStyle.setAlignment(HorizontalAlignment.CENTER);  <span class="comment">// 水平居中</span></span><br><span class="line">dataStyle.setVerticalAlignment(VerticalAlignment.CENTER); <span class="comment">// 垂直居中</span></span><br><span class="line"><span class="comment">// 其他自己查查去</span></span><br><span class="line">cell.setCellStyle(dataStyle); <span class="comment">// 某个单元格设置如上的格式</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="传输方法"><a href="#传输方法" class="headerlink" title="传输方法"></a>传输方法</h2><p>　　利用HTTP响应，向客户端发送数据，相当于是网络编程。使用的是<code>HttpServletResponse response</code>，我们所构建传输的过程，就是构建一个http的数据包，所以相应的响应头是需要设置的。</p>
<p>　　另外，传输数据是用的字节流<code>OutputStream</code>，作为数据流。</p>
<p>　　在此代码中，用到的相关代码如下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"> <span class="comment">// 设置响应头</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);	<span class="comment">// 传输的数据类型是.xlsx</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=data.xlsx&quot;</span>);	<span class="comment">// 传输的文件名为data.xlsx</span></span><br><span class="line">workbook.write(outputStream);	<span class="comment">// 将workbook中的数据</span></span><br></pre></td></tr></table></figure></div>

<h2 id="类属性反射"><a href="#类属性反射" class="headerlink" title="类属性反射"></a>类属性反射</h2><p>　　为了代码的重用性，在方法中传递了一个<code>Map&lt;String,String&gt;</code>作为表头和类属性的映射。具体k,y是<code>&lt;表头字段,类属性名&gt;</code>。</p>
<p>　　然后取出了属性名后，要用反射来取相关的值，如下所示。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取属性名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> mapping.get(headings.get(j));</span><br><span class="line"><span class="type">T</span> <span class="variable">item</span> <span class="operator">=</span> data.get(i);	</span><br><span class="line"><span class="comment">// 根据属性名获取相关的属性，注意这边获取属性要用Declared，否则无法取值</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> item.getClass().getDeclaredField(fieldName);</span><br><span class="line"><span class="comment">// 设置Field对象可访问</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 获取item对象的相关属性</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(item);</span><br></pre></td></tr></table></figure></div>

<p>　　上面的<code>data.get(i)</code>是从<code>List data</code>中获取index为i的数据。反射语句主要就是<code>Field field = item.getClass().getDeclaredField(fieldName);</code>这一句</p>
<h2 id="完整的程序"><a href="#完整的程序" class="headerlink" title="完整的程序"></a>完整的程序</h2><ul>
<li><p>需要引入的包</p>
<p>我这边导入apache的POI作为表格操作包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导出excel工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>代码</p>
<ul>
<li><p><code>setStyle</code>方法是格式的设置，<code>execute</code>方法是带合并的，<code>executeWithoutMerge</code>是不带合并的。</p>
</li>
<li><p>两个方法中的mapping都是表头对于类属性的映射关系，<code>response</code>是需要，合并中要多传一个<code>limit</code>，就是前多少列是需要合并的。</p>
</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cockpit.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 数据导出为excel的工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Pan Tianyu 00414384</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/1/6 14:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportExcelCommon</span> &#123;</span><br><span class="line">    <span class="comment">// 创建表头单元格样式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CellStyle headerStyle;</span><br><span class="line">    <span class="comment">// 创建数据行单元格样式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CellStyle dataStyle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置表格式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setStyle</span><span class="params">(Workbook workbook)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建表头单元格样式</span></span><br><span class="line">        headerStyle = workbook.createCellStyle();</span><br><span class="line">        headerStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        headerStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        headerStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());</span><br><span class="line">        headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        <span class="type">Font</span> <span class="variable">headerFont</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">        headerFont.setBold(<span class="literal">false</span>);</span><br><span class="line">        headerFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">10</span>);</span><br><span class="line">        headerStyle.setFont(headerFont);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建数据行单元格样式</span></span><br><span class="line">        dataStyle = workbook.createCellStyle();</span><br><span class="line">        dataStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        dataStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 返回excel的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 传List类型数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headings 传表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapping 传类表头和字段的映射关系 &lt;表头,字段&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 合并几列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 一行数据的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(HttpServletResponse response, List&lt;T&gt; data, List&lt;String&gt; headings, Map&lt;String, String&gt; mapping, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line">            setStyle(workbook);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建表头行</span></span><br><span class="line">            <span class="type">Row</span> <span class="variable">headerRow</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> headerRow.createCell(i);</span><br><span class="line">                cell.setCellStyle(headerStyle);</span><br><span class="line">                cell.setCellValue(headings.get(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 填充数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">                <span class="type">T</span> <span class="variable">item</span> <span class="operator">=</span> data.get(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; headings.size(); j++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> mapping.get(headings.get(j));</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(j);</span><br><span class="line">                    cell.setCellStyle(dataStyle);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> item.getClass().getDeclaredField(fieldName);</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(item);</span><br><span class="line">                        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                            cell.setCellValue(value.toString());</span><br><span class="line">                            cell.setCellStyle(dataStyle);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并单元格逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (limit &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; limit; col++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">startRow</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (startRow &lt; data.size() + <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">endRow</span> <span class="operator">=</span> startRow + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span> (endRow &lt; data.size() + <span class="number">1</span> &amp;&amp;</span><br><span class="line">                                isEqual(sheet, startRow, endRow, col, limit)) &#123;</span><br><span class="line">                            endRow++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (endRow - startRow &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(startRow, endRow - <span class="number">1</span>, col, col);</span><br><span class="line">                            sheet.addMergedRegion(cellRangeAddress);</span><br><span class="line">                        &#125;</span><br><span class="line">                        startRow = endRow;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                sheet.autoSizeColumn(i);</span><br><span class="line">                <span class="type">int</span> <span class="variable">autoSizedWidth</span> <span class="operator">=</span> sheet.getColumnWidth(i);</span><br><span class="line">                sheet.setColumnWidth(i, autoSizedWidth + <span class="number">600</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置响应头</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=data.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(Sheet sheet, <span class="type">int</span> startRow, <span class="type">int</span> endRow, <span class="type">int</span> col, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">startValue</span> <span class="operator">=</span> getCellValue(sheet, startRow, i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">endValue</span> <span class="operator">=</span> getCellValue(sheet, endRow, i);</span><br><span class="line">            <span class="keyword">if</span> (!startValue.equals(endValue)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getCellValue</span><span class="params">(Sheet sheet, <span class="type">int</span> rowIndex, <span class="type">int</span> colIndex)</span> &#123;</span><br><span class="line">        <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(rowIndex);</span><br><span class="line">        <span class="keyword">if</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(colIndex);</span><br><span class="line">            <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> cell.getStringCellValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行导出 Excel 操作，不进行单元格合并</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 传 List 类型数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headings 传表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapping 传类表头和字段的映射关系 &lt;表头,字段&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否生成成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 一行数据的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">executeWithoutMerge</span><span class="params">(HttpServletResponse response, List&lt;T&gt; data, List&lt;String&gt; headings, Map&lt;String, String&gt; mapping)</span> &#123;</span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            workbook = <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Data Sheet&quot;</span>);</span><br><span class="line">            setStyle(workbook);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建表头行</span></span><br><span class="line">            <span class="type">Row</span> <span class="variable">headerRow</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> headerRow.createCell(i);</span><br><span class="line">                cell.setCellStyle(headerStyle);</span><br><span class="line">                cell.setCellValue(headings.get(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 缓存 Field 对象，避免多次反射</span></span><br><span class="line">            Field[] fields = <span class="keyword">new</span> <span class="title class_">Field</span>[headings.size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> mapping.get(headings.get(i));</span><br><span class="line">                fields[i] = data.get(<span class="number">0</span>).getClass().getDeclaredField(fieldName);</span><br><span class="line">                fields[i].setAccessible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (T item : data) &#123;</span><br><span class="line">                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(rowIndex);</span><br><span class="line">                <span class="type">int</span> <span class="variable">cellIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(cellIndex);</span><br><span class="line">                    cell.setCellStyle(dataStyle);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(item);</span><br><span class="line">                    <span class="keyword">if</span> (value!= <span class="literal">null</span>) &#123;</span><br><span class="line">                        cell.setCellValue(value.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    cellIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">                rowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                sheet.autoSizeColumn(i);</span><br><span class="line">                <span class="type">int</span> <span class="variable">autoSizedWidth</span> <span class="operator">=</span> sheet.getColumnWidth(i);</span><br><span class="line">                sheet.setColumnWidth(i, autoSizedWidth + <span class="number">600</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置响应头，指定内容类型和文件名称</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=data.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取输出流</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">            workbook.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 设置响应状态码为 500 并发送错误信息</span></span><br><span class="line">                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;Error generating Excel: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (workbook!= <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    workbook.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>实际调用写接口如下</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;Test&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/selectFourDistribution&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;Test&quot;, businessType = BusinessType.EXPORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectFourDistribution</span><span class="params">(HttpServletResponse response,<span class="meta">@RequestBody</span> TestParam param)</span>&#123;</span><br><span class="line">    List&lt;FourDistributionResult&gt; data = testService.selectTest(param).getTestList(); <span class="comment">// 自己的service出的List</span></span><br><span class="line">    List&lt;String&gt; headings = Arrays.asList(<span class="string">&quot;序号&quot;</span>,<span class="string">&quot;供应商名称&quot;</span>,<span class="string">&quot;代码&quot;</span>);</span><br><span class="line">    LinkedHashMap&lt;String, String&gt; mapping = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    mapping.put(<span class="string">&quot;序号&quot;</span>,<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    mapping.put(<span class="string">&quot;供应商名称&quot;</span>,<span class="string">&quot;supplierName&quot;</span>);</span><br><span class="line">    mapping.put(<span class="string">&quot;代码&quot;</span>,<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    ExportExcelCommon.executeWithoutMerge(response, data, headings, mapping);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>　　这个合并的方法execute其实还有很大的不足之处。我这边的合并的情况，只考虑了一级合并，没有考虑多级合并。</p>
<p>　　拿二级合并举个例子，如果原来是这样的：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">李四</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">李四</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
</table>
</br>

<p>　　那么<code>limit</code>为3的二级合并就是这样的：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
  </tr>
  <tr>
    <td rowspan="2" style="white-space: nowrap;">1</td>
    <td rowspan="2" style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
  <tr>
    <td rowspan="3" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">李四</td>
    <td rowspan="2" style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
</table>
</br>

<p>　　当时为了节省时间并没有做成像这样的。现在做出来了，但是没有转化为springboot里面能够直接传给前端的方法，而是本地生成xlsx的方法，有兴趣可以自己转一下，代码如下。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportExcelCommon</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行导出 Excel 操作，支持多级合并</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 传 List 类型数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headings 传表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapping 传类表头和字段的映射关系 &lt;表头, 字段&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 导出文件的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 最多合并到第几列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 一行数据的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否生成成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">executeMultMerge</span><span class="params">(List&lt;T&gt; data, List&lt;String&gt; headings, Map&lt;String, String&gt; mapping, String path, <span class="type">int</span> limit)</span>&#123;</span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Data Sheet&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建表头行</span></span><br><span class="line">        <span class="type">Row</span> <span class="variable">headerRow</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">            <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> headerRow.createCell(i);</span><br><span class="line">            cell.setCellValue(headings.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 存储每个单元格的合并起始行和结束行，初始化为当前行</span></span><br><span class="line">            <span class="type">int</span>[][] mergeRanges = <span class="keyword">new</span> <span class="title class_">int</span>[headings.size()][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                mergeRanges[i][<span class="number">0</span>] = rowIndex;</span><br><span class="line">                mergeRanges[i][<span class="number">1</span>] = rowIndex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">T</span> <span class="variable">prevItem</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (T item : data) &#123;</span><br><span class="line">                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(rowIndex);</span><br><span class="line">                <span class="type">int</span> <span class="variable">cellIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">merge</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (String heading : headings) &#123;</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(cellIndex);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> mapping.get(heading);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> item.getClass().getDeclaredField(fieldName);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(item);</span><br><span class="line">                    <span class="keyword">if</span> (value!= <span class="literal">null</span>) &#123;</span><br><span class="line">                        cell.setCellValue(value.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 检查是否需要合并，从第一列开始，直到 limit 列</span></span><br><span class="line">                    <span class="keyword">if</span> (cellIndex &lt; limit) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (prevItem!= <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">prevField</span> <span class="operator">=</span> prevItem.getClass().getDeclaredField(fieldName);</span><br><span class="line">                            prevField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">prevValue</span> <span class="operator">=</span> prevField.get(prevItem);</span><br><span class="line">                            <span class="keyword">if</span> (prevValue == <span class="literal">null</span> ||!prevValue.equals(value)) &#123;</span><br><span class="line">                                merge = <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (merge) &#123;</span><br><span class="line">                            <span class="comment">// 更新合并范围</span></span><br><span class="line">                            mergeRanges[cellIndex][<span class="number">1</span>] = rowIndex;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 合并之前标记的范围</span></span><br><span class="line">                            <span class="keyword">if</span> (mergeRanges[cellIndex][<span class="number">1</span>] &gt; mergeRanges[cellIndex][<span class="number">0</span>]) &#123;</span><br><span class="line">                                <span class="type">CellRangeAddress</span> <span class="variable">newRange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(mergeRanges[cellIndex][<span class="number">0</span>], mergeRanges[cellIndex][<span class="number">1</span>], cellIndex, cellIndex);</span><br><span class="line">                                sheet.addMergedRegion(newRange);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 开始新的合并范围</span></span><br><span class="line">                            mergeRanges[cellIndex][<span class="number">0</span>] = rowIndex;</span><br><span class="line">                            mergeRanges[cellIndex][<span class="number">1</span>] = rowIndex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cellIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">                prevItem = item;</span><br><span class="line">                rowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理最后一组的合并</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mergeRanges[i][<span class="number">1</span>] &gt; mergeRanges[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="type">CellRangeAddress</span> <span class="variable">newRange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(mergeRanges[i][<span class="number">0</span>], mergeRanges[i][<span class="number">1</span>], i, i);</span><br><span class="line">                    sheet.addMergedRegion(newRange);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path)) &#123;</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　具体举例调用：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Order&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">2</span>, <span class="string">&quot;包子&quot;</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">1</span>, <span class="string">&quot;馒头&quot;</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">2</span>, <span class="string">&quot;包子&quot;</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">2</span>, <span class="string">&quot;包子&quot;</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">2</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">2</span>, <span class="string">&quot;馒头&quot;</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; headings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        headings.add(<span class="string">&quot;组号&quot;</span>);</span><br><span class="line">        headings.add(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        headings.add(<span class="string">&quot;数量&quot;</span>);</span><br><span class="line">        headings.add(<span class="string">&quot;商品&quot;</span>);</span><br><span class="line">        HashMap&lt;String, String&gt; mapping = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        mapping.put(<span class="string">&quot;组号&quot;</span>,<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        mapping.put(<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        mapping.put(<span class="string">&quot;数量&quot;</span>,<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        mapping.put(<span class="string">&quot;商品&quot;</span>,<span class="string">&quot;goodName&quot;</span>);</span><br><span class="line">        System.out.println(ExportExcelCommon.executeMultMerge(data,headings,mapping,<span class="string">&quot;outputMultMerge.xlsx&quot;</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这种情况就会有如下表格：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
  </tr>
  <tr>
    <td rowspan="2" style="white-space: nowrap;">1</td>
    <td rowspan="2" style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
  <tr>
    <td rowspan="3" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">李四</td>
    <td rowspan="2" style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
</table>
</br>

<p>　　如果把<code>limit</code>设置为4的话，就会变成下面的情况：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
    <th style="white-space: nowrap;"></th>
  </tr>
  <tr>
    <td rowspan="2" style="white-space: nowrap;">1</td>
    <td rowspan="2" style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
    <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
    <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td rowspan="3" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">李四</td>
    <td rowspan="2" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">包子</td>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
    <td style="white-space: nowrap;"></td>
  </tr>
</table>
</br>

<p>　　当然这边李四是占了两行的，这边使用html展示的，所以不好展示，我在最后多加了一列来凸显李四是占了两行的。</p>
<p>　　有兴趣的话，大家可以自己研究一下。</p>
<p>　　OK啦，拜拜！！</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>接口</tag>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot多数据源事务</title>
    <url>/2025/09/09/technology/java/springboot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>Springboot编写业务过程中经常要做数据源的切换，但是事务本身是按照单个数据库为单位去做事务管理的，就需要有屏蔽他们不同性的一个应用级的事务管理。</p>
<p>具体业务场景是在一个方法中，有如下报错：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">org.springframework.jdbc.UncategorizedSQLException: </span><br><span class="line"><span class="comment">### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: current transaction is aborted, commands ignored until end of transaction block   springboot 事务</span></span><br></pre></td></tr></table></figure></div>

<p>我报错的地方是一个<code>mysql</code>数据源的<code>mapper</code>接口，但是报错却是报的<code>psql</code>错误，但是我看显示的切换也切换成功了，但是实际上会发现里面的<code>Transactional</code>管理出现了问题。</p>
<p>我到若依<code>gitee</code>官方论坛上找相应的问题，找到了这样一个讨论：</p>
<p><a class="link"   href="https://gitee.com/y_project/RuoYi/issues/I3R7AH#note_8239683" >https://gitee.com/y_project/RuoYi/issues/I3R7AH#note_8239683<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>里面就讲到需要用<code>Atomikos</code>来增强<code>@Transactional</code>功能，使之能够管理多数据源，做一个应用层的管理。若依的文档上也有相应的描述：</p>
<p><a class="link"   href="https://doc.ruoyi.vip/ruoyi/document/cjjc.html#%E9%9B%86%E6%88%90atomikos%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1" >https://doc.ruoyi.vip/ruoyi/document/cjjc.html#%E9%9B%86%E6%88%90atomikos%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>我们只要在<code>framework</code>模块的<code>pom.xml</code>添加<code>atomikos</code>依赖就能解决这个问题。</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>好了，问题解决了，拜拜！！</p>
<p>However！</p>
<p>我后来又发现出问题了，具体调用长这样：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleManually</span><span class="params">()</span> &#123;</span><br><span class="line">    updatePermissionArea();</span><br><span class="line">    updatePermissionUnit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;0 0 0 * * ?&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePermissionArea</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; areaList = permissionListMapper.getPermissionArea();</span><br><span class="line">    <span class="type">String</span> <span class="variable">areaStr</span> <span class="operator">=</span> JSON.toJSONString(areaList);</span><br><span class="line">    log.info(<span class="string">&quot;updatePermissionArea areaStr: &#123;&#125;&quot;</span>, areaStr);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> permissionListMapper.updatePermissionArea(areaStr);</span><br><span class="line">    log.info(<span class="string">&quot;updatePermissionArea num: &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;0 0 0 * * ?&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePermissionUnit</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; unitList = permissionListMapper.getPermissionUnit();</span><br><span class="line">    <span class="type">String</span> <span class="variable">unitStr</span> <span class="operator">=</span> JSON.toJSONString(unitList);</span><br><span class="line">    log.info(<span class="string">&quot;updatePermissionUnit unitStr: &#123;&#125;&quot;</span>, unitStr);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> permissionListMapper.updatePermissionUnit(unitStr);</span><br><span class="line">    log.info(<span class="string">&quot;updatePermissionUnit num: &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我有两个定时任务要执行，这些都要做数据源的切换，然后还留了一个手动执行的接口，在<code>service</code>层直接调用两个方法，我寻思着上面加上@Transactional应该没问题的，毕竟我单个方法都屏蔽了。</p>
<p>关键就是出问题了，我在<code>scheduleManually()</code>上加了注解它就是出问题了，但是把这个注解去掉，下面两个注解还在就不会出问题，也就是说在这边<code>@Transactional</code>无法做一个套用，所以要是确实</p>
<p><strong>另外：</strong></p>
<p>在我使用idea多开程序时会有一个报错：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Log already <span class="keyword">in</span> use? tmlog <span class="keyword">in</span> D:\projectFile\idea\dmd-java-cockpit-share-compass\transaction-logs\</span><br></pre></td></tr></table></figure></div>

<p>这是引入<code>atomikos</code>执行后，在相应的事务日志文件中会加上锁，所以想多开的话可以在<code>vm-option</code>中加入如下改变新的事务日志。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">-Dspring.jta.atomikos.properties.log-base-dir=D:/项目路径/service1-tmlogs/</span><br></pre></td></tr></table></figure></div>

<p>然后就能启动了，关于多开的内容可以看<a class="link"   href="https://www.sabthever.cn/2025/06/03/technology/java/idea%E5%A4%9A%E5%BC%80%E7%A8%8B%E5%BA%8F/" >idea多开程序<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>利用注解实现AOP</title>
    <url>/2025/01/20/technology/java/%E5%88%A9%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0AOP/</url>
    <content><![CDATA[<p>　　AOP（面向切面编程）。AOP是一种编程范式，旨在通过预编译和运行期动态代理来增强方法，而注解在AOP中主要用于定义切面（Aspect）、切入点（Pointcut）和通知（Advice）。</p>
<p>　　注解提供了一种在代码中添加元数据的方式，使得开发者可以更方便地定义这些切面、切入点和通知，从而在不改变原有业务逻辑代码的情况下，实现功能增强‌<a href="https://blog.csdn.net/jwentao01/article/details/106728239"><sup>[1]</sup></a></p>
<h1 id="AOP的基本概念-1"><a href="#AOP的基本概念-1" class="headerlink" title="AOP的基本概念[1]"></a>AOP的基本概念<a href="https://blog.csdn.net/jwentao01/article/details/106728239"><sup>[1]</sup></a></h1><ul>
<li>‌<strong>切面（Aspect）</strong>‌：通常是一个类，里面可以定义切入点和通知。</li>
<li>‌<strong>切入点（Pointcut）</strong>‌：带有通知的连接点，定义了通知应用的场景。</li>
<li>‌<strong>通知（Advice）</strong>‌：在特定的切入点上执行的增强处理，包括前置、返回后、异常处理等类型。</li>
<li>‌<strong>连接点（JointPoint）</strong>‌：程序执行过程中的明确点，通常是方法的调用。</li>
<li>‌<strong>目标对象（Target Object）</strong>‌：包含连接点的对象，也被称作被通知或被代理对象。</li>
<li>‌<strong>织入（Weave）</strong>‌：将切面应用到目标对象并导致代理对象创建的过程。</li>
<li>‌<strong>引入（Introduction）</strong>‌：在不修改代码的前提下，为类动态地添加一些方法或字</li>
</ul>
<h1 id="注解的使用-2"><a href="#注解的使用-2" class="headerlink" title="注解的使用[2]"></a>注解的使用<a href="https://blog.csdn.net/kkkkatoq/article/details/137520509"><sup>[2]</sup></a></h1><h2 id="一、-interface-关键字"><a href="#一、-interface-关键字" class="headerlink" title="一、@interface 关键字"></a>一、@interface 关键字</h2><p>我们想定义一个自己的注解 需要使用 @interface 关键字来定义。<br>如定义一个叫 MyAnnotation 的注解：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123; &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二、元注解"><a href="#二、元注解" class="headerlink" title="二、元注解"></a>二、元注解</h2><p>  光加上 <code>@interface</code> 关键字 还不够，我们还需要了解5大元注解</p>
<ul>
<li><code>@Retention</code></li>
<li><code>@Target</code></li>
<li><code>@Documented</code></li>
<li><code>@Inherited（JDK8 引入）</code></li>
<li><code>@Repeatable（JDK8 引入）</code></li>
</ul>
<p><strong>1）@Retention 指定注解的生命周期</strong> </p>
<p>   <code>@Retention(RetentionPolicy.SOURCE)</code></p>
<p>其中<code>Retention</code>是一个枚举类:</p>
<ol>
<li><code>RetentionPolicy.SOURCE</code> : 注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃(.java文件)</li>
<li><code>RetentionPolicy.CLASS</code> :注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期(.class文件)</li>
<li><code>RetentionPolicy.RUNTIME</code>: 注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在(内存中的字节码)</li>
</ol>
<p><strong>2）@Target指定注解可以修饰的元素类型</strong></p>
<p><code>@Target(ElementType.Field)</code></p>
<ol>
<li><code>ElementType.ANNOTATION_TYPE</code> - 标记的注解可以应用于注解类型。</li>
<li><code>ElementType.CONSTRUCTOR</code> - 标记的注解可以应用于构造函数。</li>
<li><code>ElementType.FIELD</code> - 标记的注解可以应用于字段或属性。</li>
<li><code>ElementType.LOCAL_VARIABLE</code> - 标记的注解可以应用于局部变量。</li>
<li><code>ElementType.METHOD</code> - 标记的注解可以应用于方法。</li>
<li><code>ElementType.PACKAGE</code> - 标记的注解可以应用于包声明。</li>
<li><code>ElementType.PARAMETER</code> - 标记的注解可以应用于方法的参数。</li>
<li><code>ElementType.TYPE</code> - 标记的注解可以应用于类的任何元素。</li>
</ol>
<p> <strong>3）@Documented</strong></p>
<p>指定注解会被JavaDoc工具提取成文档。默认情况下，JavaDoc是不包括文档的</p>
<p> <strong>4）@Inherited</strong><br>表示该注解会被子类继承，注意，仅针对类，成员属性、方法并不受此注释的影响。</p>
<p> <strong>5）@Repeatable</strong><br>表示注解可以重复使用，为了解决同一个注解不能重复在同一类&#x2F;方法&#x2F;属性上使用的问题。</p>
<p>其中最常用的就是 <strong>@Retention</strong> 跟 <strong>@Target</strong>。</p>
<h2 id="三、切面注解"><a href="#三、切面注解" class="headerlink" title="三、切面注解"></a>三、切面注解</h2><p>在SpringBoot项目的pom文件中，引入 spring-boot-starter-aop依赖。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>原文链接：<a class="link"   href="https://blog.csdn.net/shaopengjie2/article/details/136174655" >https://blog.csdn.net/shaopengjie2/article/details/136174655<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>简单说一下各个注解代表什么含义：</p>
<ul>
<li>**@Aspect:**作用是把当前类标识为一个切面供容器读取 ，也就是加上这个注解，spring才知道你这是一个切面类，用于处理切点的逻辑的。</li>
<li><strong>@Pointcut</strong>:切入点，@Pointcut切点表达式非常丰富，可以将 方法(method)、类(class)、接口(interface)、包(package) 等作为切入点，非常灵活，常用的有@annotation、@within、execution等方式，上面的示例使用的是@annotation方式，意思就是说被Spring扫描到方法上带有@annotation中的注解 就会执行切面通知。</li>
<li><strong>@Before：</strong>该注解标注的方法在业务模块代码执行之前执行，其不能阻止业务模块的执行，除非抛出异常；</li>
<li><strong>@AfterReturning：</strong>该注解标注的方法在业务模块代码执行之后执行；</li>
<li><strong>@AfterThrowing：</strong>该注解标注的方法在业务模块抛出指定异常后执行；</li>
<li><strong>@After：</strong>该注解标注的方法在所有的 Advice 执行完成后执行，无论业务模块是否抛出异常，类似于 finally 的作用；</li>
<li><strong>@Around：</strong>该注解功能最为强大，其所标注的方法用于编写包裹业务模块执行的代码，通知的第一个参数必须是 ProceedingJoinPoint 类型。在通知体内，调用 ProceedingJoinPoint 的 proceed () 方法使得连接点方法执行如果不调用 proceed () 方法，连接点方法则不会执行。无论是调用前逻辑还是调用后逻辑，都可以在该方法中编写，甚至其可以根据一定的条件而阻断业务模块的调用；      如果切面中使用了@Around 注解，如果不调用 ProceedingJoinPoint 的 proceed () 方法的话，那么 @Before  和 @After 直接标注的方法也不会被触发。@Around 注解标注的方法，在 ProceedingJoinPoint 的 proceed () 方法 前的逻辑是比@Before的逻辑还要靠前， 在proceed () 方法之后的逻辑比 @After 的逻辑还要靠后。</li>
<li><strong>Joint Point：</strong>JointPoint是程序运行过程中可识别的点，这个点可以用来作为AOP切入点。JointPoint对象则包含了和切入相关的很多信息。比如切入点的对象，方法，属性等。我们可以通过反射的方式获取这些点的状态和信息，用于追踪tracing和记录logging应用信息。</li>
</ul>
<h2 id="四、切入点表达式"><a href="#四、切入点表达式" class="headerlink" title="四、切入点表达式"></a>四、切入点表达式</h2><p>　这个我也还没搞明白，先拿下来。</p>
<p>​    我们定义切点除了使用 @Pointcut() 之外，我们还有丰富的切点表达式可以定义切点。</p>
<p>​    <strong>1）切点表达式简介</strong> </p>
<p>　<strong>2）通配符合与逻辑运算符</strong></p>
<p> @AspectJ 支持三种通配符：</p>
<p>逻辑运算符： 切点表达式由切点函数组成，切点函数之间还可以进行逻辑运算，组成复合切点。</p>
<p>   <strong>3）切点表达式：</strong></p>
<ol>
<li><p><strong>arg()</strong> :匹配切入点方法的参数类型，匹配的上才是切点。<br>  <strong>语法：args(param-pattern)</strong>   param-pattern：参数类型的全路径。<br>  注意：要先匹配到某些类，不然会报错，也就是不能单独用<br>  <strong>示例：</strong></p>
 <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;args(java.lang.String)&quot;)</span>  <span class="comment">//这样就是错的，不能单独使用要匹配到某些类</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@Pointcut(&quot;within(com.example.demo.service.impl.UserServiceImpl) &amp;&amp; args(java.lang.String,java.lang.String)&quot;)</span> <span class="comment">//要像这样使用 within 先匹配到某个具体的类，在使用args匹配到某个类型参数的方法</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>@args：</strong>匹配切入点方法上的参数的类上，参数的类必须要有指定的注解<br>      语法：@args(annotation-type)   annotation-type：注解类型的全路径<br>      注意：也不能单独使用，必须先指定到类，而且匹配参数个数至少有一个且为第一个参数的类含有该注解才能匹配的上<br>      示例：<br><code>@Pointcut(&quot;within(com.demo.RedisTest) &amp;&amp; @args(com.demo.aaa.annotation.MyAnnotation)&quot;)</code></p>
</li>
<li><p>**within:**匹配切入点的指定类的任意方法，不能匹配接口。<br>     语法：within(declaring-type)   参数为全路径的类名（可使用通配符），表示匹配当前表达式的所有类都将被当前方法环绕<br>     注意： 这个是指定到具体的类<br>     示例：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//within表达式的粒度为类，其参数为全路径的类名（可使用通配符），表示匹配当前表达式的所有类都将被当前方法环绕。如下是within表达式的语法：</span></span><br><span class="line"><span class="meta">@Pointcut(within(declaring-type-pattern))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//within表达式只能指定到类级别，如下示例表示匹配com.spring.service.BusinessObject中的所有方法：</span></span><br><span class="line"><span class="meta">@Pointcut(within(com.spring.service.BusinessObject))</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">//within表达式路径和类名都可以使用通配符进行匹配，比如如下表达式将匹配com.spring.service包下的所有类，不包括子包中的类：</span></span><br><span class="line"><span class="meta">@Pointcut(within(com.spring.service.*))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//如下表达式表示匹配com.spring.service包及子包下的所有类：</span></span><br><span class="line"><span class="meta">@Pointcut(within(com.spring.service..*))</span></span><br></pre></td></tr></table></figure></div>

</li>
<li><p>**<code>@within:</code>**表示匹配带有指定注解的类。<br> <strong>语法：@within(annotation-type)</strong>  注解的全类名<br> <strong>注意：</strong>这个是指定到带有某个注解的类<br> <strong>示例：</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如下所示示例表示匹配使用com.spring.annotation.BusinessAspect注解标注的类：</span></span><br><span class="line"><span class="meta">@within(com.spring.annotation.BusinessAspect)</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>**@annotation() :**匹配带有指定注解的连接点<br>     语法：@annotation(annotation-type)  annotation-type：注解类型的全路径<br>     示例：<br><code>@Pointcut(&quot;@annotation(com.test.annotations.LogAuto)&quot;)</code></p>
</li>
<li><p><strong>execution()</strong> 用于匹配是连接点的执行方法,Spring 切面粒度最小是达到方法级别，而 execution 表达式可以用于明确指定方法返回类型，类名，方法名和参数名等与方法相关的配置，所以是使用最广泛的。<br>    <strong>用法：</strong></p>
<ul>
<li>modifiers-pattern：方法的可见性修饰符，如 public，protected，private；</li>
<li>ret-type-pattern：方法的返回值类型，如 int，void 等；</li>
<li>declaring-type-pattern：方法所在类的全路径名，如 com.spring.Aspect；</li>
<li>name-pattern：方法名，如 getOrderDetail()；</li>
<li>param-pattern：方法的参数类型，如 java.lang.String；</li>
<li>throws-pattern：方法抛出的异常类型，如 java.lang.Exception；</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">modifiers-pattern：方法的可见性修饰符，如 <span class="keyword">public</span>，<span class="keyword">protected</span>，<span class="keyword">private</span>；</span><br><span class="line">ret-type-pattern：方法的返回值类型，如 <span class="type">int</span>，<span class="keyword">void</span> 等；</span><br><span class="line">declaring-type-pattern：方法所在类的全路径名，如 com.spring.Aspect；</span><br><span class="line">name-pattern：方法名，如 getOrderDetail()；</span><br><span class="line">param-pattern：方法的参数类型，如 java.lang.String；</span><br><span class="line"><span class="keyword">throws</span>-pattern：方法抛出的异常类型，如 java.lang.Exception；</span><br><span class="line">示例：</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配目标类的所有 public 方法，第一个 * 代表返回类型，第二个 * 代表方法名，..代表方法的参数</span></span><br><span class="line">execution(<span class="keyword">public</span> * *(..))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配目标类所有以 User 为后缀的方法。第一个 * 代表返回类型，*User 代表以 User 为后缀的方法</span></span><br><span class="line">execution(* *User(..))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 User 类里的所有方法</span></span><br><span class="line">execution(* com.test.demo.User.*(..))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 User 类及其子类的所有方法</span></span><br><span class="line">execution(* com.test.demo.User+.*(..)) :</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 com.test 包下的所有类的所有方法</span></span><br><span class="line">execution(* com.test.*.*(..))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 com.test 包下及其子孙包下所有类的所有方法</span></span><br><span class="line">execution(* com.test..*.*(..)) :</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 getOrderDetail 方法，且第一个参数类型是 Long，第二个参数类型是 String</span></span><br><span class="line">execution(* getOrderDetail(Long, String))</span><br></pre></td></tr></table></figure></div>



<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><p>　　该样例主要是给方法的参数赋值，里面有值传递和地址传递的问题，还关系到增加String字符，地址的改变。</p>
<ul>
<li><p>Controller调用</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/annotation&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AnnotationTest</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; stringStringHashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> testService.AnnotationTest(<span class="string">&quot;wrong&quot;</span>,stringStringHashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Service层中的方法</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AnnotationTest</span><span class="params">(String text, Map&lt;String,String&gt; mmp)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@MyAnnotation(message = &quot;bbb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AnnotationTest</span><span class="params">(String text, Map&lt;String,String&gt; mmp)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(String key : mmp.keySet()) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + mmp.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;output: &quot;</span>+text;</span><br><span class="line">        System.out.println(info);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>注解类</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>注解方法实现（Before）</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotationAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(myAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint, MyAnnotation myAnnotation)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> myAnnotation.message();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arg <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                arg = message;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arg <span class="keyword">instanceof</span> Map)&#123;</span><br><span class="line">                Map&lt;String, String&gt; paramMap = (Map&lt;String, String&gt;) arg;</span><br><span class="line">                paramMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">                paramMap.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这个方法中，是将被注解的方法中<code>String</code>类型提出，赋值为<code>message</code>，但是这边是无法成功的，原因是这边的<code>message</code>获取了<code>String</code>类型的数据后，我给<code>arg</code>进行赋值是没有用的，因为<code>Service</code>中的那个<code>String</code>类型的地址是不会改变的，而我修改<code>String</code>的时候<code>Aspect</code>中的地址会发生改变。<code>Map</code>能成功是因为它是个对象，是直接进行操作的。</p>
<p>　　调用一次接口，在输出终端中输出为：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">key1:value1</span><br><span class="line">key2:value2</span><br><span class="line">output: wrong</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>注解方法实现(Around)</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotationAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(myAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint, MyAnnotation myAnnotation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> myAnnotation.message();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        args[<span class="number">0</span>] = message;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这种方法的<code>String</code>类型修改成功，用<code>proceed</code>方法执行原方法，并且传入修改后的参数<code>args</code>。</p>
<p>　　调用一次接口，在输出终端中输出为：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">output: bbb</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%862.jpeg"
                     
                ></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[1] <a class="link"   href="https://blog.csdn.net/jwentao01/article/details/106728239" >【Spring】AOP理解<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p>
<p>[2]  <a class="link"   href="https://blog.csdn.net/kkkkatoq/article/details/137520509" >Java 实现自定义注解<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：若依框架使用MyBatis-Plus中的baseMapper的方法报错Invalid bound statement (not found):</title>
    <url>/2025/07/02/technology/java/%E8%8B%A5%E4%BE%9DMyBatis-Plus%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p><strong>报错信息如下：</strong></p>
<blockquote>
<p>Invalid bound statement (not found): com.ruoyi.system.mapper.hc.HcOrderMapper.selectList </p>
</blockquote>
<p><strong>原因:</strong><br>若依框架本身就使用了mybatis，因此在配置类中有个mybatisConfig，里面是创建了SqlSessionFactoryBean 这个bean，这个bean它仅支持原生 MyBatis，而不能使用 MyBatis-Plus 的功能。因此，BaseMapper 中的 CRUD 方法（如 selectById、insert 等）无法正常工作，因为这些是 MyBatis-Plus 提供的增强功能，只有 MybatisSqlSessionFactoryBean 才能识别和处理这些功能。</p>
<p>因此我们要使用能够支持MybatisPlus的bean，也就是MybatisSqlSessionFactoryBean ，这个bean能够使用MybatisPlus的增强功能，而且<strong>只做增强，不做侵入</strong>！</p>
<p>因此不用担心原有的mybatis功能无法使用</p>
<p>解决方案如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/21795f9f5a7b496c93ecc407e05511ae.png"
                     
                ></p>
<p><strong>代码如下：</strong></p>
<pre><code>    MybatisSqlSessionFactoryBean sessionFactory = new MybatisSqlSessionFactoryBean();
</code></pre>
<p>————————————————<br>版权声明：本文为CSDN博主「泰山小张只吃荷园」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a class="link"   href="https://blog.csdn.net/csdn3043663729/article/details/146454994" >https://blog.csdn.net/csdn3043663729/article/details/146454994<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>若依</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>若依框架免token访问</title>
    <url>/2025/06/03/technology/java/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E5%85%8Dtoken%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>在<a class="link"   href="https://www.sabthever.cn/2025/01/03/technology/java/ruoyi-1/#2-SecurityUtils" >若依框架的简单使用<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>中，已经简单介绍了一下<code>SecurityUtils</code>这个类的作用，并且简单的阐述了一下其中方法的使用。</p>
<p>近段时间有个项目要求没有任何登录就能够访问，而若依框架本身对于每一个接口都会进行token的判断，以此来获取当前用户信息以及是否有权限访问。这个切片的控制实际上由<code>Security</code>机制来控制的。</p>
<p>这个中间的token判断、ip判断、权限判断等等，都可以在<code>SecurityConfig</code>的<code>configure</code>方法中来配置，这个方法原型如下。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * anyRequest          |   匹配所有请求路径</span></span><br><span class="line"><span class="comment"> * access              |   SpringEl表达式结果为true时可以访问</span></span><br><span class="line"><span class="comment"> * anonymous           |   匿名可以访问</span></span><br><span class="line"><span class="comment"> * denyAll             |   用户不能访问</span></span><br><span class="line"><span class="comment"> * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）</span></span><br><span class="line"><span class="comment"> * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问</span></span><br><span class="line"><span class="comment"> * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问</span></span><br><span class="line"><span class="comment"> * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问</span></span><br><span class="line"><span class="comment"> * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问</span></span><br><span class="line"><span class="comment"> * hasRole             |   如果有参数，参数表示角色，则其角色可以访问</span></span><br><span class="line"><span class="comment"> * permitAll           |   用户可以任意访问</span></span><br><span class="line"><span class="comment"> * rememberMe          |   允许通过remember-me登录的用户访问</span></span><br><span class="line"><span class="comment"> * authenticated       |   用户登录后可访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 注解标记允许匿名访问的url</span></span><br><span class="line">    ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.<span class="type">ExpressionInterceptUrlRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> httpSecurity.authorizeRequests();</span><br><span class="line">    permitAllUrl.getUrls().forEach(url -&gt; registry.antMatchers(url).permitAll());</span><br><span class="line"></span><br><span class="line">    httpSecurity</span><br><span class="line">        <span class="comment">// CSRF禁用，因为不使用session</span></span><br><span class="line">        .csrf().disable()</span><br><span class="line">        <span class="comment">// 禁用HTTP响应标头</span></span><br><span class="line">        .headers().cacheControl().disable().and()</span><br><span class="line">        <span class="comment">// 认证失败处理类</span></span><br><span class="line">        .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()</span><br><span class="line">        <span class="comment">// 基于token，所以不需要session</span></span><br><span class="line">        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">        <span class="comment">// 过滤请求</span></span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">// 对于登录login 注册register 验证码captchaImage 允许匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/register&quot;</span>, <span class="string">&quot;/captchaImage&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 静态资源，可匿名访问</span></span><br><span class="line">        .antMatchers(HttpMethod.GET, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;/*.html&quot;</span>, <span class="string">&quot;/**/*.html&quot;</span>, <span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/profile/**&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/swagger-ui.html&quot;</span>, <span class="string">&quot;/swagger-resources/**&quot;</span>, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;/*/api-docs&quot;</span>, <span class="string">&quot;/druid/**&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .headers().frameOptions().disable();</span><br><span class="line">    <span class="comment">// 添加Logout filter</span></span><br><span class="line">    httpSecurity.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">    <span class="comment">// 添加JWT filter</span></span><br><span class="line">    httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    <span class="comment">// 添加CORS filter</span></span><br><span class="line">    httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);</span><br><span class="line">    httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到其中有很多配置选项，具体可以自己查看一下。</p>
<p>我们如果不需要token就能够对接口进行直接的访问，根据上面的内容，我们可以把configure改成如下。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">        <span class="comment">// 禁用CSRF保护</span></span><br><span class="line">        .csrf().disable()</span><br><span class="line">        <span class="comment">// 不需要session</span></span><br><span class="line">        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">        <span class="comment">// 对所有请求允许访问</span></span><br><span class="line">        .authorizeRequests().anyRequest().permitAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其他的一些配置要求，也可以一起来看一下。</p>
<blockquote>
<h2 id="HttpSecurity-配置方法详解"><a href="#HttpSecurity-配置方法详解" class="headerlink" title="HttpSecurity 配置方法详解"></a>HttpSecurity 配置方法详解</h2><p>在使用 Spring Security 时，<code>HttpSecurity</code> 是一个核心类，用于配置基于 HTTP 请求的安全策略。通过 <code>HttpSecurity</code>，我们可以灵活地定义哪些请求需要进行身份验证、哪些请求需要特定的角色或权限，以及如何处理各种安全相关的细节。</p>
<h3 id="常见配置方法"><a href="#常见配置方法" class="headerlink" title="常见配置方法"></a>常见配置方法</h3><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;http.authorizeRequests()</span><br><span class="line"> .antMatchers(<span class="string">&quot;/public/**&quot;</span>).permitAll()</span><br><span class="line">.antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line"> .anyRequest().authenticated();</span><br></pre></td></tr></table></figure></div>
<h4 id="anyRequest"><a href="#anyRequest" class="headerlink" title="anyRequest"></a>anyRequest</h4><ul>
<li><p><strong>描述</strong>：匹配所有请求路径。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.anyRequest().authenticated()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：如果没有其他更具体的匹配规则，所有请求都将应用此规则。</p>
</li>
</ul>
<h4 id="access"><a href="#access" class="headerlink" title="access"></a>access</h4><ul>
<li><p><strong>描述</strong>：SpringEl 表达式结果为 <code>true</code> 时可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;) or hasRole(&#x27;USER&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：可以使用复杂的 SpringEl 表达式来定义访问规则。</p>
</li>
</ul>
<h4 id="anonymous"><a href="#anonymous" class="headerlink" title="anonymous"></a>anonymous</h4><ul>
<li><p><strong>描述</strong>：匿名可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/guest/**&quot;</span>).anonymous()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：允许未登录的用户访问指定路径。</p>
</li>
</ul>
<h4 id="denyAll"><a href="#denyAll" class="headerlink" title="denyAll"></a>denyAll</h4><ul>
<li><p><strong>描述</strong>：用户不能访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/secure/**&quot;</span>).denyAll()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：完全禁止访问指定路径。</p>
</li>
</ul>
<h4 id="fullyAuthenticated"><a href="#fullyAuthenticated" class="headerlink" title="fullyAuthenticated"></a>fullyAuthenticated</h4><ul>
<li><p><strong>描述</strong>：用户完全认证可以访问（非 remember-me 下自动登录）。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/admin/**&quot;</span>).fullyAuthenticated()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：只有通过完整认证的用户（非 remember-me 登录）可以访问。</p>
</li>
</ul>
<h4 id="hasAnyAuthority"><a href="#hasAnyAuthority" class="headerlink" title="hasAnyAuthority"></a>hasAnyAuthority</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示权限，则其中任何一个权限可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).hasAnyAuthority(<span class="string">&quot;ROLE_ADMIN&quot;</span>, <span class="string">&quot;ROLE_USER&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户拥有任何一个指定权限即可访问。</p>
</li>
</ul>
<h4 id="hasAnyRole"><a href="#hasAnyRole" class="headerlink" title="hasAnyRole"></a>hasAnyRole</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示角色，则其中任何一个角色可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).hasAnyRole(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户拥有任何一个指定角色即可访问。</p>
</li>
</ul>
<h4 id="hasAuthority"><a href="#hasAuthority" class="headerlink" title="hasAuthority"></a>hasAuthority</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示权限，则其权限可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/admin/**&quot;</span>).hasAuthority(<span class="string">&quot;ROLE_ADMIN&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户必须拥有指定权限才能访问。</p>
</li>
</ul>
<h4 id="hasIpAddress"><a href="#hasIpAddress" class="headerlink" title="hasIpAddress"></a>hasIpAddress</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示 IP 地址，如果用户 IP 和参数匹配，则可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).hasIpAddress(<span class="string">&quot;192.168.1.1&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：只有来自指定 IP 地址的用户可以访问。</p>
</li>
</ul>
<h4 id="hasRole"><a href="#hasRole" class="headerlink" title="hasRole"></a>hasRole</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示角色，则其角色可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户必须拥有指定角色才能访问。</p>
</li>
</ul>
<h4 id="permitAll"><a href="#permitAll" class="headerlink" title="permitAll"></a>permitAll</h4><ul>
<li><p><strong>描述</strong>：用户可以任意访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/public/**&quot;</span>).permitAll()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：允许所有用户（包括未登录用户）访问指定路径。</p>
</li>
</ul>
<h4 id="rememberMe"><a href="#rememberMe" class="headerlink" title="rememberMe"></a>rememberMe</h4><ul>
<li><p><strong>描述</strong>：允许通过 remember-me 登录的用户访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/user/**&quot;</span>).rememberMe()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：允许通过 remember-me 功能自动登录的用户访问。</p>
</li>
</ul>
<h4 id="authenticated"><a href="#authenticated" class="headerlink" title="authenticated"></a>authenticated</h4><ul>
<li><p><strong>描述</strong>：用户登录后可访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).authenticated()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户必须登录后才能访问。</p>
</li>
</ul>
<h3 id="其他配置要求"><a href="#其他配置要求" class="headerlink" title="其他配置要求"></a>其他配置要求</h3><p>除了上述常见的配置方法，<code>HttpSecurity</code> 还提供了许多其他配置选项，用于处理各种安全相关的细节。以下是一些常见的配置要求和示例：</p>
<h4 id="登录和注销"><a href="#登录和注销" class="headerlink" title="登录和注销"></a>登录和注销</h4><ul>
<li><p><strong>登录配置</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;http</span><br><span class="line">      .formLogin()</span><br><span class="line">       .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">          .defaultSuccessUrl(<span class="string">&quot;/home&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">         .permitAll();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>注销配置</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;http</span><br><span class="line">      .logout()</span><br><span class="line">        .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">          .logoutSuccessUrl(<span class="string">&quot;/login?logout&quot;</span>)</span><br><span class="line">         .permitAll();</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="CSRF-保护"><a href="#CSRF-保护" class="headerlink" title="CSRF 保护"></a>CSRF 保护</h4><ul>
<li><strong>启用 CSRF 保护</strong>：</li>
</ul>
 <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">     .csrf()</span><br><span class="line">        .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p><strong>禁用 CSRF 保护</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">     .csrf()</span><br><span class="line">        .disable();</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="CORS-配置"><a href="#CORS-配置" class="headerlink" title="CORS 配置"></a>CORS 配置</h4><ul>
<li><p><strong>启用 CORS</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;http</span><br><span class="line">      .cors()</span><br><span class="line">       .and()</span><br><span class="line">          .csrf()</span><br><span class="line">         .disable();</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul>
<li><strong>自定义异常处理</strong>：</li>
</ul>
 <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">     .exceptionHandling()</span><br><span class="line">        .accessDeniedPage(<span class="string">&quot;/403&quot;</span>)</span><br><span class="line">         .authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">CustomAuthenticationEntryPoint</span>());</span><br></pre></td></tr></table></figure></div>
<h4 id="安全上下文"><a href="#安全上下文" class="headerlink" title="安全上下文"></a>安全上下文</h4><ul>
<li><p><strong>配置安全上下文</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">     .securityContext()</span><br><span class="line">        .securityContextRepository(<span class="keyword">new</span> <span class="title class_">CustomSecurityContextRepository</span>());</span><br></pre></td></tr></table></figure></div></li>
</ul>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过 <code>HttpSecurity</code>，我们可以灵活地配置 Spring Security 的各种安全策略。从简单的访问控制到复杂的异常处理，<code>HttpSecurity</code> 提供了丰富的配置选项，满足不同项目的需求。更多详细信息可以参考 <a class="link"   href="https://docs.spring.io/spring-security/reference/5.8.0-M1/index.html" >Spring Security 官方文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%863.jpeg"
                     
                ></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>若依</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装和使用</title>
    <url>/2025/08/01/technology/operation/Docker/</url>
    <content><![CDATA[<h1 id="一-docker安装"><a href="#一-docker安装" class="headerlink" title="一. docker安装"></a>一. docker安装</h1><blockquote>
<p>主要参考文章<a class="link"   href="https://kb.fit2cloud.com/?p=315935ca-79be-4412-a7da-6aaa932cc6e2#heading-6" >Docker、Docker-compose 入门教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<ul>
<li><p>上阿里云自己登录注册账户</p>
</li>
<li><p>控制台-左上角-容器镜像服务ACR-镜像工具-镜像加速器-用地址来替代入门教程第二步中<code>registry-mirrors</code>的代码</p>
</li>
<li><p>如果没变就是这样：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 &amp;&amp; \</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo &amp;&amp; yum makecache fast &amp;&amp; \ </span><br><span class="line">yum -y install docker-ce &amp;&amp; \</span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>只要完成到第二步就好了</p>
</li>
</ul>
<h1 id="二-docker换源"><a href="#二-docker换源" class="headerlink" title="二. docker换源"></a>二. docker换源</h1><blockquote>
<p>或者多加一些源</p>
</blockquote>
<ol>
<li><p><strong>进入&#x2F;创建配置目录</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建（有就不用了）</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="comment"># 进入</span></span><br><span class="line"><span class="built_in">cd</span> /etc/docker</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>配置镜像源</strong></p>
<p>创建或修改 <em>&#x2F;etc&#x2F;docker&#x2F;daemon.json</em> 文件，添加国内可用的镜像源地址：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line"><span class="string">&quot;https://docker.m.daocloud.io&quot;</span>, </span><br><span class="line"><span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://mirror.baidubce.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;</span> // 阿里云镜像（需替换为你的专属加速地址）</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></div></li>
</ol>
<blockquote>
<p><strong>注意：建议保留 2-3 个稳定的镜像源，过多可能影响速度。</strong></p>
</blockquote>
<ol start="3">
<li><p><strong>重启Docker服务</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>测试拉取镜像</strong></p>
<p>尝试拉取测试镜像以验证速度：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker pull hello-world</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h1 id="三-docker使用"><a href="#三-docker使用" class="headerlink" title="三. docker使用"></a>三. docker使用</h1><blockquote>
<p><a class="link"   href="https://www.runoob.com/docker/docker-tutorial.html" >菜鸟教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<ol>
<li><p>下载镜像</p>
<p><code>docker pull</code></p>
<ul>
<li>比如使用<code>docker pull mysql:8</code>这个8是版本</li>
</ul>
</li>
<li><p>搜索镜像</p>
<p><code>docker search</code></p>
<ul>
<li>第一条往往都是官方的</li>
<li>比如使用docker search mysql</li>
</ul>
</li>
<li><p>查看镜像</p>
<p><code>docker images</code></p>
<p>本地下载了哪些镜像</p>
</li>
<li><p>删除镜像</p>
<p><code>docker rmi 镜像id</code></p>
<p>id是images中查出来的</p>
</li>
<li><p>使用镜像创建容器</p>
<ul>
<li><code>docker run -itd --name mysql01 -p 13306:3306 -e MYSQL_ROOT_PASSWORD=ok 3218b38490ce</code> -e后面是设置的数据库密码，主机13306端口与容器3306端口映射，最后那个是镜像id。</li>
</ul>
</li>
<li><p>重启容器</p>
<p><code>docker start 容器id</code></p>
</li>
<li><p>停止容器</p>
<p><code>docker stop 容器id</code></p>
</li>
<li><p>进入容器</p>
<p><code>docker exec -it 容器id /bin/bash</code></p>
</li>
<li><p>退出容器</p>
<p><code>exit</code></p>
</li>
<li><p>查看容器</p>
<ul>
<li><p><code>docker ps -a</code>看所有</p>
</li>
<li><p><code>docker ps</code>看就是正在运行的</p>
</li>
</ul>
</li>
<li><p>删除容器</p>
<p><code>docker rm 容器id</code></p>
</li>
</ol>
<h1 id="四-自定义镜像"><a href="#四-自定义镜像" class="headerlink" title="四. 自定义镜像"></a>四. 自定义镜像</h1><h2 id="1-自定义自己的java容器镜像"><a href="#1-自定义自己的java容器镜像" class="headerlink" title="1. 自定义自己的java容器镜像"></a>1. 自定义自己的java容器镜像</h2><ul>
<li><code>Dockerfile</code>文件保存为Dockerfile要为Unix格式的</li>
</ul>
<div class="code-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> cm</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> express-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>这个.jar文件是自己的项目 后面的.jar是别名</p>
</li>
<li><p>9090是jar包的运行端口，上面那个是jdk版本</p>
</li>
<li><p>把这个image先拉下来</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull openjdk:8</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>把jar文件和Dockerfile都保存到一个文件下，进入该目录执行：</p>
<p><code>docker build -t express:1 .</code>1是版本号，<code>.</code>是当前目录下</p>
</li>
<li><p>自己的镜像好了就可以用</p>
<p><code>docker run -itd --name expressafter -p 9090:9090 2ad1bee10115</code></p>
</li>
</ul>
<h2 id="2-DockerFile指令"><a href="#2-DockerFile指令" class="headerlink" title="2. DockerFile指令"></a>2. DockerFile指令</h2><ul>
<li><p>每个指令都会创建提交一个新的镜像层，并提交</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">FROM               #基础镜像，从基础镜像开始构建</span><br><span class="line">MAINTAINER         #该dockerfile作者，姓名+邮箱</span><br><span class="line">RUN                #镜像构建的时候需要运行的命令</span><br><span class="line">ADD                #添加内容，添加压缩包 如tomcat镜像</span><br><span class="line">WORKDIR            #镜像的工作目录</span><br><span class="line">VOLUME             #挂载目录</span><br><span class="line">EXPOSE             #暴露端口配置</span><br><span class="line">CMD                #指定该容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT         #指定该容器启动的时候要运行的命令，可以追加</span><br><span class="line">ONBUILD            #当构建一个被继承DockerFile这个时候就会运行ONBUILD的指令，触发指令。</span><br><span class="line">COPY               #将文件拷贝到镜像种，类似ADD</span><br><span class="line">ENV                #构建的时候设置环境变量</span><br></pre></td></tr></table></figure></div></li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Operation</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SRC导航</title>
    <url>/2024/12/31/technology/security/SRC%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<p>阿里SRC <a class="link"   href="https://security.alibaba.com/" >https://security.alibaba.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>蚂蚁集团SRC <a class="link"   href="https://security.alipay.com/" >https://security.alipay.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>阿里本地生活SRC <a class="link"   href="https://asrc.alibaba.com/#/" >https://asrc.alibaba.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>京东安全应急响应中心 <a class="link"   href="https://security.jd.com/#/" >https://security.jd.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>腾讯SRC <a class="link"   href="https://security.tencent.com/" >https://security.tencent.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>美团安全应急响应中心 <a class="link"   href="https://security.meituan.com/#/home" >https://security.meituan.com/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>百度SRC <a class="link"   href="https://bsrc.baidu.com/views/main/index.html#home" >https://bsrc.baidu.com/views/main/index.html#home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>字节跳动 <a class="link"   href="https://security.bytedance.com/" >https://security.bytedance.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>携程安全应急响应中心 <a class="link"   href="https://sec.ctrip.com/" >https://sec.ctrip.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>滴滴SRC <a class="link"   href="http://sec.didichuxing.com/" >http://sec.didichuxing.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>货拉拉安全应急响应中心 <a class="link"   href="https://llsrc.huolala.cn/#/home" >https://llsrc.huolala.cn/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>小米安全中心 <a class="link"   href="https://sec.xiaomi.com/" >https://sec.xiaomi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>银联安全应急响应中心 <a class="link"   href="https://security.unionpay.com/" >https://security.unionpay.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>猎聘SRC <a class="link"   href="https://security.liepin.com/" >https://security.liepin.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>360SRC <a class="link"   href="https://security.360.cn/" >https://security.360.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>58SRC <a class="link"   href="https://security.58.com/" >https://security.58.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>天融信安全漏洞响应中心 <a class="link"   href="https://src.topsec.com.cn/" >https://src.topsec.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>统信安全应急响应中心 <a class="link"   href="https://src.uniontech.com/" >https://src.uniontech.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>多点安全应急响应中心 <a class="link"   href="https://src.dmall.com/" >https://src.dmall.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>NIO蔚来安全应急响应中心 <a class="link"   href="https://niosrc.bugbank.cn/" >https://niosrc.bugbank.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>贝锐安全应急响应中心 <a class="link"   href="https://security.oray.com/" >https://security.oray.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>旷视安全应急响应中心 <a class="link"   href="https://megvii.huoxian.cn/" >https://megvii.huoxian.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>哈啰出行安全应急响应中心 <a class="link"   href="https://src.hellobike.com/index.php" >https://src.hellobike.com/index.php<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>TCL安全应急响应中心 <a class="link"   href="https://src.tcl.com/zh/index" >https://src.tcl.com/zh/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Soul安全应急响应中心 <a class="link"   href="https://security.soulapp.cn/" >https://security.soulapp.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Keep 安全应急响应中心 <a class="link"   href="https://keep.huoxian.cn/" >https://keep.huoxian.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Apple Security Bounty <a class="link"   href="https://security.apple.com/bounty/" >https://security.apple.com/bounty/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>理想安全应急响应中心 <a class="link"   href="https://security.lixiang.com/index" >https://security.lixiang.com/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>麦当劳中国安全应急响应中心 <a class="link"   href="https://security.mcd.cn/" >https://security.mcd.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>安恒应急响应中心 <a class="link"   href="https://security.dbappsecurity.com.cn/" >https://security.dbappsecurity.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>东方航空 <a class="link"   href="https://src.ceair.com/" >https://src.ceair.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>迅雷安全应急响应中心 <a class="link"   href="https://security.xunlei.com/" >https://security.xunlei.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>得物安全应急响应中心 <a class="link"   href="https://security.dewu.com/" >https://security.dewu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>荣耀SRC <a class="link"   href="https://security.hihonor.com/src/#/" >https://security.hihonor.com/src/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>看云安全应急响应中心 <a class="link"   href="https://security.kanyun.com/" >https://security.kanyun.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>贝壳安全 <a class="link"   href="https://security.ke.com/" >https://security.ke.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>哔哩哔哩安全应急响应中心 <a class="link"   href="https://security.bilibili.com/" >https://security.bilibili.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>BOSS直聘 <a class="link"   href="https://src.zhipin.com/" >https://src.zhipin.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>贝宝金融安全应急响应中心 <a class="link"   href="https://btcsrc.vulbox.com/" >https://btcsrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>北京北森云计算SRC <a class="link"   href="https://beisen.butian.net/" >https://beisen.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>菜鸟安全应急响应中心 <a class="link"   href="https://sec.cainiao.com/" >https://sec.cainiao.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>宜信安全应急响应中心 <a class="link"   href="https://security.creditease.cn/" >https://security.creditease.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>度小满SRC <a class="link"   href="https://security.duxiaoman.com/index.html#/main" >https://security.duxiaoman.com/index.html#/main<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>嘀嗒出行 <a class="link"   href="https://dida.butian.net/" >https://dida.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>丁香园安全应急响应中心 <a class="link"   href="https://dxysrc.vulbox.com/" >https://dxysrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>斗鱼SRC <a class="link"   href="https://security.douyu.com/" >https://security.douyu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>大疆安全应急响应中心 <a class="link"   href="https://security.dji.com/" >https://security.dji.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>DHSRC 安全应急响应中心 <a class="link"   href="http://dhsrc.dhgate.com/" >http://dhsrc.dhgate.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>魅族SRC <a class="link"   href="https://sec.meizu.com/" >https://sec.meizu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>东方财富安全应急响应中心 <a class="link"   href="http://security.eastmoney.com/" >http://security.eastmoney.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>法大大安全应急响应中心 <a class="link"   href="https://sec.fadada.com/" >https://sec.fadada.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>焦点SRC <a class="link"   href="https://security.focuschina.com/" >https://security.focuschina.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>富友SRC <a class="link"   href="https://fsrc.fuiou.com/home/index.html" >https://fsrc.fuiou.com/home/index.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>瓜子安全应急响应中心 <a class="link"   href="https://security.guazi.com/" >https://security.guazi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>华住安全响应中心 <a class="link"   href="https://sec.huazhu.com/" >https://sec.huazhu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>海康威视安全应急响应中心 <a class="link"   href="https://www.hikvision.com/cn/support/CybersecurityCenter/" >https://www.hikvision.com/cn/support/CybersecurityCenter/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>恒昌安全应急响应中心 <a class="link"   href="http://src.credithc.com/" >http://src.credithc.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>爱奇艺安全应急响应中心 <a class="link"   href="https://security.iqiyi.com/" >https://security.iqiyi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>合合安全应急响应中心 <a class="link"   href="https://security.intsig.com/" >https://security.intsig.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>平安安全应急响应中心 <a class="link"   href="https://isrc.pingan.com/homePage/index" >https://isrc.pingan.com/homePage/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>讯飞安全响应中心 <a class="link"   href="https://security.iflytek.com/" >https://security.iflytek.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>竞技世界 <a class="link"   href="https://security.jj.cn/" >https://security.jj.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>酷狗安全应急响应中心 <a class="link"   href="https://security.kugou.com/" >https://security.kugou.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>快看安全应急响应中心 <a class="link"   href="https://security.kuaikanmanhua.com/" >https://security.kuaikanmanhua.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>快手SRC <a class="link"   href="https://security.kuaishou.com/" >https://security.kuaishou.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>金山云安全应急响应中心 <a class="link"   href="https://kysrc.vulbox.com/" >https://kysrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>同程旅行安全应急响应中心 <a class="link"   href="https://sec.ly.com/" >https://sec.ly.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>理想安全应急响应中心 <a class="link"   href="https://security.lixiang.com/index" >https://security.lixiang.com/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>乐信集团安全应急响应中心 <a class="link"   href="https://lxsrc.vulbox.com/" >https://lxsrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>联想集团安全应急响应中心 <a class="link"   href="https://lsrc.vulbox.com/" >https://lsrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>美丽联合集团 <a class="link"   href="https://security.mogu.com/" >https://security.mogu.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>陌陌安全应急响应中心 <a class="link"   href="https://security.immomo.com/" >https://security.immomo.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>马蜂窝安全应急响应中心 <a class="link"   href="https://security.mafengwo.cn/" >https://security.mafengwo.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>网易安全中心 <a class="link"   href="https://aq.163.com/" >https://aq.163.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>你我贷安全响应中心 <a class="link"   href="https://www.niwodai.com/sec/index.do" >https://www.niwodai.com/sec/index.do<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>一起教育安全应急响应中心 <a class="link"   href="https://security.17zuoye.com/" >https://security.17zuoye.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>好未来安全应急响应中心 <a class="link"   href="https://src.100tal.com/" >https://src.100tal.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>OPPO安全应急响应中心 <a class="link"   href="https://security.oppo.com/cn/" >https://security.oppo.com/cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>华为PSIRT <a class="link"   href="https://bugbounty.huawei.com/#/home" >https://bugbounty.huawei.com/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>完美世界 安全应急响应中心 <a class="link"   href="http://security.wanmei.com/" >http://security.wanmei.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>平安安全应急响应中心 <a class="link"   href="https://security.pingan.com/" >https://security.pingan.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>人民教育出版社 <a class="link"   href="https://pep.butian.net/" >https://pep.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>奇安信集团 <a class="link"   href="https://qianxin.butian.net/" >https://qianxin.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>轻松筹安全应急响应中心 <a class="link"   href="https://qssrc.vulbox.com/" >https://qssrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>千米安全应急响应中心 <a class="link"   href="http://security.qianmi.com/" >http://security.qianmi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>融360安全应急响应中心 <a class="link"   href="https://security.rong360.com/#/" >https://security.rong360.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>苏宁安全应急响应中心 <a class="link"   href="https://security.suning.com/ssrc-web/index.jsp" >https://security.suning.com/ssrc-web/index.jsp<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>安全狗漏洞响应中心 <a class="link"   href="http://security.safedog.cn/index.html" >http://security.safedog.cn/index.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>水滴安全应急响应中心 <a class="link"   href="https://security.shuidihuzhu.com/" >https://security.shuidihuzhu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>顺丰安全应急响应中心 <a class="link"   href="https://sfsrc.sf-express.com/" >https://sfsrc.sf-express.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>深信服 <a class="link"   href="https://security.sangfor.com.cn/" >https://security.sangfor.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>上上签安全应急响应中心 <a class="link"   href="https://src.bestsign.cn/" >https://src.bestsign.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>同盾安全应急响应中心 <a class="link"   href="https://tdsrc.vulbox.com/" >https://tdsrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>T3出行安全应急响应中心 <a class="link"   href="https://security.t3go.cn/#/home" >https://security.t3go.cn/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>同程数科安全响应中心 <a class="link"   href="https://securitytcjf.com/" >https://securitytcjf.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>途虎安全应急响应中心 <a class="link"   href="https://security.tuhu.cn/" >https://security.tuhu.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>途牛安全应急响应中心 <a class="link"   href="http://sec.tuniu.com/" >http://sec.tuniu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>UCloud安全应急响应中心 <a class="link"   href="https://src.ucloud.cn/" >https://src.ucloud.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>VIPKID安全响应中心 <a class="link"   href="https://security.vipkid.com.cn/" >https://security.vipkid.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>vivo安全应急响应中心 <a class="link"   href="https://security.vivo.com.cn/" >https://security.vivo.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>唯品会 <a class="link"   href="https://sec.vip.com/" >https://sec.vip.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>WiFi万能钥匙 <a class="link"   href="https://sec.wifi.com/" >https://sec.wifi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>微众银行安全响应中心 <a class="link"   href="https://security.webank.com/" >https://security.webank.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>泛微安全应急响应中心 <a class="link"   href="https://weaversrc.vulbox.com/" >https://weaversrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>挖财安全应急响应中心 <a class="link"   href="https://sec.wacai.com/" >https://sec.wacai.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>金山办公安全应急响应中心 <a class="link"   href="https://security.wps.cn/" >https://security.wps.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>微博 <a class="link"   href="https://wsrc.weibo.com/" >https://wsrc.weibo.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>享道出行安全应急响应中心 <a class="link"   href="https://src.saicmobility.com/" >https://src.saicmobility.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>喜马拉雅安全应急响应中心 <a class="link"   href="https://security.ximalaya.com/" >https://security.ximalaya.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>小赢安全应急响应中心 <a class="link"   href="https://security.xiaoying.com/" >https://security.xiaoying.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>知识星球安全应急响应中心 <a class="link"   href="https://security.zsxq.com/" >https://security.zsxq.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>自如安全应急响应中心 <a class="link"   href="https://zrsecurity.ziroom.com/" >https://zrsecurity.ziroom.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>萤石安全响应中心 <a class="link"   href="https://ysrc.ys7.com/#/home" >https://ysrc.ys7.com/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>有赞安全应急响应中心 <a class="link"   href="https://src.youzan.com/" >https://src.youzan.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>中通安全应急响应中心 <a class="link"   href="https://sec.zto.com/home" >https://sec.zto.com/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>掌门教育安全应急响应中心 <a class="link"   href="https://security.zhangmen.com/" >https://security.zhangmen.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>智联招聘安全应急响应中心 <a class="link"   href="https://src.zhaopin.com/" >https://src.zhaopin.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>众安安全应急响应中心 <a class="link"   href="https://security.zhongan.com/#/" >https://security.zhongan.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>猪八戒SRC <a class="link"   href="https://sec.zbj.com/" >https://sec.zbj.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>转载自：<a class="link"   href="https://wiki.bafangwy.com/doc/253/" >https://wiki.bafangwy.com/doc/253/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Security</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>安全</tag>
        <tag>SRC</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞赏金平台</title>
    <url>/2024/12/31/technology/security/%E6%BC%8F%E6%B4%9E%E8%B5%8F%E9%87%91%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h2 id="1、企业SRC平台导航大全"><a href="#1、企业SRC平台导航大全" class="headerlink" title="1、企业SRC平台导航大全"></a>1、企业SRC平台导航大全</h2><p><a class="link"   href="https://wiki.bafangwy.com/doc/253/" >https://wiki.bafangwy.com/doc/253/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="2、公益SRC平台"><a href="#2、公益SRC平台" class="headerlink" title="2、公益SRC平台"></a>2、公益SRC平台</h2><p>补天<br><a class="link"   href="https://www.butian.net/" >https://www.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>漏洞盒子<br><a class="link"   href="https://www.vulbox.com/" >https://www.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="3、众测平台"><a href="#3、众测平台" class="headerlink" title="3、众测平台"></a>3、众测平台</h2><p>国家信息安全漏洞共享-众测<br><a class="link"   href="https://zc.cnvd.org.cn/project/index" >https://zc.cnvd.org.cn/project/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>春秋云测<br><a class="link"   href="https://www.ichunqiu.com/cqyc" >https://www.ichunqiu.com/cqyc<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>360众测<br><a class="link"   href="https://zhongce.360.net/" >https://zhongce.360.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>雷神众测<br><a class="link"   href="https://www.bountyteam.com/" >https://www.bountyteam.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="4、教育SRC"><a href="#4、教育SRC" class="headerlink" title="4、教育SRC"></a>4、教育SRC</h2><p><a class="link"   href="https://src.sjtu.edu.cn/" >https://src.sjtu.edu.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="5、国外赏金平台"><a href="#5、国外赏金平台" class="headerlink" title="5、国外赏金平台"></a>5、国外赏金平台</h2><p><a class="link"   href="https://www.hackerone.com/" >https://www.hackerone.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.bugcrowd.com/" >https://www.bugcrowd.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.openbugbounty.org/" >https://www.openbugbounty.org/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.intigriti.com/" >https://www.intigriti.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>国外SRC：<br><a class="link"   href="https://security.apple.com/bounty/categories" >https://security.apple.com/bounty/categories<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.facebook.com/whitehat" >https://www.facebook.com/whitehat<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.microsoft.com/en-us/msrc/bounty" >https://www.microsoft.com/en-us/msrc/bounty<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://bughunters.google.com/about" >https://bughunters.google.com/about<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://bounty.github.com/" >https://bounty.github.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>转载自：<a class="link"   href="https://wiki.bafangwy.com/doc/523/" >https://wiki.bafangwy.com/doc/523/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Security</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>安全</tag>
        <tag>SRC</tag>
        <tag>众测</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK下载（绿色版）</title>
    <url>/2025/08/01/technology/operation/JDK/</url>
    <content><![CDATA[<p>该示例中是安装jdk8，并且使用安装包的方式。</p>
<p>此处下载jdk-8u341-linux-x64.tar.gz：<br><a class="link"   href="https://github.com/Sabthever/Pictures1/blob/main/Download_Resources/jdk-8u341-linux-x64.tar.gz" >github安装包<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>百度网盘链接: <a class="link"   href="https://pan.baidu.com/s/1VZWu7kl5yYGciTFZeyy8hQ?pwd=ettd" >https://pan.baidu.com/s/1VZWu7kl5yYGciTFZeyy8hQ?pwd=ettd<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 提取码: ettd </p>
<ol>
<li><p>找到相应的文件.tar.gz的jdk</p>
</li>
<li><p>通过xftp等传入&#x2F;opt</p>
</li>
<li><p><code>tar -zxf jdk-8u341-linux-x64.tar.gz</code></p>
</li>
<li><p>这边喜欢放进&#x2F;opt&#x2F;soft&#x2F;jdk180中</p>
<p><code>mv *** soft/jdk180</code>不要那个&#x2F;</p>
</li>
<li><p><code>vim /etc/profile</code>配置环境变量</p>
<p>Shift+G到最后一行，输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Java Env</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/soft/jdk180</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure></div>

<p>:wq 保存退出</p>
<p><code>source /etc/profile</code>重新加载</p>
</li>
<li><p><code>java -version</code>能够使用说明成功</p>
</li>
</ol>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Operation</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s学习</title>
    <url>/2025/04/28/technology/operation/k8s%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一. 介绍"></a>一. 介绍</h2><p>　　kubernetes，简称K8s，是用8代替名字中间的8个字符“ubernete”而成的缩写。是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。<a href="#anchor1">[1]</a></p>
<p>　　详细作用有：</p>
<ol>
<li><strong>容器编排</strong></li>
</ol>
<ul>
<li><strong>自动化部署</strong>：k8s 可以自动部署容器化应用程序到集群中的节点上，无需手动干预。</li>
<li><strong>自动扩展</strong>：根据应用程序的负载自动扩展或缩减容器的数量，以满足业务需求。</li>
<li><strong>自动重启</strong>：在容器失败或节点宕机时，自动重启容器或重新调度到其他健康节点上。</li>
</ul>
<ol start="2">
<li><strong>服务发现和负载均衡</strong></li>
</ol>
<ul>
<li><strong>服务发现</strong>：k8s 提供内置的服务发现机制，使得容器间可以方便地通信。</li>
<li><strong>负载均衡</strong>：自动在多个容器间分配流量，确保应用程序的高可用性和性能。</li>
</ul>
<ol start="3">
<li><strong>存储编排</strong></li>
</ol>
<ul>
<li><strong>动态存储管理</strong>：支持动态分配和管理存储卷，适用于有状态应用程序的数据存储需求。</li>
<li><strong>多种存储支持</strong>：可以与多种存储后端（如本地存储、云存储等）集成。</li>
</ul>
<ol start="4">
<li><strong>配置和密钥管理</strong></li>
</ol>
<ul>
<li><strong>集中配置管理</strong>：将应用程序的配置与镜像分离，方便统一管理和更新。</li>
<li><strong>安全密钥管理</strong>：安全地存储和管理敏感信息（如密码、密钥等），并将其注入到容器中。</li>
</ul>
<ol start="5">
<li><strong>资源管理</strong></li>
</ol>
<ul>
<li><strong>资源调度</strong>：根据资源需求（如 CPU、内存）智能调度容器到合适的节点上。</li>
<li><strong>资源配额</strong>：限制资源使用，避免单个应用程序占用过多资源影响其他应用。</li>
</ul>
<ol start="6">
<li><strong>高可用性和容错性</strong></li>
</ol>
<ul>
<li><strong>多副本运行</strong>：通过运行多个副本确保服务的高可用性。</li>
<li><strong>自我修复</strong>：自动检测和替换不健康的容器或节点，确保系统始终处于期望状态。</li>
</ul>
<ol start="7">
<li><strong>滚动更新和回滚</strong></li>
</ol>
<ul>
<li><strong>平滑更新</strong>：支持滚动更新，逐步替换旧版本容器，避免服务中断。</li>
<li><strong>快速回滚</strong>：如果更新出现问题，可以快速回滚到之前的稳定版本。</li>
</ul>
<ol start="8">
<li><strong>跨环境一致性和移植性</strong></li>
</ol>
<ul>
<li><strong>环境一致性</strong>：在开发、测试和生产环境中保持一致的部署体验。</li>
<li><strong>云移植性</strong>：支持在多种云平台（如 AWS、Azure、GCP）和本地数据中心之间移植应用程序。</li>
</ul>
<ol start="9">
<li><strong>多租户支持</strong></li>
</ol>
<ul>
<li><strong>资源隔离</strong>：在共享集群中，能够隔离不同租户的资源，确保安全性和性能。</li>
<li><strong>命名空间管理</strong>：使用命名空间对资源进行逻辑隔离，方便多团队或项目管理。</li>
</ul>
<h2 id="二-k8s部署"><a href="#二-k8s部署" class="headerlink" title="二.k8s部署"></a>二.k8s部署</h2><p>　　这里主要配置的k8s三台设备的集群，是终端型k8s（无UI），在三台Centos7环境下进行配置，本篇部署参考<a class="link"   href="https://www.cnblogs.com/QsFavour/p/18626833" >[2]《适合新手的K8s完整部署教程》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。这边是在相应虚拟机里进行部署，需要一定的Linux基础，并且是在学习环境中的(局域网中)，生产环境的话要打通相应的网络，做好防护。</p>
<ol>
<li><p><strong>yum换源</strong></p>
<p>需要给Centos7提前换源，否则会失败，换源方法自己查查，具体有wget下载、网上下载导入等方法。有<code>wget</code>可以直接执行如下：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原来镜像源</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换阿里云的镜像源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建yum 元数据缓存</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>初始化相应CentOS7配置，固定好IP并改好DNS</strong></p>
<p>进入&#96;&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33&#96;&#96;</p>
<p>&#96;&#96;BOOTPROTO<code>改为</code>“static”&#96;</p>
<p><code>IPADDR</code>改为自己的ip地址</p>
<p>配置好相应DNS和网关</p>
</li>
<li><p><strong>做好IP映射</strong></p>
<p>进入<code>/etc/hosts</code>，把三台设备的路由跟在后面，如我本地</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.179.150 k8s01</span><br><span class="line">192.168.179.151 k8s02</span><br><span class="line">192.168.179.152 k8s03</span><br></pre></td></tr></table></figure></div>

<p>其中150的是我的master机器。</p>
</li>
<li><p><strong>三台机器需要执行以下操作(非生产环境)</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a:安装epel-release源</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># b:关于防火墙和selinx，避免与docker容器的防火墙规则出现冲突</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>开始部署master主机，可随意选择一台作为根主机</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a：安装etcd和kubernetes-master</span></span><br><span class="line">yum install etcd</span><br><span class="line">yum install kubernetes-master</span><br><span class="line"></span><br><span class="line"><span class="comment"># b：编辑/etc/etcd/etcd.conf文件</span></span><br><span class="line">vi /etc/etcd/etcd.conf</span><br><span class="line"><span class="comment"># 编辑如下:</span></span><br><span class="line">ETCD_NAME=default</span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd/default.etcd&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;http://0.0.0.0:2379&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">&quot;http://localhost:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c：编辑/etc/kubernetes/apiserver文件</span></span><br><span class="line">vi /etc/kubernetes/apiserver</span><br><span class="line"><span class="comment"># 编辑如下：　　</span></span><br><span class="line">KUBE_API_ADDRESS=<span class="string">&quot;--insecure-bind-address=0.0.0.0&quot;</span></span><br><span class="line">KUBE_API_PORT=<span class="string">&quot;--port=8080&quot;</span></span><br><span class="line">KUBELET_PORT=<span class="string">&quot;--kubelet-port=10250&quot;</span></span><br><span class="line">KUBE_ETCD_SERVERS=<span class="string">&quot;--etcd-servers=http://127.0.0.1:2379&quot;</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">&quot;--service-cluster-ip-range=10.254.0.0/16&quot;</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">&quot;--admission-　　　　　　　　                 control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ResourceQuota&quot;</span></span><br><span class="line">KUBE_API_ARGS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d：启动并设置开机启动etcd、kube-apiserver、kube-controller-manager、kube-scheduler等服务</span></span><br><span class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> etcd kube-apiserver kube-controller-manager kube-scheduler; <span class="keyword">do</span></span><br><span class="line">    systemctl restart <span class="variable">$SERVICES</span></span><br><span class="line">    systemctl <span class="built_in">enable</span> <span class="variable">$SERVICES</span></span><br><span class="line">    systemctl status <span class="variable">$SERVICES</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 这段代码需完整复制到命令行进行执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e：etcd中定义flannel网络</span></span><br><span class="line">etcdctl mk /atomic.io/network/config <span class="string">&#x27;&#123;&quot;Network&quot;:&quot;172.17.0.0/16&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>以下操作在node1和node2节点进行操作</strong></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、yum安装flannel和kubernetes-node</span></span><br><span class="line">yum install -y flannel</span><br><span class="line">yum install -y kubernetes-node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、为flannel网络指定etcd服务</span></span><br><span class="line"><span class="comment"># a：修改 /etc/sysconfig/flanneld文件</span></span><br><span class="line">vi /etc/sysconfig/flanneld</span><br><span class="line"><span class="comment">#修改如下(如果没有的话就新增上去):</span></span><br><span class="line">FLANNEL_ETCD=<span class="string">&quot;http://192.168.179.150:2379&quot;</span></span><br><span class="line">FLANNEL_ETCD_KEY=<span class="string">&quot;/atomic.io/network&quot;</span></span><br><span class="line"><span class="comment"># 注意：这里的192.168.179.150是我们的master主机的IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b：修改/etc/kubernetes/config文件　　</span></span><br><span class="line">vi /etc/kubernetes/config</span><br><span class="line"><span class="comment">#修改如下:</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">&quot;--logtostderr=true&quot;</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">&quot;--v=0&quot;</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">&quot;--allow-privileged=false&quot;</span></span><br><span class="line">KUBE_MASTER=<span class="string">&quot;--master=http://192.168.179.150:8080&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c：修改对应node的配置文件/etc/kubernetes/kubelet</span></span><br><span class="line"><span class="comment">#Node1的修改如下:</span></span><br><span class="line">KUBELET_ADDRESS=<span class="string">&quot;--address=0.0.0.0&quot;</span></span><br><span class="line">KUBELET_PORT=<span class="string">&quot;--port=10250&quot;</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">&quot;--hostname-override=192.168.179.151&quot;</span> <span class="comment">#修改成Node1的IP</span></span><br><span class="line">KUBELET_API_SERVER=<span class="string">&quot;--api-servers=http://192.168.179.150:8080&quot;</span> <span class="comment">#指定Master节点的 API Server</span></span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=<span class="string">&quot;--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest&quot;</span></span><br><span class="line">KUBELET_ARGS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Node2:修改如下:</span></span><br><span class="line">KUBELET_ADDRESS=<span class="string">&quot;--address=0.0.0.0&quot;</span></span><br><span class="line">KUBELET_PORT=<span class="string">&quot;--port=10250&quot;</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">&quot;--hostname-override=192.168.179.152&quot;</span> <span class="comment">#修改成Node2的IP</span></span><br><span class="line">KUBELET_API_SERVER=<span class="string">&quot;--api-servers=http://192.168.179.150:8080&quot;</span> <span class="comment">#指定Master节点的 API Server</span></span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=<span class="string">&quot;--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest&quot;</span></span><br><span class="line">KUBELET_ARGS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、在Node1和Node2上同时执行以下代码进行启动kube-proxy,kebelet,docker,flanneld等服务，并且设置开机启动</span></span><br><span class="line"><span class="keyword">for</span> SERVICES <span class="keyword">in</span> kube-proxy kubelet docker flanneld; <span class="keyword">do</span></span><br><span class="line">    systemctl restart <span class="variable">$SERVICES</span></span><br><span class="line">    systemctl <span class="built_in">enable</span> <span class="variable">$SERVICES</span></span><br><span class="line">    systemctl status <span class="variable">$SERVICES</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 以上代码需要复制到命令行中完整执行</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>进行验证</strong></p>
<p>在Master节点上执行</p>
<p><code>kubectl get node</code></p>
<p>出现如下内容，表示部署完毕。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/k8s%E5%AD%A6%E4%B9%A0/image-20250428095133431.png"
                      alt="image-20250428095133431"
                ></p>
</li>
<li><p>部署完毕</p>
</li>
</ol>
<h2 id="三-k8s使用"><a href="#三-k8s使用" class="headerlink" title="三. k8s使用"></a>三. k8s使用</h2><p><code>kubectl</code>是控制k8s集群的命令。</p>
<h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><ul>
<li><strong>查看集群信息</strong><ul>
<li><code>kubectl cluster-info</code>：查看集群的主节点信息等。</li>
</ul>
</li>
<li><strong>获取资源列表</strong><ul>
<li><code>kubectl get &lt;资源类型&gt;</code>：查看指定资源的列表。例如：<ul>
<li><code>kubectl get nodes</code>：查看节点列表。</li>
<li><code>kubectl get pods</code>：查看 Pod 列表。</li>
<li><code>kubectl get services</code>：查看服务列表。</li>
<li><code>kubectl get deployments</code>：查看部署列表。</li>
<li><code>kubectl get all</code>：查看所有资源。</li>
</ul>
</li>
</ul>
</li>
<li><strong>查看资源详细信息</strong><ul>
<li><code>kubectl describe &lt;资源类型&gt; &lt;资源名称&gt;</code>：查看指定资源的详细信息。例如：<ul>
<li><code>kubectl describe pod </code>：查看 Pod 的详细信息。</li>
<li><code>kubectl describe node </code>：查看节点的详细信息。</li>
</ul>
</li>
</ul>
</li>
<li><strong>创建资源</strong><ul>
<li><code>kubectl create -f &lt;文件路径&gt;</code>：根据 YAML 文件创建资源。</li>
</ul>
</li>
<li><strong>删除资源</strong><ul>
<li><code>kubectl delete &lt;资源类型&gt; &lt;资源名称&gt;</code>：删除指定资源。例如：<ul>
<li><code>kubectl delete pod </code>：删除 Pod。</li>
<li><code>kubectl delete deployment </code>：删除部署。</li>
</ul>
</li>
<li><code>kubectl delete -f &lt;文件路径&gt;</code>：根据 YAML 文件删除资源。</li>
</ul>
</li>
</ul>
<h3 id="Pod-操作"><a href="#Pod-操作" class="headerlink" title="Pod 操作"></a>Pod 操作</h3><ul>
<li><strong>进入 Pod</strong><ul>
<li><code>kubectl exec -it  -- /bin/sh</code> 或 <code>kubectl exec -it  -- /bin/bash</code>：进入 Pod 的 Shell。</li>
</ul>
</li>
<li><strong>查看 Pod 日志</strong><ul>
<li><code>kubectl logs </code>：查看 Pod 的日志。</li>
<li><code>kubectl logs -f </code>：实时查看 Pod 的日志。</li>
</ul>
</li>
</ul>
<h3 id="部署操作"><a href="#部署操作" class="headerlink" title="部署操作"></a>部署操作</h3><ul>
<li><strong>更新部署</strong><ul>
<li><code>kubectl set image deployment/ &lt;容器名称&gt;=&lt;新镜像&gt;</code>：更新部署中的镜像。</li>
</ul>
</li>
<li><strong>查看部署状态</strong><ul>
<li><code>kubectl rollout status deployment/</code>：查看部署的更新状态。</li>
</ul>
</li>
</ul>
<h3 id="服务操作"><a href="#服务操作" class="headerlink" title="服务操作"></a>服务操作</h3><ul>
<li><strong>查看服务</strong><ul>
<li><code>kubectl get svc</code>：查看服务列表。</li>
</ul>
</li>
<li><strong>访问服务</strong><ul>
<li><code>kubectl port-forward svc/&lt;服务名称&gt; &lt;本地端口&gt;:&lt;服务端口&gt;</code>：将服务端口转发到本地端口。</li>
</ul>
</li>
</ul>
<h3 id="命名空间操作"><a href="#命名空间操作" class="headerlink" title="命名空间操作"></a>命名空间操作</h3><ul>
<li><strong>查看命名空间</strong><ul>
<li><code>kubectl get namespaces</code>：查看命名空间列表。</li>
</ul>
</li>
<li><strong>切换命名空间</strong><ul>
<li><code>kubectl config set-context --current --namespace=&lt;命名空间名称&gt;</code>：切换到指定的命名空间。</li>
</ul>
</li>
</ul>
<p>详情学习请参考<a class="link"   href="https://blog.csdn.net/2301_78183285/article/details/138656873" >[3]《K8S详解(5万字详细教程)》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="四-基于k8s的后端开发"><a href="#四-基于k8s的后端开发" class="headerlink" title="四. 基于k8s的后端开发"></a>四. 基于k8s的后端开发</h2><p>（尽请期待）</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><hr>
<p><a id="anchor1">[1]</a> <a class="link"   href="https://baike.baidu.com/reference/22864162/533aYdO6cr3_z3kATPOCyqilYyfCNt6uueHSULtzzqIP0XOpTIHmScY59dU67PliAA7Y_pdwZ5gWmKf4CExbtrNNLQ" >K8s简介<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/QsFavour/p/18626833" >[2]《适合新手的K8s完整部署教程》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/2301_78183285/article/details/138656873" >[3]《K8S详解(5万字详细教程)》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>以上文献</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Operation</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins教程及安装手册</title>
    <url>/2025/08/01/technology/operation/Jenkins/</url>
    <content><![CDATA[<h1 id="一-Jenkins介绍"><a href="#一-Jenkins介绍" class="headerlink" title="一. Jenkins介绍"></a>一. Jenkins介绍</h1><p>CI&#x2F;CD工具，可利用流水线对于代码持续集成并且自动测试。</p>
<p>什么是CI&#x2F;CD？大模型介绍（问就是懒）：</p>
<p> 1️⃣ <strong>CI（Continuous Integration，持续集成）</strong></p>
<ul>
<li><strong>核心目标</strong>：频繁将代码合并到主干，自动测试，<strong>尽早发现问题</strong>。</li>
<li><strong>典型流程</strong>：<ul>
<li>开发者提交代码 → 自动触发构建 → 运行单元&#x2F;集成测试 → 生成测试报告。</li>
</ul>
</li>
<li><strong>工具</strong>：GitHub Actions、GitLab CI、Jenkins、Azure DevOps。</li>
</ul>
<hr>
<h3 id="2️⃣-CD-有两种解释（根据上下文区分）："><a href="#2️⃣-CD-有两种解释（根据上下文区分）：" class="headerlink" title="2️⃣ CD 有两种解释（根据上下文区分）："></a>2️⃣ <strong>CD</strong> 有两种解释（根据上下文区分）：</h3><ul>
<li><strong>持续交付（Continuous Delivery）</strong><br>代码通过测试后，<strong>自动打包成可部署的版本</strong>（如Docker镜像），但需人工审批才能发布到生产环境。</li>
<li><strong>持续部署（Continuous Deployment）</strong><br>代码通过测试后，<strong>无需人工干预</strong>，自动部署到生产环境（如Kubernetes滚动更新）。</li>
</ul>
<hr>
<h3 id="🌰-生活化比喻"><a href="#🌰-生活化比喻" class="headerlink" title="🌰 生活化比喻"></a>🌰 <strong>生活化比喻</strong></h3><ul>
<li><strong>CI</strong>：像“自动质检流水线”，每次提交代码都检查是否“次品”。</li>
<li><strong>CD</strong>：像“自动发货”，质检通过后，直接发到用户手中（或先放到仓库等待人工确认）。</li>
</ul>
<h1 id="二-Jenkins安装"><a href="#二-Jenkins安装" class="headerlink" title="二. Jenkins安装"></a>二. Jenkins安装</h1><p>提供两种方法，一种是镜像部署，一种是手动部署。</p>
<h2 id="Ⅰ-镜像部署"><a href="#Ⅰ-镜像部署" class="headerlink" title="Ⅰ. 镜像部署"></a>Ⅰ. 镜像部署</h2><p>首先要安装配置好docker，详情可参考<a class="link"   href="https://www.sabthever.cn/2025/08/01/technology/operation/Docker/" >Docker安装和使用<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ol>
<li><p><strong>拉取Jenkins镜像</strong></p>
<p>拉取Jenkins官方带有LTS(长期支持)版本的镜像：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts-jdk11</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>创建挂在目录</strong></p>
<p>在宿主机上创建 Jenkins 的工作目录，并赋予权限：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/jenkins_data</span><br><span class="line"><span class="built_in">chmod</span> 777 /home/jenkins_data</span><br></pre></td></tr></table></figure></div>

<p>此目录将用于存储 Jenkins 的配置、插件和构建数据。</p>
</li>
<li><p><strong>启动 Jenkins 容器</strong></p>
<p>运行以下命令启动容器，并完成挂载：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name jenkins \</span><br><span class="line">-p 8080:8080 -p 50000:50000 \</span><br><span class="line">-v /home/jenkins_data:/var/jenkins_home \</span><br><span class="line">-v $(<span class="built_in">which</span> docker):/usr/bin/docker \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-u 0 --restart=on-failure:3 \</span><br><span class="line">jenkins/jenkins:lts-jdk11</span><br></pre></td></tr></table></figure></div>

<p><strong>参数说明：</strong></p>
<ul>
<li><code>-p</code>：映射端口，8080 为 Jenkins Web 界面，50000 为代理通信端口。</li>
<li><code>-v</code>：挂载数据卷，包括 Jenkins 工作目录和 Docker 环境。</li>
<li><code>-u 0</code>：以 root 用户运行，解决权限问题。</li>
<li><code>--restart=on-failure:3</code>：容器异常退出时自动重启，最多尝试 3 次。</li>
</ul>
</li>
<li><p><strong>获取初始管理员密码</strong></p>
<p>启动后，通过以下命令查看初始密码：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jenkins <span class="built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>配置插件下载加速</strong></p>
<p>为提高插件下载速度，可修改更新中心配置：</p>
<ul>
<li><p>进入容器：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jenkins /bin/bash</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改更新文件：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s|updates.jenkins-ci.org|mirrors.tuna.tsinghua.edu.cn/jenkins|g&#x27;</span> /var/jenkins_home/updates/default.json</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>exit</code>推出容器后重启容器：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart jenkins</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
<h2 id="Ⅱ-手动部署"><a href="#Ⅱ-手动部署" class="headerlink" title="Ⅱ. 手动部署"></a>Ⅱ. 手动部署</h2><p>手动部署要先安装好JDK，详细安装方式请参考<a class="link"   href="https://www.sabthever.cn/2025/08/01/technology/operation/JDK/" >JDK下载（绿色版)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。还有git、maven自己都要下载。</p>
<blockquote>
<p>太懒待写 或者参考文章<a class="link"   href="https://cloud.tencent.com/developer/article/2085003" >Jenkins教程(自动化部署)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><sup>[1]</sup></p>
</blockquote>
<h1 id="三-Jenkins初始化"><a href="#三-Jenkins初始化" class="headerlink" title="三. Jenkins初始化"></a>三. Jenkins初始化</h1><ol>
<li><p>用<code>http://ip:port</code>打开jenkins，ip是jenkins所在服务器ip，port是之前配置的端口。</p>
<p>然后把安装姐u但保存的初始密码填入下一步</p>
</li>
</ol>
<p><a class="link"   href="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/" >https://sabthever.github.io/Pictures1/Blog_Base_Resouces/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/image-20250801132407668.png"
                      alt="image-20250801132407668"
                ></p>
<ol start="2">
<li><p>安装插件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250801132758477.png"
                      alt="image-20250801132758477"
                ></p>
</li>
<li><p>安装好后出现管理员用户创建界面，可以创建一个，也可以点击下面的<code>使用admin账号继续</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250801133826458.png"
                      alt="image-20250801133826458"
                ></p>
</li>
<li><p>配置地址</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250801134049945.png"
                      alt="image-20250801134049945"
                ></p>
</li>
<li><p>进入主界面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250801134247896.png"
                      alt="image-20250801134247896"
                ></p>
</li>
<li><p>Jenkins中配置JDK路径</p>
<p>Dashboard-&gt;系统管理-&gt;全局工具配置-&gt;JDK-&gt;新增JDK</p>
<p>其中JAVA_HOME要与之前配置的JDK名一致。用docker配置的话位置默认为<code>/opt/java/openjdk</code>，自己安装Jenkins的话位置看自己配置的JDK。<br>下面普遍用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250801162703107.png"
                      alt="image-20250801162703107"
                ></p>
<p>演示安装Maven。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250802121819396.png"
                      alt="image-20250802121819396"
                ></p>
</li>
<li><p>如果要部署Maven项目要下载Maven插件</p>
<p>Dashboard-&gt;系统管理-&gt;插件管理-&gt;Available plugins</p>
<p>搜索<code>Maven Integration</code>安装插件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250802122039553.png"
                      alt="image-20250802122039553"
                ></p>
<p><a class="link"   href="http://192.168.179.180:8080/restart%E9%87%8D%E5%90%AFJenkins%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB**%E6%96%B0%E5%BB%BA**%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0Maven%E9%A1%B9%E7%9B%AE%E9%80%89%E9%A1%B9%E3%80%82" >http://192.168.179.180:8080/restart重启Jenkins，然后点击**新建**就能看到Maven项目选项。<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250802122320798.png"
                      alt="image-20250802122320798"
                ></p>
</li>
<li><p>Git集成</p>
<p>如果不用容器，需要先在环境中安装git。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ yum install git -y</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure></div>

<p>看一下Dashboard-&gt;系统管理-&gt;插件管理-&gt;Available plugins</p>
<p>是否有已经安装好的git插件，没有的话，需要在可选插件中去下载。</p>
<p>在Dashboard-&gt;系统管理-&gt;全局工具配置-&gt;git中 选取默认的内容</p>
</li>
</ol>
<h1 id="四-Jenkins的使用"><a href="#四-Jenkins的使用" class="headerlink" title="四. Jenkins的使用"></a>四. Jenkins的使用</h1><h2 id="一-配置凭证-1"><a href="#一-配置凭证-1" class="headerlink" title="(一) 配置凭证[1]"></a>(一) 配置凭证<sup>[1]</sup></h2><p>该部分引用文章1。凭据就是用来存储需要密文保护的数据库密码、Gitee密码信息、Docker私有仓库密码等，以便 Jenkins可以和这些第三方的应用进行交互。</p>
<ol>
<li><p>凭证插件安装Credentials Binding</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/548c1c49121f471e2aef530554189ceb.png"
                      alt="img"
                ></p>
<p>该插件默认在一开始就会被安装，安装后在<code>jenkins-》系统管理-》安全</code>栏目会出现<strong>Manage Credentials</strong>选项，若没有需要安装插件并重启。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/35585cf199ec8cd88f1b70c3d945ef36.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/7fc6166503eb0c1e227e79ad674779e8.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/0978f7a8396752dbf473563283e0eb8b.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/7c004f94022401f9beddf1b9d3c2b536.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://ask.qcloudimg.com/http-save/yehe-8223537/36ef4e576317fb4d63be9ccab62dddef.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/599d5618e51977fdc3f33b964d43d962.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/8e751747c0ed12ad5971a0e33de6786f.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://ask.qcloudimg.com/http-save/yehe-8223537/7ad266498a5e69bc75131de5250cb3df.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://ask.qcloudimg.com/http-save/yehe-8223537/d7026ca2c36567804165e557f8a28946.png"
                      alt="img"
                ></p>
</li>
</ol>
<h2 id="二-ssh免密登录"><a href="#二-ssh免密登录" class="headerlink" title="(二) ssh免密登录"></a>(二) ssh免密登录</h2><p>这个后面写脚本可能会用到，因为Jenkins很多时候是部署在独立服务器上的，build过程资源消耗较大，所以需要把打好的包送到其他服务器上运行。</p>
<p>这个配置网上挺多的，自己找找，或者根据这个改改 <a class="link"   href="https://blog.csdn.net/huangjin0507/article/details/85264400" >CentOS7配置单向免密码登陆及不生效问题解决<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="三"><a href="#三" class="headerlink" title="(三)"></a>(三)</h2><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a class="link"   href="https://cloud.tencent.com/developer/article/2085003" >[1] Jenkins教程(自动化部署)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Operation</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全相关竞赛比赛</title>
    <url>/2024/12/31/technology/security/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E7%AB%9E%E8%B5%9B%E6%AF%94%E8%B5%9B/</url>
    <content><![CDATA[<p>转载文章，网络安全相关竞赛比赛</p>
<h2 id="赛事日历（包含全国所有网络安全竞赛）"><a href="#赛事日历（包含全国所有网络安全竞赛）" class="headerlink" title="赛事日历（包含全国所有网络安全竞赛）"></a>赛事日历（包含全国所有网络安全竞赛）</h2><p><a class="link"   href="https://datacon.qianxin.com/competition/competitions" >https://datacon.qianxin.com/competition/competitions<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.ichunqiu.com/competition/all" >https://www.ichunqiu.com/competition/all<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>在线CTF靶场<br><a class="link"   href="https://wiki.bafangwy.com/doc/207/" >https://wiki.bafangwy.com/doc/207/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="全国网络安全竞赛"><a href="#全国网络安全竞赛" class="headerlink" title="全国网络安全竞赛"></a>全国网络安全竞赛</h2><table style="margin: auto; text-align: center; word-break: break-all;">
    <tr>
        <th>名称</th>
        <th>链接</th>
    </tr>
    <tr>
        <td>全国大学生信息安全竞赛</td>
        <td><a class="link"   href="http://www.ciscn.cn/"  target="_blank">http://www.ciscn.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>信息安全与对抗技术竞赛（Information Security and Countermeasures Contest，简称ISCC）</td>
        <td><a class="link"   href="https://www.isclab.org.cn/iscc_0/"  target="_blank">https://www.isclab.org.cn/iscc_0/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>网鼎杯（公安部）</td>
        <td><a class="link"   href="https://www.wangdingcup.com/"  target="_blank">https://www.wangdingcup.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>强网杯（全国网络安全挑战赛）</td>
        <td><a class="link"   href="https://www.qiangwangbei.com/"  target="_blank">https://www.qiangwangbei.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>奇安信 蓝帽杯（全国大学生网络安全技能大赛）</td>
        <td><a class="link"   href="https://www.qianxin.com/bluehatcup/2023"  target="_blank">https://www.qianxin.com/bluehatcup/2023<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>陇剑杯（公安部）</td>
        <td><a class="link"   href="http://www.longjiancup.cn"  target="_blank">www.longjiancup.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>第二届全国技能大赛-网络安全项目</td>
        <td><a class="link"   href="http://www.mohrss.gov.cn/SYrlzyhshbzb/ztzl/zhrmghgdejzyjnds/qjgs/202309/t20230925_506897.html"  target="_blank">http://www.mohrss.gov.cn/SYrlzyhshbzb/ztzl/zhrmghgdejzyjnds/qjgs/202309/t20230925_506897.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
</table>

<h2 id="省级网络安全竞赛"><a href="#省级网络安全竞赛" class="headerlink" title="省级网络安全竞赛"></a>省级网络安全竞赛</h2><p>湖湘杯<br>湖南省委网信办联合省教育厅、省广播电视局、省政务管理服务局、省通信管理局、长沙市人民政府等6家单位共同主办<br>（往期报名信息）<br><a class="link"   href="http://gxt.hunan.gov.cn/hnxcy/xcyxwzx/xcytzgg/202209/t20220921_29011688.html" >http://gxt.hunan.gov.cn/hnxcy/xcyxwzx/xcytzgg/202209/t20220921_29011688.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>湖南省“网安湘军杯”</p>
<p>吉林省祥云杯<br><a class="link"   href="https://xiangyuncup.ichunqiu.com/" >https://xiangyuncup.ichunqiu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>郑州市绿城杯</p>
<p>浙江省大学生网络与信息安全竞赛</p>
<h2 id="企业级"><a href="#企业级" class="headerlink" title="企业级"></a>企业级</h2><p>全国网络安全行业职业技能大赛<br><a class="link"   href="https://inspc.org.cn/" >https://inspc.org.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>教育部认可的大学生学科竞赛网站链接（2023版）<br><a class="link"   href="http://cxcy.usst.edu.cn/2023/0418/c10804a291961/page.htm" >http://cxcy.usst.edu.cn/2023/0418/c10804a291961/page.htm<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>转载自：<a class="link"   href="https://wiki.bafangwy.com/doc/233/" >https://wiki.bafangwy.com/doc/233/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Security</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>安全</tag>
        <tag>比赛</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>

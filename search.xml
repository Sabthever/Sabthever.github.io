<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分享：Dasha Taran</title>
    <url>/2025/01/02/personal/Dasha/</url>
    <content><![CDATA[<p>　　Dasha是我超喜欢的一个博主，初中时就看起了，分享一下她美照。</p>
<p>　　这张图是我最喜欢的一张。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/32.jpg"
                      style="zoom: 70%;" 
                >
</br>

<p>　　达莎·塔兰 （Dasha Taran），1999年10月12日出生于俄罗斯的沃罗涅日州，俄罗斯籍模特和美妆博主，拥有乌克兰与俄罗斯双重血统。日常分享有关化妆技巧、教程、日常生活和旅行的视频。</p>
<p>　　让她出名的照片是这张。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/21.jpg"
                      style="zoom: 70%;" 
                >
</br>

<p>　　但是我不是特别喜欢这个风格的。下面两张我也比较喜欢。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/29.jpg"
                      style="zoom: 70%;" 
                >
</br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/30.jpg"
                      style="zoom: 100%;" 
                >
</br>

<p>　　再分享一些美图，当然我也直接放在相册里了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/3.jpg"
                      style="zoom: 70%;" 
                >
</br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/4.jpg"
                      style="zoom: 70%;" 
                >
</br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/PhotoShared/33.png"
                      style="zoom: 70%;" 
                >
</br>

<p>　　她还有很多其他风格的图片，大家可以自己去搜一下。</p>
<p>　　另外在附上她的一些社交媒体。</p>

  <div class="note p-4 mb-4 rounded-small pink icon-padding">
    <i class="note-icon fa-solid fa-brands fa-bilibili"></i><p><strong>b站：<a class="link"   href="https://space.bilibili.com/1120258151?spm_id_from=333.337.0.0" >https://space.bilibili.com/1120258151?spm_id_from=333.337.0.0<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong></p>

  </div>


  <div class="note p-4 mb-4 rounded-small blue icon-padding">
    <i class="note-icon fa-solid fa-brands fa-instagram"></i><p><strong>ins：@tarankaa</strong></p>

  </div>


  <div class="note p-4 mb-4 rounded-small red icon-padding">
    <i class="note-icon fa-solid fa-brands fa-youtube"></i><p><strong>ins：<a class="link"   href="https://www.youtube.com/@DashaTaranbaby" >https://www.youtube.com/@DashaTaranbaby<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong></p>

  </div><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>Beauty</tag>
        <tag>Picture</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2024/12/18/personal/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<h5 id="第一次搭博客的萌新，涩涩发抖"><a href="#第一次搭博客的萌新，涩涩发抖" class="headerlink" title="第一次搭博客的萌新，涩涩发抖"></a>第一次搭博客的萌新，涩涩发抖</h5></blockquote>
<!-- ![图片找不到了](https://inews.gtimg.com/om_bt/OpT81bdKWb3-3ARQOP-5BWVykiPP-9Eio3yBW26s_1q64AA/641 "/doge") -->

<p><img src="/images/641.jpg" alt="/doge 图片找不到了" title="/doge"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%A4%B4%E5%83%8F.jpg" alt="妞妞 图片找不到了" title="妞妞"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/2.jpg" alt="哭哭 图片找不到了" title="哭哭"></p>
<blockquote>
<h5 id="公式测试"><a href="#公式测试" class="headerlink" title="公式测试"></a>公式测试</h5></blockquote>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="25.832ex" height="5.018ex" role="img" focusable="false" viewBox="0 -1509.9 11417.6 2217.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mfrac" transform="translate(907,0)"><g data-mml-node="mi" transform="translate(400.5,676)"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><rect width="1127" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2274,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(3202.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4258.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5036.6,0)"><g data-mml-node="msup" transform="translate(384.2,676)"><g data-mml-node="mi"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mn" transform="translate(646.1,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(6854.6,0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mn" transform="translate(866,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(8124.1,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(8997.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9997.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(10766.6,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g></g></g></svg></mjx-container></p>
<blockquote>
<h6 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h6></blockquote>
<p><strong>本站所有内容完全免费！不得将本站内容用于商业或者非法用途。</strong></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>Picture</tag>
        <tag>Thought</tag>
      </tags>
  </entry>
  <entry>
    <title>API调用(webhook/sdk)</title>
    <url>/2025/02/17/technology/API%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>　　主要是如何去用webhook或者sdk去进行相应API的访问，包括了使用python、Java sdk以及Python、Java webhook进行相应的访问。</p>
<p>　　基本上所有的API调用都可以分为使用SDK和Url两种，这边以飞书开发作为案例。</p>
<p>　　飞书应用开发，个人版是无法使用的。公司开发相应的程序又需要权限，可以自己建立一个公司账户，虽然不经过认证，但也能使用相应的开发。</p>
<p>　　飞书应用主要有四种，网页版应用、小程序、机器人、工作台组件，还可以对一些开发的内部网站使用飞书进行登录。</p>
<p>　　具体开发的方式详见<a class="link"   href="https://open.feishu.cn/document/home/index" >飞书开放平台开发文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，这里主要讲的是如何对webhook和飞书的sdk进行调用。</p>
<h1 id="飞书API的调用"><a href="#飞书API的调用" class="headerlink" title="飞书API的调用"></a>飞书API的调用</h1><p>　　在调用相应的API前，要在开发者后台中创建企业自建应用，然后再开发文档的右上角有<strong>API调试台</strong>，进入后有相关的例子，以及参数的配置，只不过没有调用WebHook的例子，我这边也加上了相应的例子。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/image-20250214141111174.png"
                      alt="image-20250214141111174"
                ></p>
<p>　　此机器人最终会发送消息，效果图如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/image-20250217143650848.png"
                      alt="image-20250217143650848"
                ></p>
<h2 id="一-Webhook"><a href="#一-Webhook" class="headerlink" title="一. Webhook"></a>一. Webhook</h2><p>　　也就是使用<code>url</code>发送数据包的方式去进行相应的访问，其中我们展示三种方式，分别是cmd中使用<code>curl</code>，Python、Java制作数据包。</p>
<p>　　现在以飞书机器人发送消息API的调用作为示例进行演示，注意此样例需要获取相应的token和user_id，此样例中的两个参数是无法实际使用的。</p>
<p>　　下面是三种访问的代码：</p>
<ol>
<li><h3 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a><strong>Curl</strong></h3><p>此方法需要提前安装好<code>curl</code>命令。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X POST <span class="string">&#x27;https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=user_id&#x27;</span> \</span><br><span class="line">-H <span class="string">&#x27;Authorization: Bearer t-g1042h8JMSNCGICKKETF&#x27;</span> \</span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">	&quot;content&quot;: &quot;&#123;\&quot;text\&quot;:\&quot;2-17\&quot;&#125;&quot;,</span></span><br><span class="line"><span class="string">	&quot;msg_type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">	&quot;receive_id&quot;: &quot;abcd1234&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="Python-Web"><a href="#Python-Web" class="headerlink" title="Python Web"></a><strong>Python</strong> Web</h3><p>此方法需要先安装requests包，这个包是可以发送Http请求的。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求的URL</span></span><br><span class="line">url = <span class="string">&#x27;https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=user_id&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer t-g1042h8JMSNCGICKKETF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: <span class="string">&quot;&#123;\&quot;text\&quot;:\&quot;2-17\&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;msg_type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">    <span class="string">&quot;receive_id&quot;</span>: <span class="string">&quot;abcd1234&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送POST请求</span></span><br><span class="line">response = requests.post(url, headers=headers, json=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印响应状态码和内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Status Code:&quot;</span>, response.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Response Content:&quot;</span>, response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


</li>
<li><h3 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a><strong>Java Web</strong></h3><p>此方法使用的是<code>java.net.HttpURLConnection</code>数据包</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeishuPostExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=user_id&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZATION</span> <span class="operator">=</span> <span class="string">&quot;Bearer t-g1042h8JMSNCGICKKETF&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONTENT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Create and configure the connection</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(URL);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Authorization&quot;</span>, AUTHORIZATION);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, CONTENT_TYPE);</span><br><span class="line">            connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Write the request body</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonBody</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\&quot;content\&quot;: \&quot;&#123;\\\&quot;text\\\&quot;:\\\&quot;2-17\\\&quot;&#125;\&quot;,&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\&quot;msg_type\&quot;: \&quot;text\&quot;,&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\&quot;receive_id\&quot;: \&quot;abcd1234\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> connection.getOutputStream()) &#123;</span><br><span class="line">                <span class="type">byte</span>[] input = jsonBody.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                os.write(input, <span class="number">0</span>, input.length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the response</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), <span class="string">&quot;UTF-8&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                String responseLine;</span><br><span class="line">                <span class="keyword">while</span> ((responseLine = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    response.append(responseLine.trim());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;Response: &quot;</span> + response.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Java11+中加入了新的特性，可以使用<code>HttpClient</code>进行访问，或者使用<code>OkHttp</code>库。如果要用Springboot中调用相关方法，要注意是否要注册为Bean，具体可参考博客：。</p>
</li>
</ol>
<h2 id="二-SDK"><a href="#二-SDK" class="headerlink" title="二. SDK"></a>二. SDK</h2><p>　　也就是使用飞书官方实现封装号的包进行访问分别使用，Python、Java SDK来给出样例</p>
<p>　　现在以飞书机器人发送消息API的调用作为示例进行演示，注意此样例需要获取相应的app_id、app_secret和user_id，此样例中的两个参数是无法实际使用的。</p>
<p>　　下面是三种访问的代码：</p>
<ol>
<li><h3 id="Python-SDK"><a href="#Python-SDK" class="headerlink" title="Python SDK"></a>Python SDK</h3><p>需要先导入Python的包，包括<code>lark_oapi</code>和</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lark_oapi <span class="keyword">as</span> lark</span><br><span class="line"><span class="keyword">from</span> lark_oapi.api.im.v1 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SDK 使用说明: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/server-side-sdk/python--sdk/preparations-before-development</span></span><br><span class="line"><span class="comment"># 以下示例代码默认根据文档示例值填充，如果存在代码问题，请在 API 调试台填上相关必要参数后再复制代码使用</span></span><br><span class="line"><span class="comment"># 复制该 Demo 后, 需要将 &quot;YOUR_APP_ID&quot;, &quot;YOUR_APP_SECRET&quot; 替换为自己应用的 APP_ID, APP_SECRET.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建client</span></span><br><span class="line">    client = lark.Client.builder() \</span><br><span class="line">        .app_id(<span class="string">&quot;YOUR_APP_ID&quot;</span>) \</span><br><span class="line">        .app_secret(<span class="string">&quot;YOUR_APP_SECRET&quot;</span>) \</span><br><span class="line">        .log_level(lark.LogLevel.DEBUG) \</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造请求对象</span></span><br><span class="line">    request: CreateMessageRequest = CreateMessageRequest.builder() \</span><br><span class="line">        .receive_id_type(<span class="string">&quot;user_id&quot;</span>) \</span><br><span class="line">        .request_body(CreateMessageRequestBody.builder()</span><br><span class="line">            .receive_id(<span class="string">&quot;789d7b34&quot;</span>)</span><br><span class="line">            .msg_type(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">            .content(<span class="string">&quot;&#123;\&quot;text\&quot;:\&quot;2-17\&quot;&#125;&quot;</span>)</span><br><span class="line">            .build()) \</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发起请求</span></span><br><span class="line">    response: CreateMessageResponse = client.im.v1.message.create(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理失败返回</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> response.success():</span><br><span class="line">        lark.logger.error(</span><br><span class="line">            <span class="string">f&quot;client.im.v1.message.create failed, code: <span class="subst">&#123;response.code&#125;</span>, msg: <span class="subst">&#123;response.msg&#125;</span>, log_id: <span class="subst">&#123;response.get_log_id()&#125;</span>, resp: \n<span class="subst">&#123;json.dumps(json.loads(response.raw.content), indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理业务结果</span></span><br><span class="line">    lark.logger.info(lark.JSON.marshal(response.data, indent=<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="Java-SDK"><a href="#Java-SDK" class="headerlink" title="Java SDK"></a>Java SDK</h3><p>此方法事先要<code>oapi-sdk</code>依赖：</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.larksuite.oapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oapi-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feishu&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>$&#123;feishu&#125;</code>要导入你需要的版本号，具体可以去<a class="link"   href="https://mvnrepository.com/artifact/com.larksuite.oapi/oapi-sdk" >maven的网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>看看。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.Client;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.core.utils.Jsons;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.service.im.v1.model.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.core.request.RequestOptions;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SDK 使用文档：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/server-side-sdk/java-sdk-guide/preparations</span></span><br><span class="line"><span class="comment">// 复制该 Demo 后, 需要将 &quot;YOUR_APP_ID&quot;, &quot;YOUR_APP_SECRET&quot; 替换为自己应用的 APP_ID, APP_SECRET.</span></span><br><span class="line"><span class="comment">// 以下示例代码默认根据文档示例值填充，如果存在代码问题，请在 API 调试台填上相关必要参数后再复制代码使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateMessageSample</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 构建client</span></span><br><span class="line">		<span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> Client.newBuilder(<span class="string">&quot;YOUR_APP_ID&quot;</span>, <span class="string">&quot;YOUR_APP_SECRET&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建请求对象</span></span><br><span class="line">		<span class="type">CreateMessageReq</span> <span class="variable">req</span> <span class="operator">=</span> CreateMessageReq.newBuilder()</span><br><span class="line">			.receiveIdType(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line">			.createMessageReqBody(CreateMessageReqBody.newBuilder()</span><br><span class="line">				.receiveId(<span class="string">&quot;abcd1234&quot;</span>)</span><br><span class="line">				.msgType(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">				.content(<span class="string">&quot;&#123;\&quot;text\&quot;:\&quot;2-17\&quot;&#125;&quot;</span>)</span><br><span class="line">				.build())</span><br><span class="line">			.build();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 发起请求</span></span><br><span class="line">		<span class="type">CreateMessageResp</span> <span class="variable">resp</span> <span class="operator">=</span> client.im().v1().message().create(req);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 处理服务端错误</span></span><br><span class="line">		<span class="keyword">if</span>(!resp.success()) &#123;</span><br><span class="line">			System.out.println(String.format(<span class="string">&quot;code:%s,msg:%s,reqId:%s, resp:%s&quot;</span>,</span><br><span class="line">				resp.getCode(), resp.getMsg(), resp.getRequestId(), Jsons.createGSON(<span class="literal">true</span>, <span class="literal">false</span>).toJson(JsonParser.parseString(<span class="keyword">new</span> <span class="title class_">String</span>(resp.getRawResponse().getBody(), StandardCharsets.UTF_8)))));</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 业务数据处理</span></span><br><span class="line">		System.out.println(Jsons.DEFAULT.toJson(resp.getData()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="三-其它"><a href="#三-其它" class="headerlink" title="三. 其它"></a>三. 其它</h2><p>　　文档中还有很多接口的使用以及更多的案例，具体可以参考<a class="link"   href="https://open.feishu.cn/document/home/index" >飞书开放平台开发文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>SDK</tag>
        <tag>Webhook</tag>
        <tag>Python</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Sabthever的博客搭建</title>
    <url>/2024/12/18/technology/blog/Welcome/</url>
    <content><![CDATA[<h2 id="Sabthever搭建的第一个博客"><a href="#Sabthever搭建的第一个博客" class="headerlink" title="Sabthever搭建的第一个博客"></a>Sabthever搭建的第一个博客</h2><ul>
<li><p>博客地址</p>
<p>  <a class="link"   href="https://www.sabthever.online/" >https://www.sabthever.online<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>  <a class="link"   href="https://sabthever.github.io/" >https://sabthever.github.io/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>部署地址</p>
<p>  <a class="link"   href="https://github.com/Sabthever/Sabthever.github.io" >https://github.com/Sabthever/Sabthever.github.io<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><blockquote>
<h5 id="搭建架构"><a href="#搭建架构" class="headerlink" title="搭建架构"></a>搭建架构</h5></blockquote>
<ul>
<li><p>hexo + github</p>
</li>
<li><p><a class="link"   href="https://hexo.io/docs/" >hexo文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="https://www.github.com/" >github官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<blockquote>
<h5 id="网站搭建参考文献"><a href="#网站搭建参考文献" class="headerlink" title="网站搭建参考文献"></a>网站搭建参考文献</h5></blockquote>
<p><a class="link"   href="https://blog.csdn.net/weixin_43883917/article/details/143885553" >利用 GitHub 和 Hexo 搭建个人博客【保姆教程】<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<h5 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h5></blockquote>
<ul>
<li><p><a class="link"   href="https://github.com/EvanNotFound/hexo-theme-redefine" >正在使用的主题<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="https://redefine-docs.ohevan.com/zh/introduction" >使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>这个作者做的<strong>超级好</strong></p>
</li>
</ul>
<h2 id="How-to-operate"><a href="#How-to-operate" class="headerlink" title="How to operate"></a>How to operate</h2><blockquote>
<h5 id="Hexo文档地址"><a href="#Hexo文档地址" class="headerlink" title="Hexo文档地址"></a>Hexo文档地址</h5></blockquote>
<ul>
<li><p>英文地址：<a class="link"   href="https://hexo.io/docs/" >https://hexo.io/docs/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>中文地址：<a class="link"   href="https://hexo.io/zh-cn/docs/" >https://hexo.io/zh-cn/docs/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<blockquote>
<h5 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h5></blockquote>
<ul>
<li><code>hexo s[erver]</code></li>
</ul>
<blockquote>
<h5 id="发布与更新"><a href="#发布与更新" class="headerlink" title="发布与更新"></a>发布与更新</h5></blockquote>
<ul>
<li><p><code>hexo clean</code>: 不需要每次都执行，只有在遇到生成问题或更改了主题&#x2F;配置文件时使用。</p>
</li>
<li><p><code>hexo g[enerate]</code>: 每次更新内容后都需要执行，以生成最新的静态文件。</p>
</li>
<li><p><code>hexo d[eploy]</code>: 如果需要发布到远程服务器，执行 hexo d 进行部署。</p>
</li>
</ul>
<blockquote>
<h5 id="修改网址"><a href="#修改网址" class="headerlink" title="修改网址"></a>修改网址</h5></blockquote>
<ul>
<li><p>文件：<code>_config.yml</code></p>
</li>
<li><p>字段：修改<code>url</code></p>
</li>
</ul>
<blockquote>
<h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5></blockquote>
<ul>
<li><p>在themes中从<a class="link"   href="https://hexo.io/themes/" >官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>找喜欢的主题，并且git下来</p>
</li>
<li><p>然后再<code>_config.yml</code>中修改theme的名字，和themes&#x2F;下的主题文件夹名保持一致</p>
</li>
</ul>
<blockquote>
<h5 id="建立新的帖子"><a href="#建立新的帖子" class="headerlink" title="建立新的帖子"></a>建立新的帖子</h5></blockquote>
<ul>
<li><p>建立：</p>
<p>  <code>hexo n[ew] &quot;帖子名称&quot;</code></p>
</li>
</ul>
<blockquote>
<h5 id="子模块的使用"><a href="#子模块的使用" class="headerlink" title="子模块的使用"></a>子模块的使用</h5></blockquote>
<ul>
<li><p>缘由</p>
<p>  我的<code>themes/</code>中的theme是从别人的仓库中拿下来的，可以建立<code>fork</code></p>
</li>
<li><p>初期使用</p>
  <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fork的方法自己找找，这里没写，就一条命令</span></span><br><span class="line"><span class="built_in">cd</span> themes/my-forked-repo</span><br><span class="line"><span class="comment"># 自己的仓库</span></span><br><span class="line">git remote set-url origin https://github.com/Sabthever/myrepo.git</span><br><span class="line"><span class="comment"># 别人的原始仓库</span></span><br><span class="line">git remote add upstream https://github.com/original-username/original-repo.git</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>后期使用</p>
  <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从别人的url获取更新</span></span><br><span class="line">git fetch upstream</span><br><span class="line"><span class="comment"># 这会获取原始仓库的所有更新。如果你想将这些更新合并到你本地的 main 分支中，可以运行：</span></span><br><span class="line">git merge upstream/main</span><br><span class="line"><span class="comment"># 或者，如果你希望直接把 upstream/main 的更改应用到你的本地分支，可以使用：</span></span><br><span class="line">git pull upstream main</span><br><span class="line"><span class="comment"># 然后可以回到自己文件夹的位置</span></span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>后面所有<code>theme/other-repo</code>中的修改，都要现在子模块里<code>commit，push</code>一下，再到自己的里面<code>commit，push</code>一下</p>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>飞书应用开发初解</title>
    <url>/2025/02/20/technology/%E9%A3%9E%E4%B9%A6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%88%9D%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　飞书是一款企业常用的协作管理平台，集通讯、文档、会议、审批等等一体化，由字节跳动于2017年开发完成。使用飞书产品的企业，都有他们自己的企业号。</p>
<p>　　而对于这些企业而言，飞书不仅仅提供了上述的功能，还能做二次开发，也就是说能够进一步增强飞书的功能，包括了通讯录、云文档、审批、机器人、小程序等等。同时也能够调用飞书相应的API，给公司做控制访问管理。具体引用文档上的一张图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/136008599535291e9ea5fe64b72b5766_yFkWHgUdcu.png"
                     
                ></p>
<p>　　现在我来根据<a class="link"   href="https://open.feishu.cn/document/home/index" >飞书开发文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>做一些简单介绍，链接也放在这里：<a class="link"   href="https://open.feishu.cn/document/home/index%E3%80%82" >https://open.feishu.cn/document/home/index。<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="开放平台介绍"><a href="#开放平台介绍" class="headerlink" title="开放平台介绍"></a>开放平台介绍</h2><p>　　该平台主要2种<strong>应用类型</strong>：企业自建应用、应用商店应用。前者是企业内部使用的，后者是所有飞书使用者都可以去使用的。这边飞书开发都是讲的前者，做企业内部的飞书开发。</p>
<p>　　这些应用中，主要有4种<strong>应用形态</strong>：小程序（不推荐）、网页、机器人、工作台小组件。</p>
<p>　　相应应用都是可以调用飞书的<strong>API</strong>的，使用示例可以在API调试台中看到，调用方式主要分为webhook和sdk。webhook就是用curl的方式去调用，除了命令行使用，还可以用各自语言中直接发送Http数据包的方式去调用。sdk的话是飞书自己开发的封装好的包，可以直接传入相关参数进行调用。两者的区别和调用方式可以参考<a class="link"   href="https://www.sabthever.online/2025/02/17/technology/API%E8%B0%83%E7%94%A8/" >API调用(webhook&#x2F;sdk)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="应用鉴权"><a href="#应用鉴权" class="headerlink" title="应用鉴权"></a>应用鉴权</h2><ul>
<li><strong>访问凭证</strong>（access_token）：用于识别应用在访问飞书时使用的虚拟身份，代表应用从平台侧获取的授权。用于验证调用方身份、确保调用方具有执行操作所需要的权限。详情参考 <a class="link"   href="https://open.feishu.cn/document/ukTMukTMukTM/uMTNz4yM1MjLzUzM" >应用访问凭证<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
<li><strong>API 权限</strong>（Scope）：定义应用能够调用哪些飞书开放能力接口（OpenAPI）。API <strong>接口权限是以应用为维度授予的</strong>，每个应用的接口权限都是独立存在的，若多个应用需要调用同一个接口，那么每个应用都要添加对应的接口权限。详情参考 <a class="link"   href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN" >应用 API 权限<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
<li><strong>可用范围</strong>：定义哪些用户可以在飞书中看到和使用该应用，详情参考 <a class="link"   href="https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability" >应用可用范围<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/531a2230822e4871809e1b385c5f02c6~tplv-goo7wpa0wc-image.png"
                     
                ></p>
<h2 id="不同类型的用户ID"><a href="#不同类型的用户ID" class="headerlink" title="不同类型的用户ID"></a><a class="link"   href="https://open.feishu.cn/document/home/user-identity-introduction/introduction" >不同类型的用户ID<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><p>　　飞书中提供了5个不同的用户ID，开发者应该根据情况选用合适的ID。</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>定义</th>
<th>生成方式</th>
<th>注意事项</th>
</tr>
</thead>
<tbody><tr>
<td>lark_id</td>
<td>全局 ID，物理用户身份。刚完成注册的飞书用户属于个人身份，你可以在飞书 App 上看到<code>飞书个人版</code>的标识。</td>
<td>当一个用户用手机号在飞书注册登录之后，就会在飞书中生成一个全局 lark_id。</td>
<td>lark_id 对开发者或普通飞书用户来说不可见，开发者也无需关注。</td>
</tr>
<tr>
<td>user_id</td>
<td>用户在企业或组织内的身份。 同一个飞书用户在企业 A 和企业 B 内的 user_id 是不同的。<br />user_id 也称为 employee_id，这两个概念在大多数情况下完全对等（除飞书招聘业务）。</td>
<td>通过调用<a class="link"   href="https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create" >创建用户<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>接口在员工入职时直接指定其 user_id。也可以由企业管理员在添加用户时指定。<br />推荐企业使用邮箱前缀、工号或者手机号等有意义的字段作为员工的 user_id，这便于和企业既有的业务系统在用户身份上保持一致。<br />如果在调用创建用户接口时没有指定 user_id 字段，则系统会随机生成一个字符串作为该用户的 user_id。</td>
<td>一个飞书用户可以同时加入多个企业或组织，其在每个企业或组织内的身份是逻辑独立的，并且在数据层面相互隔离。<br/>用户存在“离职再入职”的场景，合理设计 user_id 的规则有利于维护账号体系。</td>
</tr>
<tr>
<td>open_id</td>
<td>用户在应用内的身份。 同一个 user_id 在不同应用中的 open_id 不同，其值统一以 ou_ 为前缀，如<code>ou_c99c5f35d542efc7ee492afe11af19ef</code>。</td>
<td>open_id 是用户在特定应用下才存在的身份标识，所以其生成是由用户在第一次启用该应用时由系统赋值生成的，对开发者来说这都是「只读」字段。</td>
<td><strong>不要在跨应用的数据通信过程中使用 open_id</strong>。一个常见的的错误用法是，用应用 A 的鉴权凭证获取到了用户 open_id 之后，在应用 B 中直接使用，这种情况会直接提示出现跨应用操作的错误信息。</td>
</tr>
<tr>
<td>union_id</td>
<td>用户在同一应用服务商提供的多个应用间的统一身份。  让应用开发商可以把同个用户(以 user_id 为标识）在多个应用中的身份关联起来。在需要跨应用做用户 ID 关联的场景中，开发者可以使用飞书开放平台提供的 union_id。union_id 以 on_ 为前缀，如 <code>on_cad4860e7af114fb4ff6c5d496d1dd76</code> 。</td>
<td>union_id 都是用户在特定应用下才存在的身份标识，所以其生成是由用户在第一次启用该应用时由系统赋值生成的，对开发者来说这都是「只读」字段。</td>
<td>应用开发商是组织概念，而非开发者维度的概念。</td>
</tr>
</tbody></table>
<h2 id="不同类型的token"><a href="#不同类型的token" class="headerlink" title="不同类型的token"></a><a class="link"   href="https://open.feishu.cn/document/server-docs/api-call-guide/calling-process/get-access-token" >不同类型的token<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><p>　　token是访问凭证，用于身份鉴权，在飞书中有三种token类型。</p>
<table>
<thead>
<tr>
<th>访问凭证类型</th>
<th>是否需要用户授权</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>tenant_access_token</td>
<td>否</td>
<td>以应用身份调用 API 时需要使用的凭证，可读写的数据范围由应用的<a class="link"   href="https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/configure-app-data-permissions" >数据权限范围<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>决定。该类凭证的值以<code>t-</code>为前缀，示例值：<code>t-24b5bf4e00b2af1234</code>。</td>
</tr>
<tr>
<td>user_access_token</td>
<td>是</td>
<td>以用户身份调用 API 时需要使用的凭证，可读写的数据范围由用户可读写的数据范围决定。该类凭证的值以<code>u-</code>为前缀，示例值：<code>u-Lr1RT7S8fS03mT1234</code>。</td>
</tr>
<tr>
<td>app_access_token</td>
<td>否</td>
<td>应用身份的短期令牌。开放平台根据 app_access_token 识别调用方的应用身份。该类凭证的值以<code>a-</code>或者<code>t-</code>为前缀，示例值：<code>a-24b5cef00b1234</code>。</td>
</tr>
</tbody></table>
<h2 id="登录身份验证"><a href="#登录身份验证" class="headerlink" title="登录身份验证"></a><a class="link"   href="https://open.feishu.cn/document/client-docs/build-login-free-system-" >登录身份验证<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><p>　　应用可通过开放平台身份验证能力获取用户身份，完成用户在应用中的登录流程。身份验证时，客户端内免登，浏览器上需要用户完成扫码登录或密码登录。当前，开放平台身份验证存在如下三种场景：</p>
<ul>
<li>小程序免登</li>
<li>浏览器内网页登录</li>
<li>客户端内网页免登</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　这里主要讲一下简单的飞书的从平台介绍到应用鉴权，再到用户 ID 与 token 类型以及登录身份验证等关键环节，具体的API可以参考<a class="link"   href="https://open.feishu.cn/api-explorer/cli_a7241cbd3813900e" >API调试台<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>飞书开发文档：<a class="link"   href="https://open.feishu.cn/document/home/index" >https://open.feishu.cn/document/home/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>二开</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis一对多嵌套查询</title>
    <url>/2025/01/15/technology/java/Mybatis%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>　　Mybatis中如何用一次调用做到嵌套查询，把数据放入嵌套的实例对象中？这里以省份-城市为例，看</p>
<p>　　查省份后查城市，实际只要调用查省份的接口就会自动查省份+城市，转位json最后效果如下</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海市&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海市&quot;</span><span class="punctuation">,</span>                                                                      </span><br><span class="line">        <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海城区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海城区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;内蒙古自治区&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;内蒙古自治区&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鄂尔多斯市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鄂尔多斯市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京市&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京市&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京城区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京城区&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吉林省&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吉林省&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吉林市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吉林市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四平市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四平市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;白城市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;白城市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;辽源市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;辽源市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;长春市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;长春市&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></div>



<blockquote>
<h4 id="AreaRegionListResult-java"><a href="#AreaRegionListResult-java" class="headerlink" title="AreaRegionListResult.java"></a>AreaRegionListResult.java</h4></blockquote>
<p>　　接收收据实体类</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sabthever.model.result.supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;省市下拉框返回参数&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AreaRegionListResult</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;标签&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;子结构&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AreaRegionListResult&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="Mapper-java中"><a href="#Mapper-java中" class="headerlink" title="Mapper.java中"></a>Mapper.java中</h4></blockquote>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sabthever.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SupplierAreaMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;AreaRegionListResult&gt; <span class="title function_">selectProvinces</span><span class="params">(<span class="meta">@Param(&quot;department&quot;)</span> String department)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;AreaRegionListResult&gt; <span class="title function_">selectCities</span><span class="params">(<span class="meta">@Param(&quot;department&quot;)</span> String department,<span class="meta">@Param(&quot;province&quot;)</span> String province)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="Mapper-xml中"><a href="#Mapper-xml中" class="headerlink" title="Mapper.xml中"></a>Mapper.xml中</h4></blockquote>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sabthever.mapper.SupplierAreaMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查城市 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;cityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sabthever.model.result.supplier.AreaRegionListResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;value&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;label&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCities&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;cityMap&quot;</span>&gt;</span></span><br><span class="line">        select distinct city from table</span><br><span class="line">        where business_name=#&#123;department&#125; and shengfen=#&#123;province&#125;</span><br><span class="line">        order by city;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查省份 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;provinceMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sabthever.model.result.supplier.AreaRegionListResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;value&quot;</span> <span class="attr">column</span>=<span class="string">&quot;province&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 查出来的province同时放到类中两个属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;label&quot;</span> <span class="attr">column</span>=<span class="string">&quot;province&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 根据column传入的两个参数(方法参数=查出来字段名),用select中的方法取值，传入类的children的List，中间的数据类为AreaRegionListResult --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;children&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.sabthever.model.result.supplier.AreaRegionListResult&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;com.sabthever.mapper.SupplierAreaMapper.selectCities&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;&#123;department=department, province=province&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectProvinces&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;provinceMap&quot;</span>&gt;</span></span><br><span class="line">        select shengfen as province,#&#123;department&#125; as department from table</span><br><span class="line">        where business_name=#&#123;department&#125; group by province order by province;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="ServiceImpl-java中"><a href="#ServiceImpl-java中" class="headerlink" title="ServiceImpl.java中"></a>ServiceImpl.java中</h4></blockquote>
<p>　　这边就放了实现类，接口自己加一个</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cockpit.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SupplierAreaServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SupplierAreaService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SupplierAreaMapper areaMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AreaRegionListResult&gt; <span class="title function_">selectAreaTabList</span><span class="params">(String department)</span> &#123;</span><br><span class="line">        List&lt;AreaRegionListResult&gt; site = areaMapper.selectProvinces(department)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4></blockquote>
<p>　　Controller层的东西就自己来了，调用Mapper层的不需要selectCities就可以获得相应数据</p>
<p>　　欧了！拜拜！！</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Cloudflare管理网站(配置CDN)</title>
    <url>/2024/12/28/technology/blog/cdn_settings/</url>
    <content><![CDATA[<blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3></blockquote>
<p>　　在博客的建立后，我发现访问我的博客速度是十分缓慢的。毕竟是Github作为Paas提供商，国内有时能连，有时不能连，很不稳定。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/苦恼.webp"
                      alt="苦恼" style="zoom:50%;"
                >

</br>

<p>　　因此，我想给我的博客配置CDN服务。</p>
<p>　　但是！！！</p>
<p>　　作为一个资深的白嫖党，买是不可能买的，这辈子都不可能买的。这时候我就找到了一个叫做<strong>Cloudflare</strong>的网站管理服务提供商，对于个人用户而言，可以免费试用它的部分服务，其中就包括了CDN。</p>
<p>　　这里再强调一下，我的是<strong>Hexo + Github</strong>的架构，不是这个架构的主要也可借鉴一下。</p>
<blockquote>
<h3 id="Cloudflare介绍"><a href="#Cloudflare介绍" class="headerlink" title="Cloudflare介绍"></a>Cloudflare介绍</h3></blockquote>
<p>　　Cloudflare是一家美国的跨国科技企业，总部位于旧金山，在英国伦敦亦设有办事处。Cloudflare以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务。通过基于反向代理的内容分发网络(CDN, Content Delivery Network)、任播(Anycast)技术 、基于nginx+lua架构的Web应用防火墙(WAF, Web Application Firewall) 及分布式域名解析服务(Distributed Domain Name Server)等技术，Cloudflare可以帮助受保护站点抵御包括分布式拒绝服务攻击(DDoS, Distributed Denial of Service)在内的大多数网络攻击，确保该网站长期在线，同时提升网站的性能、访问速度以改善访客体验。</p>
<div style="text-align: right;">-- 摘自<a class="link"   href="https://baike.baidu.com/item/Cloudflare/17359757?fr=ge_ala" >Cloudflare(美国的跨国科技企业) - 百度百科<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></div>

</p>

<p>　　可以看到它的功能是很多的，我主要就用里面的DNS服务、CDN服务，当然一些免费的小组件肯定也是开起来的，不用白不用。</p>
<blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3></blockquote>
<ol>
<li><p>打开<a class="link"   href="https://dash.cloudflare.com/" >Cloudflare<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的Dashboard注册登录；</p>
</li>
<li><p>Home页中新增配置自己的域名，这个域名就是之前购买的域名，只要顶级域名就行了，不用加www这些。在这步之前，需要先购买自己的域名，详情可见<a href="../hexo-domain-settings"><strong>博客配置域名</strong></a>。<br> 当然，其实那篇文章中的DNS配置可以不配了，到Cloudflare中再配置；</p>
</li>
<li><p>选择免费套餐，下一步；</p>
</li>
<li><p>在其中配置DNS，ipv4的一定要配置，ipv6的选择性配置，建议也写上。CName这条一定要，因为要重定向到你的网站，yourcount替换为你自己的用户名。</p>
</li>
</ol>
<table style="margin: 0 auto; text-align: center; width: min-content;">
  <tr>
    <th>Type</th>
    <th>Name</th>
    <th>Content</th>
  </tr>
  <tr>
    <td>CName</td>
    <td>www</td>
    <td>yourcount.github.io</td>
  </tr>
  <tr>
    <td>A</td>
    <td>@</td>
    <td>185.199.108.153</td>
  </tr>
  <tr>
    <td>A</td>
    <td>@</td>
    <td>185.199.109.153</td>
  </tr>
  <tr>
    <td>A</td>
    <td>@</td>
    <td>185.199.110.153</td>
  </tr>
  <tr>
    <td>A</td>
    <td>@</td>
    <td>185.199.111.153</td>
  </tr>
  <tr>
    <td>AAAA</td>
    <td>@</td>
    <td>2606:50c0:8000::153</td>
  </tr>
  <tr>
    <td>AAAA</td>
    <td>@</td>
    <td>2606:50c0:8001::153</td>
  </tr>
  <tr>
    <td>AAAA</td>
    <td>@</td>
    <td>2606:50c0:8002::153</td>
  </tr>
  <tr>
    <td>AAAA</td>
    <td>@</td>
    <td>2606:50c0:8003::153</td>
  </tr>
</table>
</p>

<ol start="5">
<li><p>点击下一步，这时候他会出现如下内容：</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/3.png"
                      alt="出现内容" style="zoom:50%;"
                >

<p> 　　这是要你去你购买域名的服务商那里把DNS改为它的DNS服务，这样子才能提供服务。最下面两个云里的链接就是它的DNS服务器。</p>
</li>
<li><p>修改DNS服务器地址。我这边以我的阿里云为例，登录后，控制台 - 域名 - 域名列表 - 管理 - DNS管理-DNS修改，然后就将其中的DNS服务器替换成刚才的Cloudflare的DNS服务器链接。提交成功后，等待一段时间，短则几分钟，长则24~48小时。</p>
</li>
<li><p>等到相应DNS服务器访问到了你的网站后，刷新页面会有变化</p>
</li>
<li><p>打开speed - optimizaiton，把可以打开的全打开，要么就是能保障你的安全性，要么就能加速，要钱就不要开了，够用了。</p>
</li>
<li><p>在Hexo下的<code>_config.yml</code>中，加上下面的</p>
 <div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">provider:</span> <span class="string">custom</span></span><br><span class="line">    <span class="attr">custom_url:</span> <span class="string">你购买的域名</span></span><br></pre></td></tr></table></figure></div>

<p> 　　记得也要在Hexo的source下面，加一个CNAME文件，里面写你购买的域名就OK，然后部署。</p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source/CNAME</span></span><br><span class="line">www.yourdomain</span><br></pre></td></tr></table></figure></div>
<p> 　　然后保存后，重新部署</p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试：等部署成功后一会，再打开你的Cloudflare，在你相应的你的域名的管理条目下找到<code>Speed-Observatory</code>，输入你的url测试一下，跑通了的话，在通过域名访问一下，就成功了。</p>
</li>
</ol>
<p>　　当然中间很有可能要等一段时间。</p>

  <div class="note p-4 mb-4 rounded-small red">
    <p><i class="fa-solid fa-circle-info"></i>  　Cloudflare配置好后CDN服务是默认开启的，不需要去设置，主要只要把DNS服务配好就行。其他的小组件，也可以自己看看，有安全协议，http重定位https，加速流量包，主要看自己 </p>

  </div>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL枚举排序</title>
    <url>/2025/04/02/technology/java/SQL%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>　　在SQL取值最后排序的时候，我们有这样的一个业务需求，按照特定的字段值进行排序，针对这种情况简单讲述一下SQL的枚举排序。</p>
<p>　　这边以MySQL为例，有3种方法。</p>
<h3 id="1-case-when-then-end"><a href="#1-case-when-then-end" class="headerlink" title="1.case when ... then ...  end"></a>1.<code>case when ... then ...  end</code></h3><p>（最通用，所有数据库支持）</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> categories</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CASE</span> seniority_category</span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;0-1年&#x27;</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;1-2年&#x27;</span> <span class="keyword">THEN</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;2-3年&#x27;</span> <span class="keyword">THEN</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;3-5年&#x27;</span> <span class="keyword">THEN</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;5-10年&#x27;</span> <span class="keyword">THEN</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;10年以上&#x27;</span> <span class="keyword">THEN</span> <span class="number">6</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="number">7</span> <span class="comment">-- 处理未列出的值（可选）</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-FIELD函数"><a href="#2-FIELD函数" class="headerlink" title="2.FIELD函数"></a>2.<code>FIELD函数</code></h3><p>（MySQL 特有）</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> categories</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> FIELD(seniority_category, <span class="string">&#x27;0-1年&#x27;</span>, <span class="string">&#x27;1-2年&#x27;</span>, <span class="string">&#x27;2-3年&#x27;</span>, <span class="string">&#x27;3-5年&#x27;</span>, <span class="string">&#x27;5-10年&#x27;</span>, <span class="string">&#x27;10年以上&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="3-字符串定位函数LOCATE"><a href="#3-字符串定位函数LOCATE" class="headerlink" title="3.字符串定位函数LOCATE"></a>3.<code>字符串定位函数LOCATE</code></h3><p>（通用性较好）</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> categories</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> LOCATE(</span><br><span class="line">    CONCAT(<span class="string">&#x27;,&#x27;</span>, seniority_category, <span class="string">&#x27;,&#x27;</span>), </span><br><span class="line">    <span class="string">&#x27;,0-1年,1-2年,2-3年,3-5年,5-10年,10年以上,&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<h3 id="三种方案的对比："><a href="#三种方案的对比：" class="headerlink" title="三种方案的对比："></a>三种方案的对比：</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>FIELD()</code></td>
<td align="center">简洁直观（MySQL专用）</td>
<td align="center">数据库兼容性差</td>
</tr>
<tr>
<td align="center"><code>LOCATE()</code></td>
<td align="center">无需硬编码数字，可动态调整顺序</td>
<td align="center">需处理字符串拼接，可能有性能损耗</td>
</tr>
<tr>
<td align="center"><code>CASE WHEN</code></td>
<td align="center">所有数据库通用，可读性强</td>
<td align="center">需要手动维护数字映射</td>
</tr>
</tbody></table>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>本章就到这里了，Bye！！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%862.jpeg"
                     
                ></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>博客配置域名</title>
    <url>/2024/12/24/technology/blog/hexo-domain-settings/</url>
    <content><![CDATA[<blockquote>
<h3 id="步骤1：购买域名"><a href="#步骤1：购买域名" class="headerlink" title="步骤1：购买域名"></a>步骤1：购买域名</h3></blockquote>
<p>首先，你需要从域名注册商处购买一个域名（例如：Namecheap、GoDaddy、<a class="link"   href="https://wanwang.aliyun.com/" >阿里云<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>等）。</p>
<blockquote>
<h3 id="步骤2：配置DNS设置"><a href="#步骤2：配置DNS设置" class="headerlink" title="步骤2：配置DNS设置"></a>步骤2：配置DNS设置</h3></blockquote>
<p>这里以阿里云为例，在实名认证等通过后，要配置DNS服务，将购买的域名指向GitHub Pages站点。具体步骤如下。</p>
<ol>
<li><p><strong>登录相应的网站，找到DNS设置</strong>（通常在域名管理或 DNS 管理页面）。</p>
</li>
<li><p><strong>添加 CNAME 记录</strong>：</p>
<ul>
<li><p><strong>类型</strong>: CNAME</p>
</li>
<li><p><strong>主机</strong>: <code>www</code></p>
</li>
<li><p><strong>值</strong>: GitHub Pages 地址（我的就是<code>sabthever.github.io</code>）。</p>
</li>
<li><p><strong>TTL</strong>: 自动或默认值。</p>
</li>
</ul>
</li>
<li><p><strong>添加 A 记录</strong>（可选，用于裸域重定向）：</p>
<ul>
<li><p><strong>类型</strong>: A</p>
</li>
<li><p><strong>主机</strong>: @（表示裸域）</p>
</li>
<li><p><strong>值</strong>: GitHub Pages 的 IP 地址（GitHub 提供了以下四个 IP 地址，你需要添加四条 A 记录）：</p>
<ul>
<li><p>185.199.108.153</p>
</li>
<li><p>185.199.109.153</p>
</li>
<li><p>185.199.110.153</p>
</li>
<li><p>185.199.111.153</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>添加 A 记录</strong>（可选，用于裸域重定向）：</p>
<ul>
<li><p><strong>类型</strong>: AAAA</p>
</li>
<li><p><strong>主机</strong>: @</p>
</li>
<li><p><strong>值</strong>: 2606:50c0:8000::153</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<h3 id="步骤3：配置-GitHub-Pages-的自定义域名"><a href="#步骤3：配置-GitHub-Pages-的自定义域名" class="headerlink" title="步骤3：配置 GitHub Pages 的自定义域名"></a>步骤3：配置 GitHub Pages 的自定义域名</h3></blockquote>
<ol>
<li><p>在你的本地 Hexo 项目目录中，找到<code>source</code>文件夹（如果没有可以创建一个）。</p>
</li>
<li><p>在 <code>source</code> 文件夹中创建一个名为 <code>CNAME</code> 的文件（无扩展名），并在文件中写入你的自定义域名（例如：<code>www.yourdomain.com</code>，注意前面不要加<code>http://</code>或 <code>https://</code>）。</p>
</li>
<li><p>在<code>_config.yml</code>设置<code>url</code>为：<code>https://yourdomain.com/</code></p>
</li>
<li><p>保存文件后，使用 Hexo 生成静态文件并部署到 GitHub：</p>
 <div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>部署完成后，进入 GitHub 仓库页面，点击仓库的 Settings（设置）。</p>
</li>
<li><p>向下滚动到 GitHub Pages 部分，你会看到一个 Custom domain 字段，里面应该已经自动填入了你刚才在 <code>CNAME</code> 文件中设置的域名。如果没有，手动输入你的自定义域名并保存。</p>
</li>
</ol>
<blockquote>
<h3 id="步骤4：最后"><a href="#步骤4：最后" class="headerlink" title="步骤4：最后"></a>步骤4：最后</h3></blockquote>
<ul>
<li><p>可以在Settings - GitHub Pages设置<code>Enforce HTTPS</code>。这会强制使用HTTPS，提高网站安全性</p>
</li>
<li><p>自己再测试一下是否能够访问成功</p>
</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown编写与页面美化</title>
    <url>/2024/12/29/technology/blog/page-beautify/</url>
    <content><![CDATA[<p>博客文章deploy以后，格式总是和自己预想的不太一样，于是直接用html标签插入，做一些记录。除此之外还有一些Redefine主题下好用的组件。</p>
<h2 id="Markdown通用"><a href="#Markdown通用" class="headerlink" title="Markdown通用"></a>Markdown通用</h2><blockquote>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4></blockquote>
<p>　　在Hexo的渲染中，表格顶格写的情况下。</p>
<p>　　比如下面这段：</p>
<div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">| Name | Age |</span><br><span class="line">| :--: | :--: |       # | :-- | 是靠左</span><br><span class="line">| 张三 | 12 |         # | --: | 是靠右 </span><br><span class="line">| 李四 | 243 |        # -的数量无所谓</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Age</th>
</tr>
</thead>
<tbody><tr>
<td align="center">张三</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">李四</td>
<td align="center">243</td>
</tr>
</tbody></table>
<p>　　我们看到，表格都是拉满的，也没有办法变小一点，不够灵活。</p>
<p>　　我们可以使用Html插入<code>&lt;table&gt;</code>组件来做到这点，更加灵活，但是在没有专门工具时，还是更加麻烦的。html可以像这样写：</p>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto; text-align: center; width: min-content;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>243<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>　　效果如下：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>张三</td>
    <td>12</td>
  </tr>
  <tr>
    <td>李四</td>
    <td>243</td>
  </tr>
</table>
</br>

<p>　　可以看到，列宽适应了文字长度。这个是<code>width: min-content;</code>达成的效果。<code>text-align: </code>这儿是文字左右。<code>margin: </code>组件外部间距距离。甚至可以合并单元格，具体可以自己查查table的style。<code>word-break: break-all;</code>可以让长度不够的换行。</p>
<p>　　再举一个例子：</p>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto; text-align: center; width: min-content;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>组号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>包子<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>馒头<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>包子<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span>馒头<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;white-space: nowrap;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>　　我们能看到：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
    <th style="white-space: nowrap;"></th>
  </tr>
  <tr>
    <td rowspan="2" style="white-space: nowrap;">1</td>
    <td rowspan="2" style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
    <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td rowspan="3" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">李四</td>
    <td rowspan="2" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">包子</td>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
      <td style="white-space: nowrap;"></td>
  </tr>
</table>
</br>

<p>　　超文本中的<code>rowspan=&quot;2&quot;</code>是该单元格占两行的意思，然后下一行的该单元格的位置就要把相应位置的单元格留出。</p>
<p>　　<code>style=&quot;white-space: nowrap;</code>是该单元格不允许换行。</p>
<blockquote>
<h4 id="文本靠右和超链接"><a href="#文本靠右和超链接" class="headerlink" title="文本靠右和超链接"></a>文本靠右和超链接</h4></blockquote>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: right;&quot;</span>&gt;</span>-- 摘自<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baike.baidu.com/item/Cloudflare/17359757?fr=ge_ala&quot;</span>&gt;</span>Cloudflare(美国的跨国科技企业) - 百度百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>效果：</p>
<div style="text-align: right;">-- 摘自<a class="link"   href="https://baike.baidu.com/item/Cloudflare/17359757?fr=ge_ala" >Cloudflare(美国的跨国科技企业) - 百度百科<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></div>
</br>

<blockquote>
<h4 id="图片缩放"><a href="#图片缩放" class="headerlink" title="图片缩放"></a>图片缩放</h4></blockquote>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;.\image\25.png&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom: 50%;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h4></blockquote>
<ul>
<li><p>回车</p>
<p>  用<code>&lt;/br&gt;</code>来换行</p>
</li>
<li><p>以后加</p>
</li>
</ul>
<h2 id="Redefine组件加强"><a href="#Redefine组件加强" class="headerlink" title="Redefine组件加强"></a>Redefine组件加强</h2><p>Redefine就是我在用的主题，是别的大佬开发的，确实美观好用。</p>
<p>[<a class="link"   href="https://github.com/EvanNotFound/hexo-theme-redefine" >Redefine<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>]　　　[<a class="link"   href="https://redefine-docs.ohevan.com/zh/introduction" >使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>]</p>
<blockquote>
<h4 id="写作模板使用"><a href="#写作模板使用" class="headerlink" title="写作模板使用"></a>写作模板使用</h4></blockquote>
<p>　　<a class="link"   href="https://redefine-docs.ohevan.com/zh/modules" >写作模板文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>　　<a class="link"   href="https://fontawesome.com/search" >Fontawsome自定义图标<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h5 id="1-提示块"><a href="#1-提示块" class="headerlink" title="1. 提示块"></a>1. 提示块</h5><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% notel [颜色] [可选: 自定义图标] [标题] %&#125;</span><br><span class="line">内容</span><br><span class="line">支持换行</span><br><span class="line">&#123;% endnotel %&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">&#123;% notel default fa-info 信息 %&#125;</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">&#123;% endnotel %&#125;</span><br></pre></td></tr></table></figure></div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>信息</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>

<p>上面的提示块变成note，就是去掉l，可以变成没有标题的提示块：</p>

  <div class="note p-4 mb-4 rounded-small default">
    <p>换行测试<br>换行测试<br>换行测试</p>

  </div>

<h5 id="2-按钮"><a href="#2-按钮" class="headerlink" title="2. 按钮"></a>2. 按钮</h5><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% btn [可选大小]::[名称]::[url]::[可选图标] %&#125;</span><br><span class="line"></span><br><span class="line">[可选大小]：</span><br><span class="line">center, regular, large, center large, center regular</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">&#123;% btn regular::百度一下::https://www.baidu.com::fa-solid fa-play-circle %&#125;</span><br></pre></td></tr></table></figure></div>

<a class="button  regular" href='https://www.baidu.com' title='百度一下'><i class='fa-solid fa-play-circle'></i> 百度一下</a>

<h5 id="3-折叠"><a href="#3-折叠" class="headerlink" title="3. 折叠"></a>3. 折叠</h5><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% folding [颜色]::[标题] %&#125;</span><br><span class="line">需要写的内容</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">&#123;% folding blue::Folding 测试： 点击查看更多 %&#125;</span><br><span class="line">啊啊啊啊啊</span><br><span class="line">&#123;% note tip  %&#125;</span><br><span class="line">tip 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div>

<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>Folding 测试： 点击查看更多 </summary>
              <div class='content'>
              <p>啊啊啊啊啊</p>  <div class="note p-4 mb-4 rounded-small tip">    <p>tip 提示块标签</p>  </div>
              </div>
            </details>

<h5 id="4-选项卡"><a href="#4-选项卡" class="headerlink" title="4. 选项卡"></a>4. 选项卡</h5><div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 页面内不重复的ID %&#125;</span><br><span class="line"> </span><br><span class="line">&lt;!-- tab 栏目1名称 --&gt;</span><br><span class="line"> </span><br><span class="line">内容</span><br><span class="line"> </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab 栏目2名称 --&gt;</span><br><span class="line"> </span><br><span class="line">内容</span><br><span class="line"> </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"> </span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div>
<div class="tabs" id="tab-页面内不重复的id"><ul class="nav-tabs"><li class="tab active"><a class="#页面内不重复的id-1">栏目1名称</a></li><li class="tab"><a class="#页面内不重复的id-2">栏目2名称</a></li></ul><div class="tab-content"><div class="tab-pane active" id="页面内不重复的id-1"><p>内容1</p></div><div class="tab-pane" id="页面内不重复的id-2"><p>内容2</p></div></div></div>

<h5 id="5-思维导图"><a href="#5-思维导图" class="headerlink" title="5. 思维导图"></a>5. 思维导图</h5><div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line"><span class="bullet">-</span> Fengx</span><br><span class="line"><span class="bullet">	-</span> 任何方向</span><br><span class="line"><span class="bullet">		-</span> 编程语言</span><br><span class="line"><span class="bullet">			-</span> Java</span><br><span class="line"><span class="bullet">		-</span> SQL</span><br><span class="line"><span class="bullet">		-</span> Linux</span><br><span class="line"><span class="bullet">		-</span> Git</span><br><span class="line"><span class="bullet">	-</span> 技术</span><br><span class="line"><span class="bullet">		-</span> mycat</span><br><span class="line"><span class="bullet">		-</span> 大数据</span><br><span class="line"><span class="bullet">			-</span> Hadoop</span><br><span class="line"><span class="bullet">			-</span> HBase</span><br><span class="line"><span class="bullet">	-</span> 内功</span><br><span class="line"><span class="bullet">		-</span> 计算机基础</span><br><span class="line"><span class="bullet">			-</span> 计算机网络</span><br><span class="line"><span class="bullet">			-</span> 计算机操作系统</span><br><span class="line"><span class="bullet">			-</span> 编译原理</span><br><span class="line"><span class="bullet">			-</span> 计算机组成原理</span><br><span class="line"><span class="bullet">		-</span> 数据结构与算法</span><br><span class="line"><span class="bullet">	-</span> 其他</span><br><span class="line"><span class="bullet">		-</span> 英语</span><br><span class="line"><span class="bullet">		-</span> 博客</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>展示</p>
</blockquote>
<p>思维导图的使用还有点问题，每次得手动刷新一下，后面再改吧。</p>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Fengx<ul>
<li>任何方向<ul>
<li>编程语言<ul>
<li>Java</li>
</ul>
</li>
<li>SQL</li>
<li>Linux</li>
<li>Git</li>
</ul>
</li>
<li>技术<ul>
<li>mycat</li>
<li>大数据<ul>
<li>Hadoop</li>
<li>HBase</li>
</ul>
</li>
</ul>
</li>
<li>内功<ul>
<li>计算机基础<ul>
<li>计算机网络</li>
<li>计算机操作系统</li>
<li>编译原理</li>
<li>计算机组成原理</li>
</ul>
</li>
<li>数据结构与算法</li>
</ul>
</li>
<li>其他<ul>
<li>英语</li>
<li>博客</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>	</p>
</blockquote>

<h5 id="6-上下标"><a href="#6-上下标" class="headerlink" title="6.上下标"></a>6.上下标</h5><p>hexo里面用markdown语法的上下标显示不出来，于是用html语法。</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">上标：2<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">下标：2<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>上标：2<sup>上标</sup><br>下标：2<sub>下标</sub></p>
<h5 id="7-其余文章配置"><a href="#7-其余文章配置" class="headerlink" title="7. 其余文章配置"></a>7. 其余文章配置</h5><p>在文章头部中加上如下</p>
<div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">sticky: 999 # 首页置顶 数字越大越靠前</span><br><span class="line">thumbnail: &quot;image.png&quot; # 首页缩略图</span><br><span class="line">excerpt: false/&quot;文字&quot; # 首页摘要，false就是关掉，写文字就是摘要</span><br><span class="line">cover: false/&quot;image.png&quot; # 文章页头图 没有的话会沿用首页缩略图;不想要的话，就false;想不一样的就加图片路径</span><br><span class="line">expires: 2023-08-31 23:59:59 # 文章时效性 会显示是否过期</span><br></pre></td></tr></table></figure></div>



<blockquote>
<h4 id="页面模板使用"><a href="#页面模板使用" class="headerlink" title="页面模板使用"></a>页面模板使用</h4></blockquote>
<p>这边的组件是在已经配制好的情况下的使用，详情见 <a class="link"   href="https://redefine-docs.ohevan.com/zh/page_templates" >页面模板文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h5 id="1-相册组件"><a href="#1-相册组件" class="headerlink" title="1. 相册组件"></a>1. <strong>相册组件</strong></h5><p>在Hexo - source - _data - masonry.yml中加图片</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">image:</span> <span class="string">图片URL</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">图片标题</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">描述</span></span><br></pre></td></tr></table></figure></div>

<p>这个图片可以放在我建立的仓库Picture1中，url是<a class="link"   href="https://sabthever.github.io/Pictures1/xxx" >https://sabthever.github.io/Pictures1/xxx<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h5 id="2-Tags和Category组件"><a href="#2-Tags和Category组件" class="headerlink" title="2. Tags和Category组件"></a>2. <strong>Tags和Category组件</strong></h5><p>通过在文章开头加Tags或者Category，提供文章的标签或者分类目录。</p>
<div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客配置域名</span><br><span class="line">date: 2024-12-24 14:08:28</span><br><span class="line">tags: [Hexo,DNS]</span><br><span class="line">categories: [Technology,MyBlog]</span><br><span class="line"><span class="section">excerpt: &quot;主要针对于Hexo+Github。先购买域名，然后从本地hexo和在线域名配置，给自己的博客配置域名&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></div>

<p>其中tags中的标签都是<strong>并列</strong>的，categories中的标签都是<strong>一层层往下</strong>的</p>
<h5 id="3-关于和日志"><a href="#3-关于和日志" class="headerlink" title="3. 关于和日志"></a>3. <strong>关于和日志</strong></h5><p>在Hexo - source - about - index.md 中修改关于，增加我的博客修改日志</p>
<h5 id="4-书签组件"><a href="#4-书签组件" class="headerlink" title="4. 书签组件"></a>4. <strong>书签组件</strong></h5><p>在Hexo - source - _data - bookmarks.yml中加组件</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">category:</span> <span class="string">分类名称</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-folder</span> <span class="comment"># 分类的图标，使用 FontAwesome 图标</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">书签名称</span></span><br><span class="line">        <span class="attr">link:</span> <span class="string">链接地址</span> <span class="comment"># 从 url 改为 link</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">书签描述</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">图标链接</span> <span class="comment"># 从 icon 改为 image，用于显示网站图标</span></span><br></pre></td></tr></table></figure></div>
<h5 id="5-Latex启用"><a href="#5-Latex启用" class="headerlink" title="5. Latex启用"></a>5. <strong>Latex启用</strong></h5><p>在文章头部加入<code>mathjax: true</code>即可启用</p>
<h5 id="6-说说组件"><a href="#6-说说组件" class="headerlink" title="6. 说说组件"></a>6. <strong>说说组件</strong></h5><p>在Hexo - source - _data - essays.yml中加说说，回车要加<code>|</code>才可以</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">- content: 2024年要过去啦</span><br><span class="line">  date: 2024-12-31 19:37:02</span><br><span class="line"></span><br><span class="line">- content: |</span><br><span class="line">    愿大家在12月31日的这一天</span><br><span class="line">    告别过去一年的所有遗憾与不快</span><br><span class="line">  date: 2024-12-31 19:39:44</span><br></pre></td></tr></table></figure></div>

<blockquote>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4></blockquote>
<p><a class="link"   href="https://redefine-docs.ohevan.com/zh/introduction" >Redefine使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>MyBlog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot注册Bean</title>
    <url>/2025/02/18/technology/java/Springboot%E6%B3%A8%E5%86%8CBean/</url>
    <content><![CDATA[<p>在 Spring Boot 项目中使用 Maven 来调用 SDK 时，是否需要注册 Bean 取决于 SDK 的特性和使用场景。下面为你详细介绍调用 SDK 的通用步骤以及注册 Bean 的相关情况。</p>
<h2 id="一-Bean简介"><a href="#一-Bean简介" class="headerlink" title="一. Bean简介"></a>一. Bean简介</h2><p>　　Bean是Spring框架（包括Spring Boot）中的一个核心概念。</p>
<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>　　在 Spring 里，Bean 指的是由 Spring IoC（Inversion of Control，控制反转）容器所创建、管理的对象。IoC 是一种设计原则，通过它将对象的创建、依赖关系的管理等控制权从应用代码转移到 Spring 容器中。简单来说，Spring 容器负责创建、配置和管理这些 Bean 对象，而不是由开发者在代码里显式地使用 <code>new</code> 关键字去创建对象。</p>
<h3 id="２-特点"><a href="#２-特点" class="headerlink" title="２.特点"></a>２.特点</h3><ul>
<li><strong>可配置性</strong>：可以通过多种方式（如 XML 配置文件、Java 配置类、注解等）对 Bean 进行详细的配置，包括 Bean 的作用域、生命周期回调方法、依赖注入等。</li>
<li><strong>依赖注入</strong>：Spring 容器会自动处理 Bean 之间的依赖关系，通过依赖注入（Dependency Injection，DI）的方式将所需的对象注入到 Bean 中，降低了代码的耦合度。</li>
<li><strong>生命周期管理</strong>：Spring 容器管理着 Bean 的整个生命周期，从创建、初始化到销毁，开发者可以指定在特定的生命周期阶段执行自定义的操作。</li>
</ul>
<h3 id="３-创建Bean的方式"><a href="#３-创建Bean的方式" class="headerlink" title="３.创建Bean的方式"></a>３.创建Bean的方式</h3><h4 id="3-1-基于-XML-配置"><a href="#3-1-基于-XML-配置" class="headerlink" title="3.1 基于 XML 配置"></a>3.1 基于 XML 配置</h4><p>　　在早期的 Spring 开发中，常使用 XML 配置文件来定义 Bean。示例如下：</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以在这里配置属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>　　上述代码中，定义了一个名为 <code>userService</code> 的 Bean，其对应的类是 <code>com.example.service.UserService</code>。</p>
<h4 id="3-2-基于-Java-配置类"><a href="#3-2-基于-Java-配置类" class="headerlink" title="3.2 基于 Java 配置类"></a>3.2 基于 Java 配置类</h4><p>　　在 Spring 3.0 及以后，推荐使用 Java 配置类来定义 Bean。示例如下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.example.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserService <span class="title function_">userService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这里使用 <code>@Configuration</code> 注解将 <code>AppConfig</code> 类标记为配置类，<code>@Bean</code> 注解用于定义一个 Bean。</p>
<h4 id="3-3基于注解扫描"><a href="#3-3基于注解扫描" class="headerlink" title="3.3基于注解扫描"></a>3.3基于注解扫描</h4><p>　　通过 <code>@Component</code> 及其派生注解（如 <code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>），Spring 可以自动扫描并将带有这些注解的类注册为 Bean。示例如下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 类的具体实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　同时，需要在配置类上添加 <code>@ComponentScan</code> 注解来指定扫描的包路径：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.example.service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 配置类的其他内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h3><p>　　Spring 管理的 Bean 有其完整的生命周期，主要包括以下几个阶段：</p>
<ol>
<li><strong>实例化</strong>：Spring 容器根据配置信息创建 Bean 的实例。</li>
<li><strong>属性注入</strong>：将 Bean 所依赖的其他对象注入进来。</li>
<li><strong>初始化</strong>：调用初始化方法，可以通过实现 <code>InitializingBean</code> 接口的 <code>afterPropertiesSet</code> 方法，或者使用 <code>@PostConstruct</code> 注解指定初始化方法。</li>
<li><strong>使用</strong>：Bean 可以被应用程序正常使用。</li>
<li><strong>销毁</strong>：当 Spring 容器关闭时，会调用销毁方法，可以通过实现 <code>DisposableBean</code> 接口的 <code>destroy</code> 方法，或者使用 <code>@PreDestroy</code> 注解指定销毁方法。</li>
</ol>
<h3 id="Bean-的管理"><a href="#Bean-的管理" class="headerlink" title="Bean 的管理"></a>Bean 的管理</h3><p>　　Spring 容器负责管理 Bean 的整个生命周期和依赖关系，开发者可以通过容器获取所需的 Bean 实例。在 Spring Boot 中，可以使用依赖注入的方式获取 Bean，示例如下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器的其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　上述代码中，通过构造函数注入的方式将 <code>UserService</code> Bean 注入到 <code>UserController</code> 中。</p>
<h2 id="二-Bean注册"><a href="#二-Bean注册" class="headerlink" title="二. Bean注册"></a>二. Bean注册</h2><p>　　步骤一，要在<code>pom.xml</code>文件里添加 SDK 的依赖。假设 SDK 的坐标信息如下，可以按照如下方式添加：</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里是你的SDK依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sdk-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>　　将上述代码中的<code>groupId</code>、<code>artifactId</code>和<code>version</code>替换为实际使用的 SDK 的对应信息。</p>
<p>　　步骤二，判断是否需要注册 Bean。这主要依据 SDK 的使用方式来确定。</p>
<h3 id="１-不需要注册-Bean"><a href="#１-不需要注册-Bean" class="headerlink" title="１.不需要注册 Bean"></a>１.不需要注册 Bean</h3><p>　　如果 SDK 提供的是<strong>静态方法</strong>，或者每次使用时都要创建新的实例，那么通常无需将其注册为 Bean。以下是一个简单示例：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.sdk.StaticSDKUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDKUsageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/use-sdk-static&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useSDKStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接调用SDK的静态方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> StaticSDKUtils.doSomething();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　在这个例子中，<code>StaticSDKUtils</code>类包含静态方法<code>doSomething</code>，可以直接调用，无需注册为 Bean。</p>
<h3 id="２-需要注册-Bean"><a href="#２-需要注册-Bean" class="headerlink" title="２.需要注册 Bean"></a>２.需要注册 Bean</h3><p>　　若 SDK 的实例创建过程较为复杂，需要进行一些<strong>初始化配置</strong>，或者<strong>该实例需要在多个组件间共享使用</strong>，那么建议将其注册为 Bean。以下是详细步骤：</p>
<h4 id="2-1-创建配置类注册-Bean"><a href="#2-1-创建配置类注册-Bean" class="headerlink" title="2.1 创建配置类注册 Bean"></a>2.1 创建配置类注册 Bean</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.sdk.SDKClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDKConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SDKClient <span class="title function_">sdkClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 进行SDKClient的初始化配置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">apiKey</span> <span class="operator">=</span> <span class="string">&quot;your-api-key&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> <span class="string">&quot;your-secret&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SDKClient</span>(apiKey, secret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　在上述代码中，<code>SDKConfig</code>类使用<code>@Configuration</code>注解表明这是一个配置类，<code>@Bean</code>注解将<code>SDKClient</code>实例注册到 Spring 容器中。</p>
<h4 id="2-2-在服务或控制器中使用注册的-Bean"><a href="#2-2-在服务或控制器中使用注册的-Bean" class="headerlink" title="2.2 在服务或控制器中使用注册的 Bean"></a>2.2 在服务或控制器中使用注册的 Bean</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.sdk.SDKClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDKUsageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SDKClient sdkClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SDKUsageController</span><span class="params">(SDKClient sdkClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sdkClient = sdkClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/use-sdk-client&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useSDKClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用SDKClient的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sdkClient.performTask();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这里通过构造函数注入的方式获取<code>SDKClient</code>实例，并调用其方法。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　是否注册 Bean 取决于 SDK 的设计和使用方式。如果 SDK 使用简单，直接调用即可；若 SDK 初始化复杂或需共享实例，注册为 Bean 是更好的选择。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>idea多开程序</title>
    <url>/2025/06/03/technology/java/idea%E5%A4%9A%E5%BC%80%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="一-问题"><a href="#一-问题" class="headerlink" title="一. 问题"></a>一. 问题</h1><p>idea运行的时候，有时需要多开一个程序，其中可能遇到一些问题。比如端口需要不一样，不然有可能冲突；比如某一个程序需要一直保持，不需要随着代码改动重新编译。</p>
<h1 id="二-解决方法"><a href="#二-解决方法" class="headerlink" title="二. 解决方法"></a>二. 解决方法</h1><p>本文解决的就是这两个问题，都可以通过右上角执行的程序中修改配置来解决。</p>
<p>找到上面靠右的run左边的配置点击，然后在下拉框中选择<code>edit configuration</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/image-20250604095838798.png"
                      alt="image-20250604095838798"
                ></p>
<p>在左侧选择自己想要的进程，也可以按左上的<code>+-</code>来添加和配置更多进程，达到多开的效果。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/image-20250604100009087.png"
                      alt="image-20250604100009087" style="zoom:67%;" 
                >

<p>然后可以选择<code>Modify options</code>中的<code>vm option</code>，在新出现的文本框中就可以输入程序运行的临时参数。</p>
<p>针对于上述的两个问题，可以由以下两个参数解决：</p>
<ol>
<li>禁用<code>devtools</code>的代码修改后立刻编译重启：<code>-Dspring.devtools.restart.enabled=false</code></li>
<li>修改该进程端口 <code>-Dserver.port=9093</code></li>
</ol>
<p>如果要使用多个参数，只要各个参数之间用<strong>空格</strong>隔开。<br>现在用的这两个都是<code>-D</code>开头，这个参数就告诉我们后面跟的相当于<code>application.yml</code>中的参数，优先级是高于<code>application.yml</code>中的。</p>
<h1 id="三-拓展"><a href="#三-拓展" class="headerlink" title="三. 拓展"></a>三. 拓展</h1><p>除此以外，<code>vm options</code>中还可以有如下的参数。</p>
<h3 id="1-内存相关参数"><a href="#1-内存相关参数" class="headerlink" title="1. 内存相关参数"></a>1. <strong>内存相关参数</strong></h3><ul>
<li>**<code>-Xms</code>**：设置Java堆的初始大小。<ul>
<li>示例：<code>-Xms512m</code>（初始堆大小为512MB）</li>
</ul>
</li>
<li>**<code>-Xmx</code>**：设置Java堆的最大大小。<ul>
<li>示例：<code>-Xmx2g</code>（最大堆大小为2GB）</li>
</ul>
</li>
<li>**<code>-XX:MaxPermSize=</code>**：设置永久代（PermGen）的最大大小（适用于Java 7及以下版本）。<ul>
<li>示例：<code>-XX:MaxPermSize=256m</code></li>
</ul>
</li>
<li>**<code>-XX:MaxMetaspaceSize=</code>**：设置元空间（Metaspace）的最大大小（适用于Java 8及以上版本）。<ul>
<li>示例：<code>-XX:MaxMetaspaceSize=512m</code></li>
</ul>
</li>
</ul>
<h3 id="2-垃圾回收相关参数"><a href="#2-垃圾回收相关参数" class="headerlink" title="2. 垃圾回收相关参数"></a>2. <strong>垃圾回收相关参数</strong></h3><ul>
<li>**<code>-XX:+UseG1GC</code>**：启用G1垃圾回收器。</li>
<li>**<code>-XX:+UseParallelGC</code>**：启用并行垃圾回收器。</li>
<li>**<code>-XX:+UseConcMarkSweepGC</code>**：启用并发标记-清除垃圾回收器。</li>
<li>**<code>-XX:GCTimeRatio=</code>**：设置垃圾回收时间占总运行时间的比例。<ul>
<li>示例：<code>-XX:GCTimeRatio=19</code>（默认值为99，表示垃圾回收时间占总运行时间的1%）</li>
</ul>
</li>
</ul>
<h3 id="3-性能优化参数"><a href="#3-性能优化参数" class="headerlink" title="3. 性能优化参数"></a>3. <strong>性能优化参数</strong></h3><ul>
<li>**<code>-XX:+AggressiveOpts</code>**：启用激进的性能优化选项。</li>
<li>**<code>-XX:+TieredCompilation</code>**：启用分层编译（默认启用）。</li>
<li>**<code>-XX:CompileThreshold=</code>**：设置方法被编译的调用次数阈值。<ul>
<li>示例：<code>-XX:CompileThreshold=10000</code></li>
</ul>
</li>
</ul>
<h3 id="4-调试相关参数"><a href="#4-调试相关参数" class="headerlink" title="4. 调试相关参数"></a>4. <strong>调试相关参数</strong></h3><ul>
<li>**<code>-Xdebug</code>**：启用调试模式（已废弃，使用<code>-agentlib:jdwp</code>替代）。</li>
<li>**<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=\*:5005</code>**：启用远程调试。<ul>
<li>示例：<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</code>（监听5005端口）</li>
</ul>
</li>
<li>**<code>-XX:+PrintGCDetails</code>**：打印详细的垃圾回收日志。</li>
<li>**<code>-XX:+PrintGCDateStamps</code>**：在垃圾回收日志中打印时间戳。</li>
<li>**<code>-XX:+PrintGCTimeStamps</code>**：在垃圾回收日志中打印时间戳。</li>
<li>**<code>-XX:LogFile=</code>**：设置垃圾回收日志文件路径。<ul>
<li>示例：<code>-XX:LogFile=gc.log</code></li>
</ul>
</li>
</ul>
<h3 id="5-线程相关参数"><a href="#5-线程相关参数" class="headerlink" title="5. 线程相关参数"></a>5. <strong>线程相关参数</strong></h3><ul>
<li>**<code>-Xss</code>**：设置每个线程的栈大小。<ul>
<li>示例：<code>-Xss1m</code>（每个线程的栈大小为1MB）</li>
</ul>
</li>
<li>**<code>-XX:ParallelGCThreads=</code>**：设置并行垃圾回收器的线程数。<ul>
<li>示例：<code>-XX:ParallelGCThreads=4</code></li>
</ul>
</li>
<li>**<code>-XX:ConcGCThreads=</code>**：设置并发垃圾回收器的线程数。<ul>
<li>示例：<code>-XX:ConcGCThreads=2</code></li>
</ul>
</li>
</ul>
<h3 id="6-其他常用参数"><a href="#6-其他常用参数" class="headerlink" title="6. 其他常用参数"></a>6. <strong>其他常用参数</strong></h3><ul>
<li>**<code>-D=</code>**：设置系统属性。<ul>
<li>示例：<code>-Dserver.port=9093</code>（设置Spring Boot的服务器端口号）</li>
</ul>
</li>
<li>**<code>-XX:+HeapDumpOnOutOfMemoryError</code>**：在发生<code>OutOfMemoryError</code>时生成堆转储文件。</li>
<li>**<code>-XX:HeapDumpPath=</code>**：设置堆转储文件的路径。<ul>
<li>示例：<code>-XX:HeapDumpPath=/var/log/heapdump.hprof</code></li>
</ul>
</li>
<li>**<code>-XX:+DisableExplicitGC</code>**：禁用<code>System.gc()</code>的显式调用。</li>
<li>**<code>-XX:+UseStringDeduplication</code>**：启用字符串去重（需要启用G1垃圾回收器）。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%861.jpeg"
                     
                ></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>若依框架的简单使用</title>
    <url>/2025/01/03/technology/java/ruoyi-1/</url>
    <content><![CDATA[<p>　　由于工作需求，后端开发框架都是使用的若依框架，于是自己去学习一下相关的使用。这里我主要使用的是它的前后端分离架构，也就是springboot+vue的架构。</p>
<p>　　有springboot基础的小伙伴们上手起来应该是很快的，主要就是使用中间的一些注解。大部分内容都是直接参考<a class="link"   href="https://doc.ruoyi.vip/" >RuoYi官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>　　<strong>RuoYi-Vue</strong> 是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Spring Security、MyBatis、Jwt、Vue），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源，支持分布式事务。</p>
<h3 id="A-相关链接"><a href="#A-相关链接" class="headerlink" title="A. 相关链接"></a>A. 相关链接</h3><ul>
<li>若依官网：<a class="link"   href="http://ruoyi.vip/" >http://ruoyi.vip(opens new window)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>演示地址：<a class="link"   href="http://vue.ruoyi.vip/" >http://vue.ruoyi.vip(opens new window)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>代码下载：<a class="link"   href="https://gitee.com/y_project/RuoYi-Vue" >https://gitee.com/y_project/RuoYi-Vue<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>文档地址：<a class="link"   href="https://doc.ruoyi.vip/ruoyi-vue/" >https://doc.ruoyi.vip/ruoyi-vue/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<p>具体就得参考上面的文档中的地址，这边只是记录一些我常用的。</p>
<h3 id="B-系统需求"><a href="#B-系统需求" class="headerlink" title="B. 系统需求"></a>B. 系统需求</h3><ul>
<li>JDK &gt;&#x3D; 1.8</li>
<li>MySQL &gt;&#x3D; 5.7</li>
<li>Maven &gt;&#x3D; 3.0</li>
<li>Node &gt;&#x3D; 12</li>
<li>Redis &gt;&#x3D; 3</li>
</ul>
<h3 id="C-特性"><a href="#C-特性" class="headerlink" title="C. 特性"></a>C. 特性</h3><ul>
<li>完全响应式布局（支持电脑、平板、手机等所有主流设备）</li>
<li>强大的一键生成功能（包括控制器、模型、视图、菜单等）</li>
<li>支持多数据源，简单配置即可实现切换。</li>
<li>支持按钮及数据权限，可自定义部门数据权限。</li>
<li>对常用js插件进行二次封装，使js代码变得简洁，更加易维护</li>
<li>完善的XSS防范及脚本过滤，彻底杜绝XSS攻击</li>
<li>Maven多项目依赖，模块及插件分项目，尽量松耦合，方便模块升级、增减模块。</li>
<li>国际化支持，服务端及客户端支持</li>
<li>完善的日志记录体系简单注解即可实现</li>
<li>支持服务监控，数据监控，缓存监控功能</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="A-代码获取"><a href="#A-代码获取" class="headerlink" title="A. 代码获取"></a>A. 代码获取</h3><p>直接使用<code>git clone</code>把相关的代码拉下来</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/y_project/RuoYi-Vue.git</span><br></pre></td></tr></table></figure></div>

<p>也可以使用ssh等方式，<a class="link"   href="https://gitee.com/y_project/RuoYi-Vue" >仓库<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>在这里。</p>
<h3 id="B-本地部署运行"><a href="#B-本地部署运行" class="headerlink" title="B. 本地部署运行"></a>B. 本地部署运行</h3><p>环境自己准备好，记得把Node等等换源，当然，如果只要后端的话Node就不用了。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">JDK &gt;= 1.8 (推荐1.8版本)</span><br><span class="line">Mysql &gt;= 5.7.0 (推荐5.7版本)</span><br><span class="line">Redis &gt;= 3.0</span><br><span class="line">Maven &gt;= 3.0</span><br><span class="line">Node &gt;= 12</span><br></pre></td></tr></table></figure></div>

<h4 id="一-后端部署"><a href="#一-后端部署" class="headerlink" title="(一) 后端部署"></a>(一) 后端部署</h4><ol>
<li><p>导入到<code>Eclipse</code>，菜单 <code>File</code> -&gt; <code>Import</code>，然后选择 <code>Maven</code> -&gt; <code>Existing Maven Projects</code>，点击 <code>Next</code>&gt; 按钮，选择工作目录，然后点击 <code>Finish</code> 按钮，即可成功导入。<br><code>Eclipse</code>会自动加载<code>Maven</code>依赖包，初次加载会比较慢（根据自身网络情况而定）</p>
</li>
<li><p>创建数据库<code>ry-vue</code>并导入数据脚本<code>ry_2021xxxx.sql</code>，<code>quartz.sql</code></p>
</li>
<li><p>在admin-…-resources-application-druid.yml修改master的数据源的相关配置</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">            <span class="comment"># 主库数据源</span></span><br><span class="line">            <span class="attr">master:</span></span><br><span class="line">                <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:port/database?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">                <span class="attr">username:</span> </span><br><span class="line">                <span class="attr">password:</span> </span><br></pre></td></tr></table></figure></div>

<p>也可以在配置文档中修改相关的端口，默认端口是<code>8080</code></p>
</li>
<li><p>打开项目运行<code>com.ruoyi.RuoYiApplication.java</code>，出现如下图表示启动成功。</p>
</li>
</ol>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">(♥◠‿◠)ﾉﾞ  若依启动成功   ლ(´ڡ`ლ)ﾞ  </span><br><span class="line"> .-------.       ____     __        </span><br><span class="line"> |  _ _   \      \   \   /  /    </span><br><span class="line"> | ( &#x27; )  |       \  _. /  &#x27;       </span><br><span class="line"> |(_ o _) /        _( )_ .&#x27;         </span><br><span class="line"> | (_,_).&#x27; __  ___(_ o _)&#x27;          </span><br><span class="line"> |  |\ \  |  ||   |(_,_)&#x27;         </span><br><span class="line"> |  | \ `&#x27;   /|   `-&#x27;  /           </span><br><span class="line"> |  |  \    /  \      /           </span><br><span class="line"> &#x27;&#x27;-&#x27;   `&#x27;-&#x27;    `-..-&#x27;    </span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>想要看到效果，可以通过两种途径，一个是前端的部署，另一个是<code>Swagger+Knife4j</code>自动生成接口文档</li>
</ol>
<p>本段参考：<a class="link"   href="https://doc.ruoyi.vip/ruoyi-vue/document/hjbs.html#%E5%90%8E%E7%AB%AF%E8%BF%90%E8%A1%8C" >RuoYi-Vue环境部署<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="二-前端查看"><a href="#二-前端查看" class="headerlink" title="(二) 前端查看"></a>(二) 前端查看</h4><p>　　进入项目下的或者独立出来的ui文件夹，在文件夹下打开终端。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> ruoyi-ui</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 强烈建议不要用直接使用 cnpm 安装，会有各种诡异的 bug，可以通过重新指定 registry 来解决 npm 安装速度慢的问题。</span></span><br><span class="line">npm install --registry=https://registry.npmmirror.com</span><br><span class="line"><span class="comment"># 本地开发 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>

<p>　　打开浏览器，输入：(<a class="link"   href="http://localhost/" >http://localhost:80<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>) 默认账户&#x2F;密码 <code>admin/admin123</code>）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/ruoyi.png"
                     
                ></p>
<h4 id="三-接口文档查看"><a href="#三-接口文档查看" class="headerlink" title="(三) 接口文档查看"></a>(三) 接口文档查看</h4><p>　　ruoyi在拉下来的时候就已经配置了Swagger组件。</p>
<ul>
<li>多导入一个knife4j包来增强功能</li>
</ul>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- knife4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>用@Api(tags &#x3D; “”)来对Controller进行修饰</p>
<p>用@ApiOperation(value &#x3D; “”)来对类进行修饰</p>
<p>其他修饰参见SpringBoot里面和Swagger相关的@Apixxx</p>
</li>
<li><p>使用 <a href="http://ip:port/doc.html">http://ip:port/doc.html</a> 来看api文档，效果如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250103173354935.png"
                     
                ></p>
</li>
</ul>
<h3 id="C-相关注解和使用"><a href="#C-相关注解和使用" class="headerlink" title="C. 相关注解和使用"></a>C. 相关注解和使用</h3><h4 id="一-注解"><a href="#一-注解" class="headerlink" title="(一) 注解"></a>(一) 注解</h4><h5 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h5><p>　　用于给下面的变量赋值</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;fanruan.publicKey&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String publicKey;</span><br></pre></td></tr></table></figure></div>

<p>　　和直接赋值不同的是，这个值用<code>&quot;$&#123;parameter&#125;&quot;</code>的格式来输入值，可以通过修改application.yml中的参数，方便修改，如下所示</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fanruan:</span></span><br><span class="line">  <span class="attr">publicKey:</span> <span class="string">MIIBIjANBgkqhki</span></span><br></pre></td></tr></table></figure></div>

<p>　　这样子，上面的<code>publicKey</code>中的内容中的<code>$&#123;fanruan.publicKey&#125;</code>会被替换为<code>MIIBIjANBgkqhki</code></p>
<hr>
<h5 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h5><p>　　自动装配，依赖注入</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FeishuService feishuService;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><strong>与</strong>**<code>@Qualifier</code>**<strong>注解配合使用</strong>：</p>
<p>　　当有多个相同类型的Bean时，可以使用<code>@Qualifier</code>注解与<code>@Autowired</code>注解一起使用，以指定注入哪一个具体的Bean。</p>
<p>  　　例如，如果你有一个<code>FeishuService</code>接口和多个实现类，你可能想要指定注入哪一个实现：</p>
  <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;specificFeishuService&quot;)</span></span><br><span class="line"><span class="keyword">private</span> FeishuService feishuService;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>疑问</strong>：和<code>@Resource</code>有哪些区别呢</p>
</li>
</ul>
<p>　　<code>@Autowired</code>和<code>@Resource</code>两个注解都用于实现依赖注入，但它们之间存在几个主要区别：</p>
<ol>
<li><strong>来源不同</strong>：<ol>
<li><code>@Autowired</code>是Spring框架提供的注解，而<code>@Resource</code>来自于Java规范，特别是JSR-250。</li>
</ol>
</li>
<li><strong>依赖查找顺序不同</strong>：<ol>
<li><code>@Autowired</code>默认先按类型（byType）查找，如果存在多个Bean再按名称（byName）查找。</li>
<li><code>@Resource</code>默认先按名称（byName）查找，如果找不到与名称匹配的Bean，则退回到按类型（byType）查找。</li>
</ol>
</li>
<li><strong>支持的参数不同</strong>：<ol>
<li><code>@Autowired</code>只支持设置一个参数<code>required</code>，用于指定依赖是否必须。</li>
<li><code>@Resource</code>支持设置多个参数，如<code>name</code>和<code>type</code>等，提供了更灵活的配置。</li>
</ol>
</li>
<li><strong>依赖注入的用法支持不同</strong>：<ol>
<li><code>@Autowired</code>支持构造方法注入、属性注入和Setter方法注入。</li>
<li><code>@Resource</code>主要支持属性注入和Setter方法注入，通常不用于构造方法注入。</li>
</ol>
</li>
<li><strong>编译器IDEA的提示不同</strong>：<ol>
<li>使用<code>@Autowired</code>时，IDEA可能会出现警告，提示字段注入不被推荐。</li>
<li>使用<code>@Resource</code>时，IDEA通常不会出现类似的警告</li>
</ol>
</li>
</ol>
<hr>
<h5 id="model中的"><a href="#model中的" class="headerlink" title="model中的"></a>model中的</h5><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;首页数据查询请求参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeQueryParam</span> &#123;</span><br><span class="line">    <span class="comment">//  年月</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;202404&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;年月不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String month;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型（单月/累计）</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;单月&quot;,example=&quot;这边是api使用展示值&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;类型不能为空&quot;)</span> <span class="comment">// 会在为空的时候给前端返回</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><strong>@Data</strong>：<ol>
<li>这是Lombok库提供的一个注解，用于自动为类的字段生成getter和setter方法、<code>equals()</code>、<code>hashCode()</code>和<code>toString()</code>方法。这可以减少模板代码的编写，使代码更加简洁。</li>
</ol>
</li>
<li><strong>@ApiModel</strong>：<ol>
<li>这是Swagger库提供的一个注解，用于描述一个模型（即一个POJO类）的信息。在这个例子中，<code>@ApiModel</code>注解的<code>description</code>属性被设置为”首页数据查询请求参数”，这意味着这个类是用来封装发送到首页数据查询接口的请求参数的。</li>
</ol>
</li>
<li><strong>@ApiModelProperty</strong>：<ol>
<li>这也是Swagger库提供的一个注解，用于描述<code>HomeQueryParam</code>类中字段的信息。它可以提供字段的额外信息，比如示例值、描述等，这些信息会在生成的Swagger文档中显示。</li>
</ol>
</li>
<li><strong>@NotBlank</strong>：<ol>
<li>这是一个验证注解，通常与Spring Validation API一起使用，用于确保字段不为空，即字段的值不是<code>null</code>且不是空白字符。如果字段验证失败，会返回<code>message</code>属性指定的错误信息。</li>
</ol>
</li>
</ol>
<p>类中的两个字段：</p>
<ul>
<li><strong>month</strong>：表示年月，使用了<code>@NotBlank</code>注解确保这个字段在请求中必须被提供，且不能是空白字符。<code>@ApiModelProperty</code>注解提供了一个示例值”202404”。</li>
<li><strong>type</strong>：表示类型（单月&#x2F;累计），同样使用了<code>@NotBlank</code>注解确保这个字段在请求中必须被提供，且不能是空白字符。<code>@ApiModelProperty</code>注解提供了一个示例值”单月”。</li>
</ul>
<hr>
<h5 id="mapper中"><a href="#mapper中" class="headerlink" title="mapper中"></a>mapper中</h5><ul>
<li><strong>@Mapper</strong></li>
</ul>
<p>标识为mybatis的mapper接口</p>
<ul>
<li><strong>@DataSource(DataSourceType.<em>PURCHASING</em>)</strong></li>
</ul>
<p>这是若依框架自定义的注解，默认MASTER</p>
<p>其他数据源可以在common-enum-DataSourceType中新增</p>
<p>然后实际配置在admin中的application-druid.yml中</p>
<hr>
<h5 id="controller中"><a href="#controller中" class="headerlink" title="controller中"></a>controller中</h5><ul>
<li><strong>@Api(tags &#x3D; “采购-供应商管理-品类分布”)</strong></li>
</ul>
<p>Swagger中相当于整体的包，一般在Controller的上注解</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Api</span>(tags <span class="operator">=</span> &quot;采购-供应商管理-品类分布&quot;)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(&quot;/purchasing/supplier-manage/category-distribute&quot;)</span><br><span class="line">public class SmCateDistriController &#123;。。。&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>@ApiOperation</strong></li>
</ul>
<p>value为文档中接口名称(一般命名方式都是模块名，用-连接)，notes是接口的描述</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ApiOperation</span>(<span class="keyword">value</span> <span class="operator">=</span> &quot;四大品类分布-品类-数量-占比&quot;, notes <span class="operator">=</span> &quot;传入的参数是date+department，department为空时就返回全部事业部的总值。这个部门或者这个时间没有数据的话就返回空。&quot;)</span><br><span class="line"><span class="variable">@PostMapping</span>(&quot;/cateDistri&quot;)</span><br><span class="line"><span class="variable">@Log</span>(title <span class="operator">=</span> &quot;四大品类分布-品类-数量-占比&quot;, businessType <span class="operator">=</span> BusinessType.SELECT)</span><br><span class="line">public <span class="keyword">Result</span><span class="operator">&lt;</span>CateDistriVo<span class="operator">&gt;</span> selectReplaceRate(<span class="variable">@RequestBody</span> <span class="variable">@Validated</span> SmCatDistriParam param)&#123;</span><br><span class="line">    CateDistriVo cateDistriVo <span class="operator">=</span> smCateDistriService.selectCateDistri(param);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(cateDistriVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>@Log在日志中标志</p>
<ul>
<li>枚举类传递</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiParam(name = &quot;smCatDistriEnum&quot;, value = &quot;切换模块&quot;, required = true)</span></span><br><span class="line"><span class="meta">@RequestParam(&quot;smCatDistriEnum&quot;)</span> <span class="meta">@NotNull(message = &quot;smCatDistriEnum&quot;)</span></span><br><span class="line">SmCatDistriEnum smCatDistriEnum</span><br><span class="line">       </span><br><span class="line">枚举类                                                                </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SmCatDistriEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品类分布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    品类分布(<span class="string">&quot;品类分布&quot;</span>),</span><br><span class="line">    四大品类分布下钻表(<span class="string">&quot;四大品类分布下钻表&quot;</span>),</span><br><span class="line">    品类厂商分布下钻表(<span class="string">&quot;品类厂商分布下钻表&quot;</span>),</span><br><span class="line">    各专业部四大品类分布下钻表(<span class="string">&quot;各专业部四大品类分布下钻表&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    SmCatDistriEnum(String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125; <span class="comment">// 也可以在类上面用@Getter替代</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h4 id="二-Result的使用"><a href="#二-Result的使用" class="headerlink" title="(二) Result的使用"></a>(二) Result的使用</h4><ul>
<li><p>在全限定名：com.cockpit.common.core.domain.Result下</p>
</li>
<li><p>代码</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cockpit.common.core.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liyuqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel( description = &quot;响应结果&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty( value = &quot;响应状态码&quot;, example = &quot;200&quot; )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty( value = &quot;响应消息&quot;, example = &quot;参数不合法&quot; )</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty( value = &quot;响应结果&quot; )</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code  响应状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 响应消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code  响应状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 响应消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, msg, <span class="literal">null</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功响应对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">( String message, T result )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;( <span class="number">200</span>, message, result );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功响应结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 响应结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    响应结果类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">( T result )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ok( <span class="literal">null</span>, result );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功响应对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;Void&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ok( <span class="literal">null</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回失败响应对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status  响应状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 响应消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">( <span class="type">int</span> status, String message )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;( status, message );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>需要包</p>
  <div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>这时可用<code>Result.ok(xxx)</code>返回json格式内容</p>
</li>
</ul>
<hr>
<h4 id="三-装载数据源"><a href="#三-装载数据源" class="headerlink" title="(三) 装载数据源"></a>(三) 装载数据源</h4><ol>
<li><p>在admin相应的sping.datasource.druid.xxx下加，如下</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">            <span class="attr">home:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 这个不能少</span></span><br><span class="line">                <span class="attr">url:</span> </span><br><span class="line">                <span class="attr">username:</span> </span><br><span class="line">                <span class="attr">password:</span> </span><br><span class="line">                <span class="attr">driverClassName:</span> </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在common中找到enums,DataSourceType加相应的枚举类的名字</p>
</li>
<li><p>在framework中找到config.DruidConfig，其中要加两处要加</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid.xxx&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.datasource.druid.xxx&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">homeDataSource</span><span class="params">(DruidProperties druidProperties)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    <span class="keyword">return</span> druidProperties.dataSource(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以及在dataSource方法中加一句</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setDataSource(targetDataSources, DataSourceType.XXX.name(), <span class="string">&quot;xxxDataSource&quot;</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>装配完成，使用的时候只要在Mapper接口上加上<code>@DataSource(DataSourceType.XXX)</code>即可</p>
</li>
</ol>
<hr>
<h4 id="四-接口调用"><a href="#四-接口调用" class="headerlink" title="(四) 接口调用"></a>(四) 接口调用</h4><p>　　接口调用前都要获取<code>token</code>，获取<code>token</code>的方式可以找<code>Login</code>接口。在admin模块下找controller中的system有一个类为<code>SysLoginController</code>。可以用接口文档的注解方式给它注解，运行后我们能看到如下的接口。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/image-20250103194830561.png"
                      style="zoom: 70%;" 
                >

</br>

<p>　　进入调试中，请求头部<code>Authorization</code>是不需要的，请求参数中有如下</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>　　在此之前可以进入Login函数的server层把验证码验证给去了，code那边放的就是验证码。</p>
<p>　　然后默认账号<code>admin</code>，默认密码<code>admin123</code>。提交后获得token，放进其他接口的<code>Authorization</code>即可访问其他接口。</p>
<h4 id="五-参数传递"><a href="#五-参数传递" class="headerlink" title="(五) 参数传递"></a>(五) 参数传递</h4><p>　　后端接口主要有两种参数接收的方式，</p>
<ol>
<li><p><strong>用类封装</strong></p>
<p>这种方式，前端用Json格式传递到后端，后端可以用类来接收数据，如：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;Test1&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/Test1&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;Test1&quot;, businessType = BusinessType.SELECT)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAttributeSupplierInfo</span><span class="params">(<span class="meta">@ApiParam(value = &quot;请求参数&quot;)</span> <span class="meta">@RequestBody</span> AttributeSupplierParam param)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Result.ok(supplierAreaService.getAttributeSupplierInfo(param));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>AttributeSupplierParam内部如下</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;Test1传参&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttributeSupplierParam</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;部门&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;年月&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String month;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;省份&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; province;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那么前端传递过来的参数为json，形如</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;department&quot;</span><span class="punctuation">:</span><span class="string">&quot;具体部门名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;month&quot;</span><span class="punctuation">:</span><span class="string">&quot;具体年月&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;省份1&quot;</span><span class="punctuation">,</span><span class="string">&quot;省份2&quot;</span><span class="punctuation">,</span><span class="string">&quot;省份3&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>直接传递</strong></p>
<p>这种方式，前端用<code>application/x-www-form-urlencoded</code>传递到后端，后端可以用类来接收数据，如：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;Test2&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/Test2&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;Test2&quot;, businessType = BusinessType.SELECT)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;AreaTabListVo&gt; <span class="title function_">selectAreaTabList</span><span class="params">(<span class="meta">@ApiParam(name = &quot;name&quot;, value = &quot;张三&quot;, required = false, example = &quot;张三&quot;)</span></span></span><br><span class="line"><span class="params">                                                         <span class="meta">@RequestParam(value = &quot;name&quot;, required = false)</span> String name)</span> &#123;</span><br><span class="line">    <span class="type">AreaTabListVo</span> <span class="variable">areaTabListVo</span> <span class="operator">=</span> supplierAreaService.selectAreaTabList(name);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(areaTabListVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在使用<code>get</code>时，能够直接从url获取相应值，在<code>post</code>时，能够从请求体中获取相应的数据。</p>
</li>
</ol>
<h1 id="代码工具"><a href="#代码工具" class="headerlink" title="代码工具"></a>代码工具</h1><h2 id="1-JsonUtils"><a href="#1-JsonUtils" class="headerlink" title="1.JsonUtils"></a>1.JsonUtils</h2><blockquote>
<p>若依框架自己封装了相关的Json工具，可以自由转换</p>
</blockquote>
<ul>
<li><p>包来源</p>
<p><code>com.cockpit.common.utils.json.JsonUtils</code></p>
</li>
<li><p>可使用工具</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JsonUtils.toList(groupLevelString, String.class); <span class="comment">// string转List&lt;String&gt;</span></span><br><span class="line">JsonUtils.toJsonString(parm.getDataSourceList()); <span class="comment">// List&lt;String&gt;转string</span></span><br><span class="line"><span class="comment">// 还有toMap toJsonNode等等方法</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="2-SecurityUtils"><a href="#2-SecurityUtils" class="headerlink" title="2.SecurityUtils"></a>2.SecurityUtils</h2><p>系统用户信息</p>
<blockquote>
<ul>
<li>若依框架中的<code>SecurityUtils</code>是一个用于简化用户身份验证和权限管理的工具类，尤其在前后端分离版本中扮演了核心角色。</li>
<li><strong>获取当前用户信息</strong>：<code>SecurityUtils</code>提供静态方法直接获取当前登录用户的基本信息（如用户名、用户ID等），无需手动解析安全上下文。例如，<code>SecurityUtils.getUsername()</code>可直接返回当前会话的用户</li>
<li><strong>权限验证</strong>：结合Shiro或Spring Security框架，<code>SecurityUtils</code>可快速验证用户是否具备特定角色或权限，例如通过<code>hasRole()</code>方法判断用户角色</li>
</ul>
</blockquote>
<ul>
<li><p>该类主要是通过用户登录后的token去访问Redis，获取预先存放在Redis中的数据。</p>
</li>
<li><p>包来源</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">com.cockpit.common.utils.SecurityUtils;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可使用工具</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">SecurityUtils.getAuthentication(); <span class="comment">// 得到用户信心</span></span><br><span class="line">SecurityUtils.getLoginUser(); <span class="comment">// 得到当前用户完整的用户信息</span></span><br><span class="line"><span class="comment">// SecurityUtils.getLoginUser()相当于SecurityUtils.getAuthentication().getPrincipal();</span></span><br><span class="line">SecurityUtils.getDeptId();</span><br><span class="line">SecurityUtils.etUsername();</span><br><span class="line">SecurityUtils.getUserId();</span><br></pre></td></tr></table></figure></div>

<p>roleIds获取</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> SecurityUtils.getLoginUser();</span><br><span class="line"><span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> loginUser.getUser();</span><br><span class="line">Set&lt;Long&gt; roleIds = user.getRoles().stream().map(SysRole::getRoleId).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="3-Mybatis-plus"><a href="#3-Mybatis-plus" class="headerlink" title="3.Mybatis-plus"></a>3.Mybatis-plus</h2><p>　　<code>mybatis-plus</code>主要针对于单表的CRUD操作。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询字段</span></span><br><span class="line">QueryWrapper&lt;EmpInfoEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">wrapper.isNotNull(<span class="string">&quot;post_sequence&quot;</span>).groupBy(<span class="string">&quot;post_sequence&quot;</span>)</span><br><span class="line">    .select(<span class="string">&quot;post_sequence&quot;</span>).orderByAsc(<span class="string">&quot;post_sequence&quot;</span>);</span><br><span class="line">List&lt;Object&gt; postSequences = empInfoMapper.selectObjs(wrapper);</span><br><span class="line"></span><br><span class="line">postBasicInfoMapper</span><br><span class="line">    .selectList(Wrappers</span><br><span class="line">                .lambdaQuery(AdsRaPostBasicInfoDfEntity.class)</span><br><span class="line">                .eq(AdsRaPostBasicInfoDfEntity::getPostSequence, entity.getPostSequence())</span><br><span class="line">               );</span><br></pre></td></tr></table></figure></div>
<p>还可以<code>selectOne</code>、<code>selectById</code>等</p>
<ul>
<li><p>在此之前需要在mapper层继承<code>BaseMapper&lt;T&gt;</code>，其中的T是你数据库映射的类</p>
</li>
<li><p>数据库映射类，需要做表和字段的映射，举例</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value =&quot;t_emp_info&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpInfoEntity</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键自增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="meta">@TableField(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工号（唯一）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;emp_no&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String empNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="4-分页工具"><a href="#4-分页工具" class="headerlink" title="4.分页工具"></a>4.分页工具</h2><p>　　分页有两种方式，一种是数据库分页，一种是读到内存来分页。</p>
<h3 id="4-1-数据存放类Page"><a href="#4-1-数据存放类Page" class="headerlink" title="4.1.数据存放类Page"></a>4.1.数据存放类<code>Page</code></h3><p>　　首先我先说一种存放分页数据的类，是mybatis-plus自带的一个专门存放分页数据的类<code>Page</code>，是<code>IPage</code>的实现类。</p>
<p>　　包括了如下的变量</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Page</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">IPage</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8545996863226528798L</span>;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;T&gt; records;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> total;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> size;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> current;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;OrderItem&gt; orders;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> optimizeCountSql;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> searchCount;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> optimizeJoinOfCountSql;</span><br><span class="line">    <span class="keyword">protected</span> String countId;</span><br><span class="line">    <span class="keyword">protected</span> Long maxLimit;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">IPage中还有个pages</span><br></pre></td></tr></table></figure></div>

<p>　　其中<code>records</code>就是存放数据的地方，<code>total</code>是数据总数，size是页面大小，<code>pages</code>是总页数，<code>current</code>是当前页。</p>
<h3 id="4-2-参数类PageDomain"><a href="#4-2-参数类PageDomain" class="headerlink" title="4.2.参数类PageDomain"></a>4.2.参数类<code>PageDomain</code></h3><blockquote>
<p>该类是若依管理的一个类，用于传入分页相关参数</p>
</blockquote>
<ul>
<li><p>包来源</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">com.cockpit.common.core.page.PageDomain</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>变量</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDomain</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/** 当前记录起始索引 */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 每页显示记录数 */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;分页大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 排序列 */</span></span><br><span class="line">    <span class="keyword">private</span> String orderByColumn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 排序的方向desc或者asc */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">isAsc</span> <span class="operator">=</span> <span class="string">&quot;asc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 分页参数合理化 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">reasonable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们可以在自己的参数类上<strong>继承这个类</strong>：</p>
<p><code>public class MyParam extends PageDomain</code></p>
</li>
</ul>
<h3 id="4-3-分页"><a href="#4-3-分页" class="headerlink" title="4.3.分页"></a>4.3.分页</h3><blockquote>
<p>前面提到有两种分页方式。数据库自带的分页，是用的自带的分页工具<code>PageHelper</code>;内存中分页是用的若依的类<code>PageUtils</code>，但是这个类功能不够强大，在这边加了一个类用于分页。</p>
</blockquote>
<h4 id="A-PageHelper"><a href="#A-PageHelper" class="headerlink" title="A.PageHelper"></a>A.<code>PageHelper</code></h4><p>sysRoles读出来就是已经分好页的</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(param.getPageNum(), param.getPageSize());</span><br><span class="line">List&lt;SysRole&gt; sysRoles = permissionConfigMapper.selectRoleAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取分页信息</span></span><br><span class="line">PageInfo&lt;SysRole&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(sysRoles);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取总记录数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageInfo.getTotal();</span><br><span class="line"><span class="type">int</span> <span class="variable">totalPages</span> <span class="operator">=</span> pageInfo.getPages();</span><br><span class="line">Page&lt;RoleListResult&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(param.getPageNum(), param.getPageSize());</span><br><span class="line">page.setTotal(total);</span><br><span class="line">page.setRecords(roleListResults);</span><br><span class="line">page.setPages(totalPages);</span><br></pre></td></tr></table></figure></div>

<h4 id="B-PageUtils"><a href="#B-PageUtils" class="headerlink" title="B. PageUtils"></a>B. <code>PageUtils</code></h4><p>　　加上自己在内存中分页的方法</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getPaginatedList</span><span class="params">(List&lt;T&gt; list, <span class="type">int</span> pageNumber, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">totalItems</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> (pageNumber - <span class="number">1</span>) * pageSize;</span><br><span class="line">    <span class="comment">// 处理越界情况</span></span><br><span class="line">    <span class="keyword">if</span> (startIndex &gt;= totalItems || pageNumber &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> Math.min(startIndex + pageSize, totalItems);</span><br><span class="line">    <span class="keyword">return</span> list.subList(startIndex, endIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;RoleListResult&gt; data = PageUtils.getPaginatedList(roleListResults, param.getPageNum(), param.getPageSize());</span><br><span class="line"></span><br><span class="line">Page&lt;RoleListResult&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(param.getPageNum(), param.getPageSize());</span><br><span class="line"><span class="comment">// 序号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">indexTemp</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(RoleListResult single: data)&#123;</span><br><span class="line">    single.setIndex((param.getPageNum()-<span class="number">1</span>)*param.getPageSize()+indexTemp++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">page.setTotal(roleListResults.size());</span><br><span class="line">page.setRecords(data);</span><br><span class="line">page.setPages(roleListResults.size()/param.getPageSize());</span><br></pre></td></tr></table></figure></div>

<h2 id="5-BaseException"><a href="#5-BaseException" class="headerlink" title="5.BaseException"></a>5.<code>BaseException</code></h2><blockquote>
<p>若依框架用Result.ok()输出结果时，有个msg，有的时候有错误，判断参数等等的时候没有data，只要返回500的msg可以用该方法抛出</p>
</blockquote>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>(<span class="string">&quot;ssssss&quot;</span>);</span><br><span class="line"><span class="comment">// 抛出的ssssss会在Json的msg中显示</span></span><br></pre></td></tr></table></figure></div>

<h2 id="6-手动切换数据源"><a href="#6-手动切换数据源" class="headerlink" title="6.手动切换数据源"></a>6.手动切换数据源</h2><blockquote>
<p>不推荐使用，一般还是用若依自带的<code>@DataSource(DataSourceType.Master)</code>这样的方式</p>
</blockquote>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">DynamicDataSourceContextHolder.setDataSourceType(DataSourceType.SLAVE.name());</span><br></pre></td></tr></table></figure></div>

<p>　　利用上下文对于当前线程的数据源进行手动切换。</p>
<h1 id="结束点"><a href="#结束点" class="headerlink" title="结束点"></a>结束点</h1><p>　　若依框架中还有更多功能，比如自动代码生成，权限分配等等，这些可以自己<a class="link"   href="https://doc.ruoyi.vip/ruoyi-vue/" >参考文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>若依</tag>
      </tags>
  </entry>
  <entry>
    <title>下钻表导出为Excel</title>
    <url>/2025/01/08/technology/java/%E4%B8%8B%E9%92%BB%E8%A1%A8%E5%AF%BC%E5%87%BA%E4%B8%BAExcel/</url>
    <content><![CDATA[<p>这两天要搞Excel的生成接口，然后把下钻表导出为Excel。于是我自定义了一个工具类，里面包含了两个方法，其中一个是能够单元格合并的，一个是不合并的。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　这两天要搞Excel的生成接口，然后把下钻表导出为Excel。</p>
<p>　　为了能够复用，我自定义了一个工具类。所用技术点包括Excel操作，Web编程，Java反射，使用反射也是为了提高代码的复用性。工具类中包含了两个方法，其中一个是能够单元格合并的，一个是不合并的。</p>
<p>　　不合并的是这样的：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th>Name</th>
    <th>Age</th>
    <th>Quantity</th>
    <th>Product</th>
  </tr>
  <tr>
    <td>王五</td>
    <td>35</td>
    <td>10</td>
    <td>手机</td>
  </tr>
  <tr>
    <td>王五</td>
    <td>35</td>
    <td>5</td>
    <td>电脑</td>
  </tr>
  <tr>
    <td>王五</td>
    <td>35</td>
    <td>15</td>
    <td>平板</td>
  </tr>
  <tr>
    <td>周八</td>
    <td>31</td>
    <td>8</td>
    <td>耳机</td>
  </tr>
</table>

</br>

<p>　　合并的话转化为这种格式：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th>Name</th>
    <th>Age</th>
    <th>Quantity</th>
    <th>Product</th>
  </tr>
  <tr>
    <td rowspan="3">王五</td> <!-- 合并三行 -->
    <td rowspan="3">35</td> <!-- 合并三行 -->
    <td>10</td>
    <td>手机</td>
  </tr>
  <tr>
    <td>5</td>
    <td>电脑</td>
  </tr>
  <tr>
    <td>15</td>
    <td>平板</td>
  </tr>
  <tr>
    <td>周八</td>
    <td>31</td>
    <td>8</td>
    <td>耳机</td>
  </tr>
</table>

</br>

<h2 id="Java操作Excel"><a href="#Java操作Excel" class="headerlink" title="Java操作Excel"></a>Java操作Excel</h2><p>　　首先要知道Excel如何用Java方法进行操作，先介绍一些简单的方法。</p>
<h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>　　Java操作Excel可以用两种方式，一种是Apache POI、JExcelAPI、EasyExcel等。这里我们使用的即为Apache POI，导入相关包，具体版本可以在<a class="link"   href="https://mvnrepository.com/" >Maven<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>上查询。</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导出excel工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><ul>
<li><p>创建Excel工作簿</p>
<p><code>XSSFWorkbook()</code>相当于新建一个<code>.xlsx</code>格式的Excel实例</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建工作表</p>
<p>一个工作簿实例可以包含多个工作表</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建名为Sheet1的工作表，sheet为实例对象</span></span><br><span class="line"><span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Sheet1&quot;</span>); </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建行</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为0，则在第1行创建。数字为i，则在第i+1行创建</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取某行</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(rowIndex);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>单元格操作</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在row这行创建第i+1列的单元格</span></span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(i);</span><br><span class="line"><span class="comment">// 填充单元格数据</span></span><br><span class="line">cell.setCellValue(String text);</span><br><span class="line"><span class="comment">// 获取某个单元格</span></span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(colIndex);</span><br><span class="line"><span class="comment">// 获取某个单元格数据(字符串类型)</span></span><br><span class="line">cell.getStringCellValue();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>单元格合并</p>
<p>单元格合并首先要有一个单元格范围的实例对象，传入后才可以合并。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取单元格范围</span></span><br><span class="line"><span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(startRow, endRow, startCol, endCol);</span><br><span class="line"><span class="comment">// 合并单元格</span></span><br><span class="line">sheet.addMergedRegion(cellRangeAddress);</span><br></pre></td></tr></table></figure></div>

<p><code>startRow</code>：表示要合并的单元格范围的起始行，包含该行。<br><code>endRow</code>：表示要合并的单元格范围的结束行，包含该行。<br><code>startCol</code>：表示要合并的单元格范围的起始列，包含该列。<br><code>endCol</code>：表示要合并的单元格范围的结束列，包含该列。<br>注意：都从0开始</p>
</li>
<li><p>设置单元格格式&#x2F;设置行格式</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">sheet.autoSizeColumn(i);	<span class="comment">//设置某列宽度为自动</span></span><br><span class="line">sheet.getColumnWidth(i);	<span class="comment">// 获取某列宽度</span></span><br><span class="line"></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line"><span class="type">CellStyle</span> <span class="variable">dataStyle</span> <span class="operator">=</span> workbook.createCellStyle(); <span class="comment">// 建立一个单元格格式</span></span><br><span class="line">dataStyle.setAlignment(HorizontalAlignment.CENTER);  <span class="comment">// 水平居中</span></span><br><span class="line">dataStyle.setVerticalAlignment(VerticalAlignment.CENTER); <span class="comment">// 垂直居中</span></span><br><span class="line"><span class="comment">// 其他自己查查去</span></span><br><span class="line">cell.setCellStyle(dataStyle); <span class="comment">// 某个单元格设置如上的格式</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="传输方法"><a href="#传输方法" class="headerlink" title="传输方法"></a>传输方法</h2><p>　　利用HTTP响应，向客户端发送数据，相当于是网络编程。使用的是<code>HttpServletResponse response</code>，我们所构建传输的过程，就是构建一个http的数据包，所以相应的响应头是需要设置的。</p>
<p>　　另外，传输数据是用的字节流<code>OutputStream</code>，作为数据流。</p>
<p>　　在此代码中，用到的相关代码如下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"> <span class="comment">// 设置响应头</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);	<span class="comment">// 传输的数据类型是.xlsx</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=data.xlsx&quot;</span>);	<span class="comment">// 传输的文件名为data.xlsx</span></span><br><span class="line">workbook.write(outputStream);	<span class="comment">// 将workbook中的数据</span></span><br></pre></td></tr></table></figure></div>

<h2 id="类属性反射"><a href="#类属性反射" class="headerlink" title="类属性反射"></a>类属性反射</h2><p>　　为了代码的重用性，在方法中传递了一个<code>Map&lt;String,String&gt;</code>作为表头和类属性的映射。具体k,y是<code>&lt;表头字段,类属性名&gt;</code>。</p>
<p>　　然后取出了属性名后，要用反射来取相关的值，如下所示。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取属性名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> mapping.get(headings.get(j));</span><br><span class="line"><span class="type">T</span> <span class="variable">item</span> <span class="operator">=</span> data.get(i);	</span><br><span class="line"><span class="comment">// 根据属性名获取相关的属性，注意这边获取属性要用Declared，否则无法取值</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> item.getClass().getDeclaredField(fieldName);</span><br><span class="line"><span class="comment">// 设置Field对象可访问</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 获取item对象的相关属性</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(item);</span><br></pre></td></tr></table></figure></div>

<p>　　上面的<code>data.get(i)</code>是从<code>List data</code>中获取index为i的数据。反射语句主要就是<code>Field field = item.getClass().getDeclaredField(fieldName);</code>这一句</p>
<h2 id="完整的程序"><a href="#完整的程序" class="headerlink" title="完整的程序"></a>完整的程序</h2><ul>
<li><p>需要引入的包</p>
<p>我这边导入apache的POI作为表格操作包</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导出excel工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>代码</p>
<ul>
<li><p><code>setStyle</code>方法是格式的设置，<code>execute</code>方法是带合并的，<code>executeWithoutMerge</code>是不带合并的。</p>
</li>
<li><p>两个方法中的mapping都是表头对于类属性的映射关系，<code>response</code>是需要，合并中要多传一个<code>limit</code>，就是前多少列是需要合并的。</p>
</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cockpit.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: 数据导出为excel的工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Pan Tianyu 00414384</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2025/1/6 14:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportExcelCommon</span> &#123;</span><br><span class="line">    <span class="comment">// 创建表头单元格样式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CellStyle headerStyle;</span><br><span class="line">    <span class="comment">// 创建数据行单元格样式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CellStyle dataStyle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置表格式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setStyle</span><span class="params">(Workbook workbook)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建表头单元格样式</span></span><br><span class="line">        headerStyle = workbook.createCellStyle();</span><br><span class="line">        headerStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        headerStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        headerStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());</span><br><span class="line">        headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        <span class="type">Font</span> <span class="variable">headerFont</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">        headerFont.setBold(<span class="literal">false</span>);</span><br><span class="line">        headerFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">10</span>);</span><br><span class="line">        headerStyle.setFont(headerFont);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建数据行单元格样式</span></span><br><span class="line">        dataStyle = workbook.createCellStyle();</span><br><span class="line">        dataStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        dataStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 返回excel的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 传List类型数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headings 传表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapping 传类表头和字段的映射关系 &lt;表头,字段&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 合并几列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 一行数据的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(HttpServletResponse response, List&lt;T&gt; data, List&lt;String&gt; headings, Map&lt;String, String&gt; mapping, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line">            setStyle(workbook);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建表头行</span></span><br><span class="line">            <span class="type">Row</span> <span class="variable">headerRow</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> headerRow.createCell(i);</span><br><span class="line">                cell.setCellStyle(headerStyle);</span><br><span class="line">                cell.setCellValue(headings.get(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 填充数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">                <span class="type">T</span> <span class="variable">item</span> <span class="operator">=</span> data.get(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; headings.size(); j++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> mapping.get(headings.get(j));</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(j);</span><br><span class="line">                    cell.setCellStyle(dataStyle);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> item.getClass().getDeclaredField(fieldName);</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(item);</span><br><span class="line">                        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                            cell.setCellValue(value.toString());</span><br><span class="line">                            cell.setCellStyle(dataStyle);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并单元格逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (limit &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; limit; col++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">startRow</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (startRow &lt; data.size() + <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">endRow</span> <span class="operator">=</span> startRow + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span> (endRow &lt; data.size() + <span class="number">1</span> &amp;&amp;</span><br><span class="line">                                isEqual(sheet, startRow, endRow, col, limit)) &#123;</span><br><span class="line">                            endRow++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (endRow - startRow &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(startRow, endRow - <span class="number">1</span>, col, col);</span><br><span class="line">                            sheet.addMergedRegion(cellRangeAddress);</span><br><span class="line">                        &#125;</span><br><span class="line">                        startRow = endRow;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                sheet.autoSizeColumn(i);</span><br><span class="line">                <span class="type">int</span> <span class="variable">autoSizedWidth</span> <span class="operator">=</span> sheet.getColumnWidth(i);</span><br><span class="line">                sheet.setColumnWidth(i, autoSizedWidth + <span class="number">600</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置响应头</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=data.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(Sheet sheet, <span class="type">int</span> startRow, <span class="type">int</span> endRow, <span class="type">int</span> col, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">startValue</span> <span class="operator">=</span> getCellValue(sheet, startRow, i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">endValue</span> <span class="operator">=</span> getCellValue(sheet, endRow, i);</span><br><span class="line">            <span class="keyword">if</span> (!startValue.equals(endValue)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getCellValue</span><span class="params">(Sheet sheet, <span class="type">int</span> rowIndex, <span class="type">int</span> colIndex)</span> &#123;</span><br><span class="line">        <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(rowIndex);</span><br><span class="line">        <span class="keyword">if</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(colIndex);</span><br><span class="line">            <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> cell.getStringCellValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行导出 Excel 操作，不进行单元格合并</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 传 List 类型数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headings 传表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapping 传类表头和字段的映射关系 &lt;表头,字段&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否生成成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 一行数据的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">executeWithoutMerge</span><span class="params">(HttpServletResponse response, List&lt;T&gt; data, List&lt;String&gt; headings, Map&lt;String, String&gt; mapping)</span> &#123;</span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            workbook = <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Data Sheet&quot;</span>);</span><br><span class="line">            setStyle(workbook);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建表头行</span></span><br><span class="line">            <span class="type">Row</span> <span class="variable">headerRow</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> headerRow.createCell(i);</span><br><span class="line">                cell.setCellStyle(headerStyle);</span><br><span class="line">                cell.setCellValue(headings.get(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 缓存 Field 对象，避免多次反射</span></span><br><span class="line">            Field[] fields = <span class="keyword">new</span> <span class="title class_">Field</span>[headings.size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> mapping.get(headings.get(i));</span><br><span class="line">                fields[i] = data.get(<span class="number">0</span>).getClass().getDeclaredField(fieldName);</span><br><span class="line">                fields[i].setAccessible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (T item : data) &#123;</span><br><span class="line">                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(rowIndex);</span><br><span class="line">                <span class="type">int</span> <span class="variable">cellIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(cellIndex);</span><br><span class="line">                    cell.setCellStyle(dataStyle);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(item);</span><br><span class="line">                    <span class="keyword">if</span> (value!= <span class="literal">null</span>) &#123;</span><br><span class="line">                        cell.setCellValue(value.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    cellIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">                rowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                sheet.autoSizeColumn(i);</span><br><span class="line">                <span class="type">int</span> <span class="variable">autoSizedWidth</span> <span class="operator">=</span> sheet.getColumnWidth(i);</span><br><span class="line">                sheet.setColumnWidth(i, autoSizedWidth + <span class="number">600</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置响应头，指定内容类型和文件名称</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=data.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取输出流</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">            workbook.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 设置响应状态码为 500 并发送错误信息</span></span><br><span class="line">                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;Error generating Excel: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (workbook!= <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    workbook.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>实际调用写接口如下</li>
</ul>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;Test&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/selectFourDistribution&quot;)</span></span><br><span class="line"><span class="meta">@Log(title = &quot;Test&quot;, businessType = BusinessType.EXPORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectFourDistribution</span><span class="params">(HttpServletResponse response,<span class="meta">@RequestBody</span> TestParam param)</span>&#123;</span><br><span class="line">    List&lt;FourDistributionResult&gt; data = testService.selectTest(param).getTestList(); <span class="comment">// 自己的service出的List</span></span><br><span class="line">    List&lt;String&gt; headings = Arrays.asList(<span class="string">&quot;序号&quot;</span>,<span class="string">&quot;供应商名称&quot;</span>,<span class="string">&quot;代码&quot;</span>);</span><br><span class="line">    LinkedHashMap&lt;String, String&gt; mapping = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    mapping.put(<span class="string">&quot;序号&quot;</span>,<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    mapping.put(<span class="string">&quot;供应商名称&quot;</span>,<span class="string">&quot;supplierName&quot;</span>);</span><br><span class="line">    mapping.put(<span class="string">&quot;代码&quot;</span>,<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    ExportExcelCommon.executeWithoutMerge(response, data, headings, mapping);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>　　这个合并的方法execute其实还有很大的不足之处。我这边的合并的情况，只考虑了一级合并，没有考虑多级合并。</p>
<p>　　拿二级合并举个例子，如果原来是这样的：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">李四</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">李四</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
</table>
</br>

<p>　　那么<code>limit</code>为3的二级合并就是这样的：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
  </tr>
  <tr>
    <td rowspan="2" style="white-space: nowrap;">1</td>
    <td rowspan="2" style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
  <tr>
    <td rowspan="3" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">李四</td>
    <td rowspan="2" style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
</table>
</br>

<p>　　当时为了节省时间并没有做成像这样的。现在做出来了，但是没有转化为springboot里面能够直接传给前端的方法，而是本地生成xlsx的方法，有兴趣可以自己转一下，代码如下。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportExcelCommon</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行导出 Excel 操作，支持多级合并</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 传 List 类型数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headings 传表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapping 传类表头和字段的映射关系 &lt;表头, 字段&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 导出文件的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 最多合并到第几列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 一行数据的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否生成成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">executeMultMerge</span><span class="params">(List&lt;T&gt; data, List&lt;String&gt; headings, Map&lt;String, String&gt; mapping, String path, <span class="type">int</span> limit)</span>&#123;</span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;Data Sheet&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建表头行</span></span><br><span class="line">        <span class="type">Row</span> <span class="variable">headerRow</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">            <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> headerRow.createCell(i);</span><br><span class="line">            cell.setCellValue(headings.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 存储每个单元格的合并起始行和结束行，初始化为当前行</span></span><br><span class="line">            <span class="type">int</span>[][] mergeRanges = <span class="keyword">new</span> <span class="title class_">int</span>[headings.size()][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headings.size(); i++) &#123;</span><br><span class="line">                mergeRanges[i][<span class="number">0</span>] = rowIndex;</span><br><span class="line">                mergeRanges[i][<span class="number">1</span>] = rowIndex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">T</span> <span class="variable">prevItem</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (T item : data) &#123;</span><br><span class="line">                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(rowIndex);</span><br><span class="line">                <span class="type">int</span> <span class="variable">cellIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">merge</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (String heading : headings) &#123;</span><br><span class="line">                    <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(cellIndex);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> mapping.get(heading);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> item.getClass().getDeclaredField(fieldName);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(item);</span><br><span class="line">                    <span class="keyword">if</span> (value!= <span class="literal">null</span>) &#123;</span><br><span class="line">                        cell.setCellValue(value.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 检查是否需要合并，从第一列开始，直到 limit 列</span></span><br><span class="line">                    <span class="keyword">if</span> (cellIndex &lt; limit) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (prevItem!= <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">prevField</span> <span class="operator">=</span> prevItem.getClass().getDeclaredField(fieldName);</span><br><span class="line">                            prevField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">prevValue</span> <span class="operator">=</span> prevField.get(prevItem);</span><br><span class="line">                            <span class="keyword">if</span> (prevValue == <span class="literal">null</span> ||!prevValue.equals(value)) &#123;</span><br><span class="line">                                merge = <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (merge) &#123;</span><br><span class="line">                            <span class="comment">// 更新合并范围</span></span><br><span class="line">                            mergeRanges[cellIndex][<span class="number">1</span>] = rowIndex;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 合并之前标记的范围</span></span><br><span class="line">                            <span class="keyword">if</span> (mergeRanges[cellIndex][<span class="number">1</span>] &gt; mergeRanges[cellIndex][<span class="number">0</span>]) &#123;</span><br><span class="line">                                <span class="type">CellRangeAddress</span> <span class="variable">newRange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(mergeRanges[cellIndex][<span class="number">0</span>], mergeRanges[cellIndex][<span class="number">1</span>], cellIndex, cellIndex);</span><br><span class="line">                                sheet.addMergedRegion(newRange);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 开始新的合并范围</span></span><br><span class="line">                            mergeRanges[cellIndex][<span class="number">0</span>] = rowIndex;</span><br><span class="line">                            mergeRanges[cellIndex][<span class="number">1</span>] = rowIndex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cellIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">                prevItem = item;</span><br><span class="line">                rowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理最后一组的合并</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mergeRanges[i][<span class="number">1</span>] &gt; mergeRanges[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="type">CellRangeAddress</span> <span class="variable">newRange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(mergeRanges[i][<span class="number">0</span>], mergeRanges[i][<span class="number">1</span>], i, i);</span><br><span class="line">                    sheet.addMergedRegion(newRange);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path)) &#123;</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　具体举例调用：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Order&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">2</span>, <span class="string">&quot;包子&quot;</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">1</span>, <span class="string">&quot;馒头&quot;</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">2</span>, <span class="string">&quot;包子&quot;</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">2</span>, <span class="string">&quot;包子&quot;</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">2</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">2</span>, <span class="string">&quot;馒头&quot;</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; headings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        headings.add(<span class="string">&quot;组号&quot;</span>);</span><br><span class="line">        headings.add(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        headings.add(<span class="string">&quot;数量&quot;</span>);</span><br><span class="line">        headings.add(<span class="string">&quot;商品&quot;</span>);</span><br><span class="line">        HashMap&lt;String, String&gt; mapping = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        mapping.put(<span class="string">&quot;组号&quot;</span>,<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        mapping.put(<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        mapping.put(<span class="string">&quot;数量&quot;</span>,<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        mapping.put(<span class="string">&quot;商品&quot;</span>,<span class="string">&quot;goodName&quot;</span>);</span><br><span class="line">        System.out.println(ExportExcelCommon.executeMultMerge(data,headings,mapping,<span class="string">&quot;outputMultMerge.xlsx&quot;</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这种情况就会有如下表格：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
  </tr>
  <tr>
    <td rowspan="2" style="white-space: nowrap;">1</td>
    <td rowspan="2" style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
  <tr>
    <td rowspan="3" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">李四</td>
    <td rowspan="2" style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">包子</td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
  </tr>
</table>
</br>

<p>　　如果把<code>limit</code>设置为4的话，就会变成下面的情况：</p>
<table style="margin: auto; text-align: center; width: min-content;">
  <tr>
    <th style="white-space: nowrap;">组号</th>
    <th style="white-space: nowrap;">姓名</th>
    <th style="white-space: nowrap;">数量</th>
    <th style="white-space: nowrap;">商品</th>
    <th style="white-space: nowrap;"></th>
  </tr>
  <tr>
    <td rowspan="2" style="white-space: nowrap;">1</td>
    <td rowspan="2" style="white-space: nowrap;">张三</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">包子</td>
    <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">1</td>
    <td style="white-space: nowrap;">馒头</td>
    <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td rowspan="3" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">李四</td>
    <td rowspan="2" style="white-space: nowrap;">2</td>
    <td rowspan="2" style="white-space: nowrap;">包子</td>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
      <td style="white-space: nowrap;"></td>
  </tr>
  <tr>
    <td style="white-space: nowrap;">王五</td>
    <td style="white-space: nowrap;">2</td>
    <td style="white-space: nowrap;">馒头</td>
    <td style="white-space: nowrap;"></td>
  </tr>
</table>
</br>

<p>　　当然这边李四是占了两行的，这边使用html展示的，所以不好展示，我在最后多加了一列来凸显李四是占了两行的。</p>
<p>　　有兴趣的话，大家可以自己研究一下。</p>
<p>　　OK啦，拜拜！！</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>接口</tag>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>利用注解实现AOP</title>
    <url>/2025/01/20/technology/java/%E5%88%A9%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0AOP/</url>
    <content><![CDATA[<p>　　AOP（面向切面编程）。AOP是一种编程范式，旨在通过预编译和运行期动态代理来增强方法，而注解在AOP中主要用于定义切面（Aspect）、切入点（Pointcut）和通知（Advice）。</p>
<p>　　注解提供了一种在代码中添加元数据的方式，使得开发者可以更方便地定义这些切面、切入点和通知，从而在不改变原有业务逻辑代码的情况下，实现功能增强‌<a href="https://blog.csdn.net/jwentao01/article/details/106728239"><sup>[1]</sup></a></p>
<h1 id="AOP的基本概念-1"><a href="#AOP的基本概念-1" class="headerlink" title="AOP的基本概念[1]"></a>AOP的基本概念<a href="https://blog.csdn.net/jwentao01/article/details/106728239"><sup>[1]</sup></a></h1><ul>
<li>‌<strong>切面（Aspect）</strong>‌：通常是一个类，里面可以定义切入点和通知。</li>
<li>‌<strong>切入点（Pointcut）</strong>‌：带有通知的连接点，定义了通知应用的场景。</li>
<li>‌<strong>通知（Advice）</strong>‌：在特定的切入点上执行的增强处理，包括前置、返回后、异常处理等类型。</li>
<li>‌<strong>连接点（JointPoint）</strong>‌：程序执行过程中的明确点，通常是方法的调用。</li>
<li>‌<strong>目标对象（Target Object）</strong>‌：包含连接点的对象，也被称作被通知或被代理对象。</li>
<li>‌<strong>织入（Weave）</strong>‌：将切面应用到目标对象并导致代理对象创建的过程。</li>
<li>‌<strong>引入（Introduction）</strong>‌：在不修改代码的前提下，为类动态地添加一些方法或字</li>
</ul>
<h1 id="注解的使用-2"><a href="#注解的使用-2" class="headerlink" title="注解的使用[2]"></a>注解的使用<a href="https://blog.csdn.net/kkkkatoq/article/details/137520509"><sup>[2]</sup></a></h1><h2 id="一、-interface-关键字"><a href="#一、-interface-关键字" class="headerlink" title="一、@interface 关键字"></a>一、@interface 关键字</h2><p>我们想定义一个自己的注解 需要使用 @interface 关键字来定义。<br>如定义一个叫 MyAnnotation 的注解：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123; &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二、元注解"><a href="#二、元注解" class="headerlink" title="二、元注解"></a>二、元注解</h2><p>  光加上 <code>@interface</code> 关键字 还不够，我们还需要了解5大元注解</p>
<ul>
<li><code>@Retention</code></li>
<li><code>@Target</code></li>
<li><code>@Documented</code></li>
<li><code>@Inherited（JDK8 引入）</code></li>
<li><code>@Repeatable（JDK8 引入）</code></li>
</ul>
<p><strong>1）@Retention 指定注解的生命周期</strong> </p>
<p>   <code>@Retention(RetentionPolicy.SOURCE)</code></p>
<p>其中<code>Retention</code>是一个枚举类:</p>
<ol>
<li><code>RetentionPolicy.SOURCE</code> : 注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃(.java文件)</li>
<li><code>RetentionPolicy.CLASS</code> :注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期(.class文件)</li>
<li><code>RetentionPolicy.RUNTIME</code>: 注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在(内存中的字节码)</li>
</ol>
<p><strong>2）@Target指定注解可以修饰的元素类型</strong></p>
<p><code>@Target(ElementType.Field)</code></p>
<ol>
<li><code>ElementType.ANNOTATION_TYPE</code> - 标记的注解可以应用于注解类型。</li>
<li><code>ElementType.CONSTRUCTOR</code> - 标记的注解可以应用于构造函数。</li>
<li><code>ElementType.FIELD</code> - 标记的注解可以应用于字段或属性。</li>
<li><code>ElementType.LOCAL_VARIABLE</code> - 标记的注解可以应用于局部变量。</li>
<li><code>ElementType.METHOD</code> - 标记的注解可以应用于方法。</li>
<li><code>ElementType.PACKAGE</code> - 标记的注解可以应用于包声明。</li>
<li><code>ElementType.PARAMETER</code> - 标记的注解可以应用于方法的参数。</li>
<li><code>ElementType.TYPE</code> - 标记的注解可以应用于类的任何元素。</li>
</ol>
<p> <strong>3）@Documented</strong></p>
<p>指定注解会被JavaDoc工具提取成文档。默认情况下，JavaDoc是不包括文档的</p>
<p> <strong>4）@Inherited</strong><br>表示该注解会被子类继承，注意，仅针对类，成员属性、方法并不受此注释的影响。</p>
<p> <strong>5）@Repeatable</strong><br>表示注解可以重复使用，为了解决同一个注解不能重复在同一类&#x2F;方法&#x2F;属性上使用的问题。</p>
<p>其中最常用的就是 <strong>@Retention</strong> 跟 <strong>@Target</strong>。</p>
<h2 id="三、切面注解"><a href="#三、切面注解" class="headerlink" title="三、切面注解"></a>三、切面注解</h2><p>在SpringBoot项目的pom文件中，引入 spring-boot-starter-aop依赖。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>原文链接：<a class="link"   href="https://blog.csdn.net/shaopengjie2/article/details/136174655" >https://blog.csdn.net/shaopengjie2/article/details/136174655<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>简单说一下各个注解代表什么含义：</p>
<ul>
<li>**@Aspect:**作用是把当前类标识为一个切面供容器读取 ，也就是加上这个注解，spring才知道你这是一个切面类，用于处理切点的逻辑的。</li>
<li><strong>@Pointcut</strong>:切入点，@Pointcut切点表达式非常丰富，可以将 方法(method)、类(class)、接口(interface)、包(package) 等作为切入点，非常灵活，常用的有@annotation、@within、execution等方式，上面的示例使用的是@annotation方式，意思就是说被Spring扫描到方法上带有@annotation中的注解 就会执行切面通知。</li>
<li><strong>@Before：</strong>该注解标注的方法在业务模块代码执行之前执行，其不能阻止业务模块的执行，除非抛出异常；</li>
<li><strong>@AfterReturning：</strong>该注解标注的方法在业务模块代码执行之后执行；</li>
<li><strong>@AfterThrowing：</strong>该注解标注的方法在业务模块抛出指定异常后执行；</li>
<li><strong>@After：</strong>该注解标注的方法在所有的 Advice 执行完成后执行，无论业务模块是否抛出异常，类似于 finally 的作用；</li>
<li><strong>@Around：</strong>该注解功能最为强大，其所标注的方法用于编写包裹业务模块执行的代码，通知的第一个参数必须是 ProceedingJoinPoint 类型。在通知体内，调用 ProceedingJoinPoint 的 proceed () 方法使得连接点方法执行如果不调用 proceed () 方法，连接点方法则不会执行。无论是调用前逻辑还是调用后逻辑，都可以在该方法中编写，甚至其可以根据一定的条件而阻断业务模块的调用；      如果切面中使用了@Around 注解，如果不调用 ProceedingJoinPoint 的 proceed () 方法的话，那么 @Before  和 @After 直接标注的方法也不会被触发。@Around 注解标注的方法，在 ProceedingJoinPoint 的 proceed () 方法 前的逻辑是比@Before的逻辑还要靠前， 在proceed () 方法之后的逻辑比 @After 的逻辑还要靠后。</li>
<li><strong>Joint Point：</strong>JointPoint是程序运行过程中可识别的点，这个点可以用来作为AOP切入点。JointPoint对象则包含了和切入相关的很多信息。比如切入点的对象，方法，属性等。我们可以通过反射的方式获取这些点的状态和信息，用于追踪tracing和记录logging应用信息。</li>
</ul>
<h2 id="四、切入点表达式"><a href="#四、切入点表达式" class="headerlink" title="四、切入点表达式"></a>四、切入点表达式</h2><p>　这个我也还没搞明白，先拿下来。</p>
<p>​    我们定义切点除了使用 @Pointcut() 之外，我们还有丰富的切点表达式可以定义切点。</p>
<p>​    <strong>1）切点表达式简介</strong> </p>
<p>　<strong>2）通配符合与逻辑运算符</strong></p>
<p> @AspectJ 支持三种通配符：</p>
<p>逻辑运算符： 切点表达式由切点函数组成，切点函数之间还可以进行逻辑运算，组成复合切点。</p>
<p>   <strong>3）切点表达式：</strong></p>
<ol>
<li><p><strong>arg()</strong> :匹配切入点方法的参数类型，匹配的上才是切点。<br>  <strong>语法：args(param-pattern)</strong>   param-pattern：参数类型的全路径。<br>  注意：要先匹配到某些类，不然会报错，也就是不能单独用<br>  <strong>示例：</strong></p>
 <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;args(java.lang.String)&quot;)</span>  <span class="comment">//这样就是错的，不能单独使用要匹配到某些类</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@Pointcut(&quot;within(com.example.demo.service.impl.UserServiceImpl) &amp;&amp; args(java.lang.String,java.lang.String)&quot;)</span> <span class="comment">//要像这样使用 within 先匹配到某个具体的类，在使用args匹配到某个类型参数的方法</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>@args：</strong>匹配切入点方法上的参数的类上，参数的类必须要有指定的注解<br>      语法：@args(annotation-type)   annotation-type：注解类型的全路径<br>      注意：也不能单独使用，必须先指定到类，而且匹配参数个数至少有一个且为第一个参数的类含有该注解才能匹配的上<br>      示例：<br><code>@Pointcut(&quot;within(com.demo.RedisTest) &amp;&amp; @args(com.demo.aaa.annotation.MyAnnotation)&quot;)</code></p>
</li>
<li><p>**within:**匹配切入点的指定类的任意方法，不能匹配接口。<br>     语法：within(declaring-type)   参数为全路径的类名（可使用通配符），表示匹配当前表达式的所有类都将被当前方法环绕<br>     注意： 这个是指定到具体的类<br>     示例：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//within表达式的粒度为类，其参数为全路径的类名（可使用通配符），表示匹配当前表达式的所有类都将被当前方法环绕。如下是within表达式的语法：</span></span><br><span class="line"><span class="meta">@Pointcut(within(declaring-type-pattern))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//within表达式只能指定到类级别，如下示例表示匹配com.spring.service.BusinessObject中的所有方法：</span></span><br><span class="line"><span class="meta">@Pointcut(within(com.spring.service.BusinessObject))</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">//within表达式路径和类名都可以使用通配符进行匹配，比如如下表达式将匹配com.spring.service包下的所有类，不包括子包中的类：</span></span><br><span class="line"><span class="meta">@Pointcut(within(com.spring.service.*))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//如下表达式表示匹配com.spring.service包及子包下的所有类：</span></span><br><span class="line"><span class="meta">@Pointcut(within(com.spring.service..*))</span></span><br></pre></td></tr></table></figure></div>

</li>
<li><p>**<code>@within:</code>**表示匹配带有指定注解的类。<br> <strong>语法：@within(annotation-type)</strong>  注解的全类名<br> <strong>注意：</strong>这个是指定到带有某个注解的类<br> <strong>示例：</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如下所示示例表示匹配使用com.spring.annotation.BusinessAspect注解标注的类：</span></span><br><span class="line"><span class="meta">@within(com.spring.annotation.BusinessAspect)</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>**@annotation() :**匹配带有指定注解的连接点<br>     语法：@annotation(annotation-type)  annotation-type：注解类型的全路径<br>     示例：<br><code>@Pointcut(&quot;@annotation(com.test.annotations.LogAuto)&quot;)</code></p>
</li>
<li><p><strong>execution()</strong> 用于匹配是连接点的执行方法,Spring 切面粒度最小是达到方法级别，而 execution 表达式可以用于明确指定方法返回类型，类名，方法名和参数名等与方法相关的配置，所以是使用最广泛的。<br>    <strong>用法：</strong></p>
<ul>
<li>modifiers-pattern：方法的可见性修饰符，如 public，protected，private；</li>
<li>ret-type-pattern：方法的返回值类型，如 int，void 等；</li>
<li>declaring-type-pattern：方法所在类的全路径名，如 com.spring.Aspect；</li>
<li>name-pattern：方法名，如 getOrderDetail()；</li>
<li>param-pattern：方法的参数类型，如 java.lang.String；</li>
<li>throws-pattern：方法抛出的异常类型，如 java.lang.Exception；</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">modifiers-pattern：方法的可见性修饰符，如 <span class="keyword">public</span>，<span class="keyword">protected</span>，<span class="keyword">private</span>；</span><br><span class="line">ret-type-pattern：方法的返回值类型，如 <span class="type">int</span>，<span class="keyword">void</span> 等；</span><br><span class="line">declaring-type-pattern：方法所在类的全路径名，如 com.spring.Aspect；</span><br><span class="line">name-pattern：方法名，如 getOrderDetail()；</span><br><span class="line">param-pattern：方法的参数类型，如 java.lang.String；</span><br><span class="line"><span class="keyword">throws</span>-pattern：方法抛出的异常类型，如 java.lang.Exception；</span><br><span class="line">示例：</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配目标类的所有 public 方法，第一个 * 代表返回类型，第二个 * 代表方法名，..代表方法的参数</span></span><br><span class="line">execution(<span class="keyword">public</span> * *(..))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配目标类所有以 User 为后缀的方法。第一个 * 代表返回类型，*User 代表以 User 为后缀的方法</span></span><br><span class="line">execution(* *User(..))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 User 类里的所有方法</span></span><br><span class="line">execution(* com.test.demo.User.*(..))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 User 类及其子类的所有方法</span></span><br><span class="line">execution(* com.test.demo.User+.*(..)) :</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 com.test 包下的所有类的所有方法</span></span><br><span class="line">execution(* com.test.*.*(..))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 com.test 包下及其子孙包下所有类的所有方法</span></span><br><span class="line">execution(* com.test..*.*(..)) :</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 匹配 getOrderDetail 方法，且第一个参数类型是 Long，第二个参数类型是 String</span></span><br><span class="line">execution(* getOrderDetail(Long, String))</span><br></pre></td></tr></table></figure></div>



<h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><p>　　该样例主要是给方法的参数赋值，里面有值传递和地址传递的问题，还关系到增加String字符，地址的改变。</p>
<ul>
<li><p>Controller调用</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/annotation&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AnnotationTest</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; stringStringHashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> testService.AnnotationTest(<span class="string">&quot;wrong&quot;</span>,stringStringHashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Service层中的方法</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AnnotationTest</span><span class="params">(String text, Map&lt;String,String&gt; mmp)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@MyAnnotation(message = &quot;bbb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">AnnotationTest</span><span class="params">(String text, Map&lt;String,String&gt; mmp)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(String key : mmp.keySet()) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + mmp.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;output: &quot;</span>+text;</span><br><span class="line">        System.out.println(info);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>注解类</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>注解方法实现（Before）</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotationAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(myAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint, MyAnnotation myAnnotation)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> myAnnotation.message();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arg <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                arg = message;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arg <span class="keyword">instanceof</span> Map)&#123;</span><br><span class="line">                Map&lt;String, String&gt; paramMap = (Map&lt;String, String&gt;) arg;</span><br><span class="line">                paramMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">                paramMap.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这个方法中，是将被注解的方法中<code>String</code>类型提出，赋值为<code>message</code>，但是这边是无法成功的，原因是这边的<code>message</code>获取了<code>String</code>类型的数据后，我给<code>arg</code>进行赋值是没有用的，因为<code>Service</code>中的那个<code>String</code>类型的地址是不会改变的，而我修改<code>String</code>的时候<code>Aspect</code>中的地址会发生改变。<code>Map</code>能成功是因为它是个对象，是直接进行操作的。</p>
<p>　　调用一次接口，在输出终端中输出为：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">key1:value1</span><br><span class="line">key2:value2</span><br><span class="line">output: wrong</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>注解方法实现(Around)</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotationAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(myAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint, MyAnnotation myAnnotation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> myAnnotation.message();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        args[<span class="number">0</span>] = message;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　这种方法的<code>String</code>类型修改成功，用<code>proceed</code>方法执行原方法，并且传入修改后的参数<code>args</code>。</p>
<p>　　调用一次接口，在输出终端中输出为：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">output: bbb</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sabthever.github.io/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%862.jpeg"
                     
                ></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[1] <a class="link"   href="https://blog.csdn.net/jwentao01/article/details/106728239" >【Spring】AOP理解<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p>
<p>[2]  <a class="link"   href="https://blog.csdn.net/kkkkatoq/article/details/137520509" >Java 实现自定义注解<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：若依框架使用MyBatis-Plus中的baseMapper的方法报错Invalid bound statement (not found):</title>
    <url>/2025/07/02/technology/java/%E8%8B%A5%E4%BE%9DMyBatis-Plus%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p><strong>报错信息如下：</strong></p>
<blockquote>
<p>Invalid bound statement (not found): com.ruoyi.system.mapper.hc.HcOrderMapper.selectList </p>
</blockquote>
<p><strong>原因:</strong><br>若依框架本身就使用了mybatis，因此在配置类中有个mybatisConfig，里面是创建了SqlSessionFactoryBean 这个bean，这个bean它仅支持原生 MyBatis，而不能使用 MyBatis-Plus 的功能。因此，BaseMapper 中的 CRUD 方法（如 selectById、insert 等）无法正常工作，因为这些是 MyBatis-Plus 提供的增强功能，只有 MybatisSqlSessionFactoryBean 才能识别和处理这些功能。</p>
<p>因此我们要使用能够支持MybatisPlus的bean，也就是MybatisSqlSessionFactoryBean ，这个bean能够使用MybatisPlus的增强功能，而且<strong>只做增强，不做侵入</strong>！</p>
<p>因此不用担心原有的mybatis功能无法使用</p>
<p>解决方案如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/21795f9f5a7b496c93ecc407e05511ae.png"
                     
                ></p>
<p><strong>代码如下：</strong></p>
<pre><code>    MybatisSqlSessionFactoryBean sessionFactory = new MybatisSqlSessionFactoryBean();
</code></pre>
<p>————————————————<br>版权声明：本文为CSDN博主「泰山小张只吃荷园」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a class="link"   href="https://blog.csdn.net/csdn3043663729/article/details/146454994" >https://blog.csdn.net/csdn3043663729/article/details/146454994<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>若依</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>若依框架免token访问</title>
    <url>/2025/06/03/technology/java/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E5%85%8Dtoken%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>在<a class="link"   href="https://www.sabthever.online/2025/01/03/technology/java/ruoyi-1/#2-SecurityUtils" >若依框架的简单使用<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>中，已经简单介绍了一下<code>SecurityUtils</code>这个类的作用，并且简单的阐述了一下其中方法的使用。</p>
<p>近段时间有个项目要求没有任何登录就能够访问，而若依框架本身对于每一个接口都会进行token的判断，以此来获取当前用户信息以及是否有权限访问。这个切片的控制实际上由<code>Security</code>机制来控制的。</p>
<p>这个中间的token判断、ip判断、权限判断等等，都可以在<code>SecurityConfig</code>的<code>configure</code>方法中来配置，这个方法原型如下。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * anyRequest          |   匹配所有请求路径</span></span><br><span class="line"><span class="comment"> * access              |   SpringEl表达式结果为true时可以访问</span></span><br><span class="line"><span class="comment"> * anonymous           |   匿名可以访问</span></span><br><span class="line"><span class="comment"> * denyAll             |   用户不能访问</span></span><br><span class="line"><span class="comment"> * fullyAuthenticated  |   用户完全认证可以访问（非remember-me下自动登录）</span></span><br><span class="line"><span class="comment"> * hasAnyAuthority     |   如果有参数，参数表示权限，则其中任何一个权限可以访问</span></span><br><span class="line"><span class="comment"> * hasAnyRole          |   如果有参数，参数表示角色，则其中任何一个角色可以访问</span></span><br><span class="line"><span class="comment"> * hasAuthority        |   如果有参数，参数表示权限，则其权限可以访问</span></span><br><span class="line"><span class="comment"> * hasIpAddress        |   如果有参数，参数表示IP地址，如果用户IP和参数匹配，则可以访问</span></span><br><span class="line"><span class="comment"> * hasRole             |   如果有参数，参数表示角色，则其角色可以访问</span></span><br><span class="line"><span class="comment"> * permitAll           |   用户可以任意访问</span></span><br><span class="line"><span class="comment"> * rememberMe          |   允许通过remember-me登录的用户访问</span></span><br><span class="line"><span class="comment"> * authenticated       |   用户登录后可访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 注解标记允许匿名访问的url</span></span><br><span class="line">    ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.<span class="type">ExpressionInterceptUrlRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> httpSecurity.authorizeRequests();</span><br><span class="line">    permitAllUrl.getUrls().forEach(url -&gt; registry.antMatchers(url).permitAll());</span><br><span class="line"></span><br><span class="line">    httpSecurity</span><br><span class="line">        <span class="comment">// CSRF禁用，因为不使用session</span></span><br><span class="line">        .csrf().disable()</span><br><span class="line">        <span class="comment">// 禁用HTTP响应标头</span></span><br><span class="line">        .headers().cacheControl().disable().and()</span><br><span class="line">        <span class="comment">// 认证失败处理类</span></span><br><span class="line">        .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()</span><br><span class="line">        <span class="comment">// 基于token，所以不需要session</span></span><br><span class="line">        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">        <span class="comment">// 过滤请求</span></span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">// 对于登录login 注册register 验证码captchaImage 允许匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/register&quot;</span>, <span class="string">&quot;/captchaImage&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 静态资源，可匿名访问</span></span><br><span class="line">        .antMatchers(HttpMethod.GET, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;/*.html&quot;</span>, <span class="string">&quot;/**/*.html&quot;</span>, <span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/profile/**&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/swagger-ui.html&quot;</span>, <span class="string">&quot;/swagger-resources/**&quot;</span>, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;/*/api-docs&quot;</span>, <span class="string">&quot;/druid/**&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .headers().frameOptions().disable();</span><br><span class="line">    <span class="comment">// 添加Logout filter</span></span><br><span class="line">    httpSecurity.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">    <span class="comment">// 添加JWT filter</span></span><br><span class="line">    httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    <span class="comment">// 添加CORS filter</span></span><br><span class="line">    httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);</span><br><span class="line">    httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到其中有很多配置选项，具体可以自己查看一下。</p>
<p>我们如果不需要token就能够对接口进行直接的访问，根据上面的内容，我们可以把configure改成如下。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">        <span class="comment">// 禁用CSRF保护</span></span><br><span class="line">        .csrf().disable()</span><br><span class="line">        <span class="comment">// 不需要session</span></span><br><span class="line">        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">        <span class="comment">// 对所有请求允许访问</span></span><br><span class="line">        .authorizeRequests().anyRequest().permitAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其他的一些配置要求，也可以一起来看一下。</p>
<blockquote>
<h2 id="HttpSecurity-配置方法详解"><a href="#HttpSecurity-配置方法详解" class="headerlink" title="HttpSecurity 配置方法详解"></a>HttpSecurity 配置方法详解</h2><p>在使用 Spring Security 时，<code>HttpSecurity</code> 是一个核心类，用于配置基于 HTTP 请求的安全策略。通过 <code>HttpSecurity</code>，我们可以灵活地定义哪些请求需要进行身份验证、哪些请求需要特定的角色或权限，以及如何处理各种安全相关的细节。</p>
<h3 id="常见配置方法"><a href="#常见配置方法" class="headerlink" title="常见配置方法"></a>常见配置方法</h3><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;http.authorizeRequests()</span><br><span class="line"> .antMatchers(<span class="string">&quot;/public/**&quot;</span>).permitAll()</span><br><span class="line">.antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line"> .anyRequest().authenticated();</span><br></pre></td></tr></table></figure></div>
<h4 id="anyRequest"><a href="#anyRequest" class="headerlink" title="anyRequest"></a>anyRequest</h4><ul>
<li><p><strong>描述</strong>：匹配所有请求路径。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.anyRequest().authenticated()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：如果没有其他更具体的匹配规则，所有请求都将应用此规则。</p>
</li>
</ul>
<h4 id="access"><a href="#access" class="headerlink" title="access"></a>access</h4><ul>
<li><p><strong>描述</strong>：SpringEl 表达式结果为 <code>true</code> 时可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;) or hasRole(&#x27;USER&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：可以使用复杂的 SpringEl 表达式来定义访问规则。</p>
</li>
</ul>
<h4 id="anonymous"><a href="#anonymous" class="headerlink" title="anonymous"></a>anonymous</h4><ul>
<li><p><strong>描述</strong>：匿名可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/guest/**&quot;</span>).anonymous()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：允许未登录的用户访问指定路径。</p>
</li>
</ul>
<h4 id="denyAll"><a href="#denyAll" class="headerlink" title="denyAll"></a>denyAll</h4><ul>
<li><p><strong>描述</strong>：用户不能访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/secure/**&quot;</span>).denyAll()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：完全禁止访问指定路径。</p>
</li>
</ul>
<h4 id="fullyAuthenticated"><a href="#fullyAuthenticated" class="headerlink" title="fullyAuthenticated"></a>fullyAuthenticated</h4><ul>
<li><p><strong>描述</strong>：用户完全认证可以访问（非 remember-me 下自动登录）。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/admin/**&quot;</span>).fullyAuthenticated()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：只有通过完整认证的用户（非 remember-me 登录）可以访问。</p>
</li>
</ul>
<h4 id="hasAnyAuthority"><a href="#hasAnyAuthority" class="headerlink" title="hasAnyAuthority"></a>hasAnyAuthority</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示权限，则其中任何一个权限可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).hasAnyAuthority(<span class="string">&quot;ROLE_ADMIN&quot;</span>, <span class="string">&quot;ROLE_USER&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户拥有任何一个指定权限即可访问。</p>
</li>
</ul>
<h4 id="hasAnyRole"><a href="#hasAnyRole" class="headerlink" title="hasAnyRole"></a>hasAnyRole</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示角色，则其中任何一个角色可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).hasAnyRole(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户拥有任何一个指定角色即可访问。</p>
</li>
</ul>
<h4 id="hasAuthority"><a href="#hasAuthority" class="headerlink" title="hasAuthority"></a>hasAuthority</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示权限，则其权限可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/admin/**&quot;</span>).hasAuthority(<span class="string">&quot;ROLE_ADMIN&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户必须拥有指定权限才能访问。</p>
</li>
</ul>
<h4 id="hasIpAddress"><a href="#hasIpAddress" class="headerlink" title="hasIpAddress"></a>hasIpAddress</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示 IP 地址，如果用户 IP 和参数匹配，则可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).hasIpAddress(<span class="string">&quot;192.168.1.1&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：只有来自指定 IP 地址的用户可以访问。</p>
</li>
</ul>
<h4 id="hasRole"><a href="#hasRole" class="headerlink" title="hasRole"></a>hasRole</h4><ul>
<li><p><strong>描述</strong>：如果有参数，参数表示角色，则其角色可以访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户必须拥有指定角色才能访问。</p>
</li>
</ul>
<h4 id="permitAll"><a href="#permitAll" class="headerlink" title="permitAll"></a>permitAll</h4><ul>
<li><p><strong>描述</strong>：用户可以任意访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/public/**&quot;</span>).permitAll()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：允许所有用户（包括未登录用户）访问指定路径。</p>
</li>
</ul>
<h4 id="rememberMe"><a href="#rememberMe" class="headerlink" title="rememberMe"></a>rememberMe</h4><ul>
<li><p><strong>描述</strong>：允许通过 remember-me 登录的用户访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/user/**&quot;</span>).rememberMe()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：允许通过 remember-me 功能自动登录的用户访问。</p>
</li>
</ul>
<h4 id="authenticated"><a href="#authenticated" class="headerlink" title="authenticated"></a>authenticated</h4><ul>
<li><p><strong>描述</strong>：用户登录后可访问。</p>
</li>
<li><p><strong>示例</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;.antMatchers(<span class="string">&quot;/api/**&quot;</span>).authenticated()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>说明</strong>：用户必须登录后才能访问。</p>
</li>
</ul>
<h3 id="其他配置要求"><a href="#其他配置要求" class="headerlink" title="其他配置要求"></a>其他配置要求</h3><p>除了上述常见的配置方法，<code>HttpSecurity</code> 还提供了许多其他配置选项，用于处理各种安全相关的细节。以下是一些常见的配置要求和示例：</p>
<h4 id="登录和注销"><a href="#登录和注销" class="headerlink" title="登录和注销"></a>登录和注销</h4><ul>
<li><p><strong>登录配置</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;http</span><br><span class="line">      .formLogin()</span><br><span class="line">       .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">          .defaultSuccessUrl(<span class="string">&quot;/home&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">         .permitAll();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>注销配置</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;http</span><br><span class="line">      .logout()</span><br><span class="line">        .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">          .logoutSuccessUrl(<span class="string">&quot;/login?logout&quot;</span>)</span><br><span class="line">         .permitAll();</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="CSRF-保护"><a href="#CSRF-保护" class="headerlink" title="CSRF 保护"></a>CSRF 保护</h4><ul>
<li><strong>启用 CSRF 保护</strong>：</li>
</ul>
 <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">     .csrf()</span><br><span class="line">        .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p><strong>禁用 CSRF 保护</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">     .csrf()</span><br><span class="line">        .disable();</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="CORS-配置"><a href="#CORS-配置" class="headerlink" title="CORS 配置"></a>CORS 配置</h4><ul>
<li><p><strong>启用 CORS</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&gt;http</span><br><span class="line">      .cors()</span><br><span class="line">       .and()</span><br><span class="line">          .csrf()</span><br><span class="line">         .disable();</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul>
<li><strong>自定义异常处理</strong>：</li>
</ul>
 <div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">     .exceptionHandling()</span><br><span class="line">        .accessDeniedPage(<span class="string">&quot;/403&quot;</span>)</span><br><span class="line">         .authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">CustomAuthenticationEntryPoint</span>());</span><br></pre></td></tr></table></figure></div>
<h4 id="安全上下文"><a href="#安全上下文" class="headerlink" title="安全上下文"></a>安全上下文</h4><ul>
<li><p><strong>配置安全上下文</strong>：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">     .securityContext()</span><br><span class="line">        .securityContextRepository(<span class="keyword">new</span> <span class="title class_">CustomSecurityContextRepository</span>());</span><br></pre></td></tr></table></figure></div></li>
</ul>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过 <code>HttpSecurity</code>，我们可以灵活地配置 Spring Security 的各种安全策略。从简单的访问控制到复杂的异常处理，<code>HttpSecurity</code> 提供了丰富的配置选项，满足不同项目的需求。更多详细信息可以参考 <a class="link"   href="https://docs.spring.io/spring-security/reference/5.8.0-M1/index.html" >Spring Security 官方文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.sabthever.online/Pictures1/Blog_Base_Resouces/%E5%AD%A6%E5%BA%9F%E4%BA%863.jpeg"
                     
                ></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>若依</tag>
      </tags>
  </entry>
  <entry>
    <title>SRC导航</title>
    <url>/2024/12/31/technology/security/SRC%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<p>阿里SRC <a class="link"   href="https://security.alibaba.com/" >https://security.alibaba.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>蚂蚁集团SRC <a class="link"   href="https://security.alipay.com/" >https://security.alipay.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>阿里本地生活SRC <a class="link"   href="https://asrc.alibaba.com/#/" >https://asrc.alibaba.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>京东安全应急响应中心 <a class="link"   href="https://security.jd.com/#/" >https://security.jd.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>腾讯SRC <a class="link"   href="https://security.tencent.com/" >https://security.tencent.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>美团安全应急响应中心 <a class="link"   href="https://security.meituan.com/#/home" >https://security.meituan.com/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>百度SRC <a class="link"   href="https://bsrc.baidu.com/views/main/index.html#home" >https://bsrc.baidu.com/views/main/index.html#home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>字节跳动 <a class="link"   href="https://security.bytedance.com/" >https://security.bytedance.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>携程安全应急响应中心 <a class="link"   href="https://sec.ctrip.com/" >https://sec.ctrip.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>滴滴SRC <a class="link"   href="http://sec.didichuxing.com/" >http://sec.didichuxing.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>货拉拉安全应急响应中心 <a class="link"   href="https://llsrc.huolala.cn/#/home" >https://llsrc.huolala.cn/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>小米安全中心 <a class="link"   href="https://sec.xiaomi.com/" >https://sec.xiaomi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>银联安全应急响应中心 <a class="link"   href="https://security.unionpay.com/" >https://security.unionpay.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>猎聘SRC <a class="link"   href="https://security.liepin.com/" >https://security.liepin.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>360SRC <a class="link"   href="https://security.360.cn/" >https://security.360.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>58SRC <a class="link"   href="https://security.58.com/" >https://security.58.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>天融信安全漏洞响应中心 <a class="link"   href="https://src.topsec.com.cn/" >https://src.topsec.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>统信安全应急响应中心 <a class="link"   href="https://src.uniontech.com/" >https://src.uniontech.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>多点安全应急响应中心 <a class="link"   href="https://src.dmall.com/" >https://src.dmall.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>NIO蔚来安全应急响应中心 <a class="link"   href="https://niosrc.bugbank.cn/" >https://niosrc.bugbank.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>贝锐安全应急响应中心 <a class="link"   href="https://security.oray.com/" >https://security.oray.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>旷视安全应急响应中心 <a class="link"   href="https://megvii.huoxian.cn/" >https://megvii.huoxian.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>哈啰出行安全应急响应中心 <a class="link"   href="https://src.hellobike.com/index.php" >https://src.hellobike.com/index.php<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>TCL安全应急响应中心 <a class="link"   href="https://src.tcl.com/zh/index" >https://src.tcl.com/zh/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Soul安全应急响应中心 <a class="link"   href="https://security.soulapp.cn/" >https://security.soulapp.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Keep 安全应急响应中心 <a class="link"   href="https://keep.huoxian.cn/" >https://keep.huoxian.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Apple Security Bounty <a class="link"   href="https://security.apple.com/bounty/" >https://security.apple.com/bounty/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>理想安全应急响应中心 <a class="link"   href="https://security.lixiang.com/index" >https://security.lixiang.com/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>麦当劳中国安全应急响应中心 <a class="link"   href="https://security.mcd.cn/" >https://security.mcd.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>安恒应急响应中心 <a class="link"   href="https://security.dbappsecurity.com.cn/" >https://security.dbappsecurity.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>东方航空 <a class="link"   href="https://src.ceair.com/" >https://src.ceair.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>迅雷安全应急响应中心 <a class="link"   href="https://security.xunlei.com/" >https://security.xunlei.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>得物安全应急响应中心 <a class="link"   href="https://security.dewu.com/" >https://security.dewu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>荣耀SRC <a class="link"   href="https://security.hihonor.com/src/#/" >https://security.hihonor.com/src/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>看云安全应急响应中心 <a class="link"   href="https://security.kanyun.com/" >https://security.kanyun.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>贝壳安全 <a class="link"   href="https://security.ke.com/" >https://security.ke.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>哔哩哔哩安全应急响应中心 <a class="link"   href="https://security.bilibili.com/" >https://security.bilibili.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>BOSS直聘 <a class="link"   href="https://src.zhipin.com/" >https://src.zhipin.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>贝宝金融安全应急响应中心 <a class="link"   href="https://btcsrc.vulbox.com/" >https://btcsrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>北京北森云计算SRC <a class="link"   href="https://beisen.butian.net/" >https://beisen.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>菜鸟安全应急响应中心 <a class="link"   href="https://sec.cainiao.com/" >https://sec.cainiao.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>宜信安全应急响应中心 <a class="link"   href="https://security.creditease.cn/" >https://security.creditease.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>度小满SRC <a class="link"   href="https://security.duxiaoman.com/index.html#/main" >https://security.duxiaoman.com/index.html#/main<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>嘀嗒出行 <a class="link"   href="https://dida.butian.net/" >https://dida.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>丁香园安全应急响应中心 <a class="link"   href="https://dxysrc.vulbox.com/" >https://dxysrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>斗鱼SRC <a class="link"   href="https://security.douyu.com/" >https://security.douyu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>大疆安全应急响应中心 <a class="link"   href="https://security.dji.com/" >https://security.dji.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>DHSRC 安全应急响应中心 <a class="link"   href="http://dhsrc.dhgate.com/" >http://dhsrc.dhgate.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>魅族SRC <a class="link"   href="https://sec.meizu.com/" >https://sec.meizu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>东方财富安全应急响应中心 <a class="link"   href="http://security.eastmoney.com/" >http://security.eastmoney.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>法大大安全应急响应中心 <a class="link"   href="https://sec.fadada.com/" >https://sec.fadada.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>焦点SRC <a class="link"   href="https://security.focuschina.com/" >https://security.focuschina.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>富友SRC <a class="link"   href="https://fsrc.fuiou.com/home/index.html" >https://fsrc.fuiou.com/home/index.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>瓜子安全应急响应中心 <a class="link"   href="https://security.guazi.com/" >https://security.guazi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>华住安全响应中心 <a class="link"   href="https://sec.huazhu.com/" >https://sec.huazhu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>海康威视安全应急响应中心 <a class="link"   href="https://www.hikvision.com/cn/support/CybersecurityCenter/" >https://www.hikvision.com/cn/support/CybersecurityCenter/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>恒昌安全应急响应中心 <a class="link"   href="http://src.credithc.com/" >http://src.credithc.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>爱奇艺安全应急响应中心 <a class="link"   href="https://security.iqiyi.com/" >https://security.iqiyi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>合合安全应急响应中心 <a class="link"   href="https://security.intsig.com/" >https://security.intsig.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>平安安全应急响应中心 <a class="link"   href="https://isrc.pingan.com/homePage/index" >https://isrc.pingan.com/homePage/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>讯飞安全响应中心 <a class="link"   href="https://security.iflytek.com/" >https://security.iflytek.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>竞技世界 <a class="link"   href="https://security.jj.cn/" >https://security.jj.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>酷狗安全应急响应中心 <a class="link"   href="https://security.kugou.com/" >https://security.kugou.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>快看安全应急响应中心 <a class="link"   href="https://security.kuaikanmanhua.com/" >https://security.kuaikanmanhua.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>快手SRC <a class="link"   href="https://security.kuaishou.com/" >https://security.kuaishou.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>金山云安全应急响应中心 <a class="link"   href="https://kysrc.vulbox.com/" >https://kysrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>同程旅行安全应急响应中心 <a class="link"   href="https://sec.ly.com/" >https://sec.ly.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>理想安全应急响应中心 <a class="link"   href="https://security.lixiang.com/index" >https://security.lixiang.com/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>乐信集团安全应急响应中心 <a class="link"   href="https://lxsrc.vulbox.com/" >https://lxsrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>联想集团安全应急响应中心 <a class="link"   href="https://lsrc.vulbox.com/" >https://lsrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>美丽联合集团 <a class="link"   href="https://security.mogu.com/" >https://security.mogu.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>陌陌安全应急响应中心 <a class="link"   href="https://security.immomo.com/" >https://security.immomo.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>马蜂窝安全应急响应中心 <a class="link"   href="https://security.mafengwo.cn/" >https://security.mafengwo.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>网易安全中心 <a class="link"   href="https://aq.163.com/" >https://aq.163.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>你我贷安全响应中心 <a class="link"   href="https://www.niwodai.com/sec/index.do" >https://www.niwodai.com/sec/index.do<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>一起教育安全应急响应中心 <a class="link"   href="https://security.17zuoye.com/" >https://security.17zuoye.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>好未来安全应急响应中心 <a class="link"   href="https://src.100tal.com/" >https://src.100tal.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>OPPO安全应急响应中心 <a class="link"   href="https://security.oppo.com/cn/" >https://security.oppo.com/cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>华为PSIRT <a class="link"   href="https://bugbounty.huawei.com/#/home" >https://bugbounty.huawei.com/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>完美世界 安全应急响应中心 <a class="link"   href="http://security.wanmei.com/" >http://security.wanmei.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>平安安全应急响应中心 <a class="link"   href="https://security.pingan.com/" >https://security.pingan.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>人民教育出版社 <a class="link"   href="https://pep.butian.net/" >https://pep.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>奇安信集团 <a class="link"   href="https://qianxin.butian.net/" >https://qianxin.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>轻松筹安全应急响应中心 <a class="link"   href="https://qssrc.vulbox.com/" >https://qssrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>千米安全应急响应中心 <a class="link"   href="http://security.qianmi.com/" >http://security.qianmi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>融360安全应急响应中心 <a class="link"   href="https://security.rong360.com/#/" >https://security.rong360.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>苏宁安全应急响应中心 <a class="link"   href="https://security.suning.com/ssrc-web/index.jsp" >https://security.suning.com/ssrc-web/index.jsp<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>安全狗漏洞响应中心 <a class="link"   href="http://security.safedog.cn/index.html" >http://security.safedog.cn/index.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>水滴安全应急响应中心 <a class="link"   href="https://security.shuidihuzhu.com/" >https://security.shuidihuzhu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>顺丰安全应急响应中心 <a class="link"   href="https://sfsrc.sf-express.com/" >https://sfsrc.sf-express.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>深信服 <a class="link"   href="https://security.sangfor.com.cn/" >https://security.sangfor.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>上上签安全应急响应中心 <a class="link"   href="https://src.bestsign.cn/" >https://src.bestsign.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>同盾安全应急响应中心 <a class="link"   href="https://tdsrc.vulbox.com/" >https://tdsrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>T3出行安全应急响应中心 <a class="link"   href="https://security.t3go.cn/#/home" >https://security.t3go.cn/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>同程数科安全响应中心 <a class="link"   href="https://securitytcjf.com/" >https://securitytcjf.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>途虎安全应急响应中心 <a class="link"   href="https://security.tuhu.cn/" >https://security.tuhu.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>途牛安全应急响应中心 <a class="link"   href="http://sec.tuniu.com/" >http://sec.tuniu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>UCloud安全应急响应中心 <a class="link"   href="https://src.ucloud.cn/" >https://src.ucloud.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>VIPKID安全响应中心 <a class="link"   href="https://security.vipkid.com.cn/" >https://security.vipkid.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>vivo安全应急响应中心 <a class="link"   href="https://security.vivo.com.cn/" >https://security.vivo.com.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>唯品会 <a class="link"   href="https://sec.vip.com/" >https://sec.vip.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>WiFi万能钥匙 <a class="link"   href="https://sec.wifi.com/" >https://sec.wifi.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>微众银行安全响应中心 <a class="link"   href="https://security.webank.com/" >https://security.webank.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>泛微安全应急响应中心 <a class="link"   href="https://weaversrc.vulbox.com/" >https://weaversrc.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>挖财安全应急响应中心 <a class="link"   href="https://sec.wacai.com/" >https://sec.wacai.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>金山办公安全应急响应中心 <a class="link"   href="https://security.wps.cn/" >https://security.wps.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>微博 <a class="link"   href="https://wsrc.weibo.com/" >https://wsrc.weibo.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>享道出行安全应急响应中心 <a class="link"   href="https://src.saicmobility.com/" >https://src.saicmobility.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>喜马拉雅安全应急响应中心 <a class="link"   href="https://security.ximalaya.com/" >https://security.ximalaya.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>小赢安全应急响应中心 <a class="link"   href="https://security.xiaoying.com/" >https://security.xiaoying.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>知识星球安全应急响应中心 <a class="link"   href="https://security.zsxq.com/" >https://security.zsxq.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>自如安全应急响应中心 <a class="link"   href="https://zrsecurity.ziroom.com/" >https://zrsecurity.ziroom.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>萤石安全响应中心 <a class="link"   href="https://ysrc.ys7.com/#/home" >https://ysrc.ys7.com/#/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>有赞安全应急响应中心 <a class="link"   href="https://src.youzan.com/" >https://src.youzan.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>中通安全应急响应中心 <a class="link"   href="https://sec.zto.com/home" >https://sec.zto.com/home<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>掌门教育安全应急响应中心 <a class="link"   href="https://security.zhangmen.com/" >https://security.zhangmen.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>智联招聘安全应急响应中心 <a class="link"   href="https://src.zhaopin.com/" >https://src.zhaopin.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>众安安全应急响应中心 <a class="link"   href="https://security.zhongan.com/#/" >https://security.zhongan.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>猪八戒SRC <a class="link"   href="https://sec.zbj.com/" >https://sec.zbj.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>转载自：<a class="link"   href="https://wiki.bafangwy.com/doc/253/" >https://wiki.bafangwy.com/doc/253/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Security</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>安全</tag>
        <tag>SRC</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞赏金平台</title>
    <url>/2024/12/31/technology/security/%E6%BC%8F%E6%B4%9E%E8%B5%8F%E9%87%91%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h2 id="1、企业SRC平台导航大全"><a href="#1、企业SRC平台导航大全" class="headerlink" title="1、企业SRC平台导航大全"></a>1、企业SRC平台导航大全</h2><p><a class="link"   href="https://wiki.bafangwy.com/doc/253/" >https://wiki.bafangwy.com/doc/253/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="2、公益SRC平台"><a href="#2、公益SRC平台" class="headerlink" title="2、公益SRC平台"></a>2、公益SRC平台</h2><p>补天<br><a class="link"   href="https://www.butian.net/" >https://www.butian.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>漏洞盒子<br><a class="link"   href="https://www.vulbox.com/" >https://www.vulbox.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="3、众测平台"><a href="#3、众测平台" class="headerlink" title="3、众测平台"></a>3、众测平台</h2><p>国家信息安全漏洞共享-众测<br><a class="link"   href="https://zc.cnvd.org.cn/project/index" >https://zc.cnvd.org.cn/project/index<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>春秋云测<br><a class="link"   href="https://www.ichunqiu.com/cqyc" >https://www.ichunqiu.com/cqyc<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>360众测<br><a class="link"   href="https://zhongce.360.net/" >https://zhongce.360.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>雷神众测<br><a class="link"   href="https://www.bountyteam.com/" >https://www.bountyteam.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="4、教育SRC"><a href="#4、教育SRC" class="headerlink" title="4、教育SRC"></a>4、教育SRC</h2><p><a class="link"   href="https://src.sjtu.edu.cn/" >https://src.sjtu.edu.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="5、国外赏金平台"><a href="#5、国外赏金平台" class="headerlink" title="5、国外赏金平台"></a>5、国外赏金平台</h2><p><a class="link"   href="https://www.hackerone.com/" >https://www.hackerone.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.bugcrowd.com/" >https://www.bugcrowd.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.openbugbounty.org/" >https://www.openbugbounty.org/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.intigriti.com/" >https://www.intigriti.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>国外SRC：<br><a class="link"   href="https://security.apple.com/bounty/categories" >https://security.apple.com/bounty/categories<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.facebook.com/whitehat" >https://www.facebook.com/whitehat<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.microsoft.com/en-us/msrc/bounty" >https://www.microsoft.com/en-us/msrc/bounty<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://bughunters.google.com/about" >https://bughunters.google.com/about<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://bounty.github.com/" >https://bounty.github.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>转载自：<a class="link"   href="https://wiki.bafangwy.com/doc/523/" >https://wiki.bafangwy.com/doc/523/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Security</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>安全</tag>
        <tag>SRC</tag>
        <tag>众测</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全相关竞赛比赛</title>
    <url>/2024/12/31/technology/security/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E7%AB%9E%E8%B5%9B%E6%AF%94%E8%B5%9B/</url>
    <content><![CDATA[<p>转载文章，网络安全相关竞赛比赛</p>
<h2 id="赛事日历（包含全国所有网络安全竞赛）"><a href="#赛事日历（包含全国所有网络安全竞赛）" class="headerlink" title="赛事日历（包含全国所有网络安全竞赛）"></a>赛事日历（包含全国所有网络安全竞赛）</h2><p><a class="link"   href="https://datacon.qianxin.com/competition/competitions" >https://datacon.qianxin.com/competition/competitions<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.ichunqiu.com/competition/all" >https://www.ichunqiu.com/competition/all<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>在线CTF靶场<br><a class="link"   href="https://wiki.bafangwy.com/doc/207/" >https://wiki.bafangwy.com/doc/207/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="全国网络安全竞赛"><a href="#全国网络安全竞赛" class="headerlink" title="全国网络安全竞赛"></a>全国网络安全竞赛</h2><table style="margin: auto; text-align: center; word-break: break-all;">
    <tr>
        <th>名称</th>
        <th>链接</th>
    </tr>
    <tr>
        <td>全国大学生信息安全竞赛</td>
        <td><a class="link"   href="http://www.ciscn.cn/"  target="_blank">http://www.ciscn.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>信息安全与对抗技术竞赛（Information Security and Countermeasures Contest，简称ISCC）</td>
        <td><a class="link"   href="https://www.isclab.org.cn/iscc_0/"  target="_blank">https://www.isclab.org.cn/iscc_0/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>网鼎杯（公安部）</td>
        <td><a class="link"   href="https://www.wangdingcup.com/"  target="_blank">https://www.wangdingcup.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>强网杯（全国网络安全挑战赛）</td>
        <td><a class="link"   href="https://www.qiangwangbei.com/"  target="_blank">https://www.qiangwangbei.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>奇安信 蓝帽杯（全国大学生网络安全技能大赛）</td>
        <td><a class="link"   href="https://www.qianxin.com/bluehatcup/2023"  target="_blank">https://www.qianxin.com/bluehatcup/2023<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>陇剑杯（公安部）</td>
        <td><a class="link"   href="http://www.longjiancup.cn"  target="_blank">www.longjiancup.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
    <tr>
        <td>第二届全国技能大赛-网络安全项目</td>
        <td><a class="link"   href="http://www.mohrss.gov.cn/SYrlzyhshbzb/ztzl/zhrmghgdejzyjnds/qjgs/202309/t20230925_506897.html"  target="_blank">http://www.mohrss.gov.cn/SYrlzyhshbzb/ztzl/zhrmghgdejzyjnds/qjgs/202309/t20230925_506897.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
    </tr>
</table>

<h2 id="省级网络安全竞赛"><a href="#省级网络安全竞赛" class="headerlink" title="省级网络安全竞赛"></a>省级网络安全竞赛</h2><p>湖湘杯<br>湖南省委网信办联合省教育厅、省广播电视局、省政务管理服务局、省通信管理局、长沙市人民政府等6家单位共同主办<br>（往期报名信息）<br><a class="link"   href="http://gxt.hunan.gov.cn/hnxcy/xcyxwzx/xcytzgg/202209/t20220921_29011688.html" >http://gxt.hunan.gov.cn/hnxcy/xcyxwzx/xcytzgg/202209/t20220921_29011688.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>湖南省“网安湘军杯”</p>
<p>吉林省祥云杯<br><a class="link"   href="https://xiangyuncup.ichunqiu.com/" >https://xiangyuncup.ichunqiu.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>郑州市绿城杯</p>
<p>浙江省大学生网络与信息安全竞赛</p>
<h2 id="企业级"><a href="#企业级" class="headerlink" title="企业级"></a>企业级</h2><p>全国网络安全行业职业技能大赛<br><a class="link"   href="https://inspc.org.cn/" >https://inspc.org.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>教育部认可的大学生学科竞赛网站链接（2023版）<br><a class="link"   href="http://cxcy.usst.edu.cn/2023/0418/c10804a291961/page.htm" >http://cxcy.usst.edu.cn/2023/0418/c10804a291961/page.htm<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>转载自：<a class="link"   href="https://wiki.bafangwy.com/doc/233/" >https://wiki.bafangwy.com/doc/233/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Technology</category>
        <category>Security</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>安全</tag>
        <tag>比赛</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
